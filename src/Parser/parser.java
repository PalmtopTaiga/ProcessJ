
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Sat Oct 10 14:46:45 PDT 2015
//----------------------------------------------------

package Parser;

import Scanner.Scanner;
import AST.*;
import Utilities.Error;
import Parser.*;

/** CUP v0.10j generated parser.
  * @version Sat Oct 10 14:46:45 PDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\002\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\007\003\000\002" +
    "\007\004\000\002\010\013\000\002\010\013\000\002\011" +
    "\003\000\002\011\003\000\002\012\004\000\002\012\002" +
    "\000\002\013\005\000\002\013\003\000\002\020\003\000" +
    "\002\020\005\000\002\017\003\000\002\017\005\000\002" +
    "\014\003\000\002\014\002\000\002\015\005\000\002\015" +
    "\003\000\002\016\004\000\002\016\005\000\002\021\007" +
    "\000\002\021\007\000\002\022\004\000\002\022\002\000" +
    "\002\023\005\000\002\024\004\000\002\024\003\000\002" +
    "\025\005\000\002\026\003\000\002\026\004\000\002\027" +
    "\007\000\002\030\005\000\002\031\004\000\002\031\003" +
    "\000\002\032\005\000\002\033\005\000\002\033\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\003\000\002\037\005\000\002\037\005\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\006" +
    "\000\002\041\010\000\002\041\010\000\002\041\007\000" +
    "\002\041\006\000\002\041\010\000\002\041\010\000\002" +
    "\041\011\000\002\041\011\000\002\042\006\000\002\045" +
    "\003\000\002\045\002\000\002\046\003\000\002\046\004" +
    "\000\002\047\006\000\002\047\005\000\002\043\003\000" +
    "\002\043\002\000\002\044\005\000\002\050\003\000\002" +
    "\050\002\000\002\051\004\000\002\051\003\000\002\052" +
    "\005\000\002\052\007\000\002\053\003\000\002\053\002" +
    "\000\002\054\004\000\002\054\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\056\006\000\002\057" +
    "\005\000\002\057\003\000\002\060\005\000\002\060\003" +
    "\000\002\061\005\000\002\061\003\000\002\062\003\000" +
    "\002\062\005\000\002\063\003\000\002\063\005\000\002" +
    "\064\003\000\002\064\003\000\002\065\005\000\002\066" +
    "\003\000\002\066\002\000\002\067\005\000\002\067\003" +
    "\000\002\070\003\000\002\070\002\000\002\071\005\000" +
    "\002\072\003\000\002\072\002\000\002\073\004\000\002" +
    "\073\003\000\002\074\004\000\002\074\010\000\002\075" +
    "\005\000\002\075\003\000\002\076\004\000\002\076\003" +
    "\000\002\077\005\000\002\077\004\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\004\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\011\000\002\102\011\000\002\102\003\000\002" +
    "\103\007\000\002\104\011\000\002\105\011\000\002\106" +
    "\007\000\002\107\007\000\002\110\013\000\002\110\020" +
    "\000\002\110\014\000\002\111\013\000\002\111\020\000" +
    "\002\111\014\000\002\112\003\000\002\112\002\000\002" +
    "\113\003\000\002\113\003\000\002\114\003\000\002\114" +
    "\002\000\002\115\003\000\002\116\003\000\002\116\005" +
    "\000\002\120\010\000\002\121\007\000\002\122\007\000" +
    "\002\123\005\000\002\123\003\000\002\124\003\000\002" +
    "\124\006\000\002\124\003\000\002\125\003\000\002\126" +
    "\005\000\002\127\010\000\002\127\010\000\002\130\011" +
    "\000\002\131\004\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\132\010\000\002\132\010\000\002\133" +
    "\005\000\002\134\005\000\002\135\005\000\002\136\003" +
    "\000\002\136\002\000\002\137\005\000\002\140\007\000" +
    "\002\141\005\000\002\142\003\000\002\142\002\000\002" +
    "\143\003\000\002\143\004\000\002\144\004\000\002\145" +
    "\003\000\002\145\004\000\002\146\005\000\002\146\004" +
    "\000\002\147\004\000\002\150\004\000\002\151\007\000" +
    "\002\151\006\000\002\152\004\000\002\152\003\000\002" +
    "\153\011\000\002\153\005\000\002\154\005\000\002\154" +
    "\003\000\002\154\003\000\002\155\003\000\002\155\003" +
    "\000\002\155\003\000\002\155\003\000\002\155\003\000" +
    "\002\155\005\000\002\155\005\000\002\156\003\000\002" +
    "\156\005\000\002\156\003\000\002\156\003\000\002\156" +
    "\003\000\002\157\006\000\002\157\006\000\002\157\006" +
    "\000\002\157\006\000\002\160\003\000\002\160\004\000" +
    "\002\161\005\000\002\162\003\000\002\162\002\000\002" +
    "\163\005\000\002\163\004\000\002\164\007\000\002\165" +
    "\005\000\002\165\005\000\002\165\005\000\002\165\005" +
    "\000\002\166\010\000\002\166\010\000\002\167\005\000" +
    "\002\167\005\000\002\170\006\000\002\170\006\000\002" +
    "\171\006\000\002\171\010\000\002\171\010\000\002\171" +
    "\010\000\002\171\010\000\002\172\003\000\002\172\002" +
    "\000\002\173\003\000\002\173\005\000\002\174\003\000" +
    "\002\174\003\000\002\174\003\000\002\174\003\000\002" +
    "\175\004\000\002\176\004\000\002\177\003\000\002\177" +
    "\003\000\002\177\004\000\002\177\004\000\002\177\003" +
    "\000\002\200\004\000\002\201\004\000\002\202\003\000" +
    "\002\202\004\000\002\202\004\000\002\202\003\000\002" +
    "\203\006\000\002\203\006\000\002\204\003\000\002\204" +
    "\005\000\002\204\005\000\002\204\005\000\002\205\003" +
    "\000\002\205\005\000\002\205\005\000\002\206\003\000" +
    "\002\206\005\000\002\206\005\000\002\206\005\000\002" +
    "\207\003\000\002\207\005\000\002\207\005\000\002\207" +
    "\005\000\002\207\005\000\002\210\003\000\002\210\005" +
    "\000\002\210\005\000\002\211\003\000\002\211\005\000" +
    "\002\212\003\000\002\212\005\000\002\213\003\000\002" +
    "\213\005\000\002\214\003\000\002\214\005\000\002\215" +
    "\003\000\002\215\005\000\002\216\003\000\002\216\007" +
    "\000\002\217\003\000\002\217\003\000\002\220\005\000" +
    "\002\221\003\000\002\221\003\000\002\221\003\000\002" +
    "\221\003\000\002\221\003\000\002\221\003\000\002\221" +
    "\003\000\002\221\003\000\002\221\003\000\002\221\003" +
    "\000\002\221\003\000\002\221\003\000\002\222\003\000" +
    "\002\222\003\000\002\222\003\000\002\223\003\000\002" +
    "\223\002\000\002\224\003\000\002\225\003\000\002\226" +
    "\003\000\002\226\003\000\002\226\003\000\002\226\003" +
    "\000\002\226\003\000\002\226\003\000\002\226\003\000" +
    "\002\226\003\000\002\226\003\000\002\227\007\000\002" +
    "\230\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02b1\000\114\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0" +
    "\021\uffb0\023\uffb0\026\uffb0\051\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\004\075\uffb0\154" +
    "\uffb0\155\uffb0\156\uffb0\157\uffb0\160\uffb0\161\uffb0\162\uffb0" +
    "\001\002\000\004\162\u02b0\001\002\000\114\002\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\016\uffaf\021\uffaf\023\uffaf\026\uffaf\051" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\154\uffaf\155\uffaf\156\uffaf\157\uffaf" +
    "\160\uffaf\161\uffaf\162\uffaf\001\002\000\112\002\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\016\uffaa\021\uffaa\023\uffaa\026\uffaa\051" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\062\015\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\075\uffaa\154\uffaa\155\uffaa\156\uffaa\157\uffaa\160\uffaa" +
    "\161\uffaa\162\uffaa\001\002\000\004\002\013\001\002\000" +
    "\004\002\000\001\002\000\114\002\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\016\uffb1\021\uffb1\023\uffb1\026\uffb1\051\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\004" +
    "\075\uffb1\154\uffb1\155\uffb1\156\uffb1\157\uffb1\160\uffb1\161" +
    "\uffb1\162\uffb1\001\002\000\114\002\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\016\uffae\021\uffae\023\uffae\026\uffae\051\uffae\055\uffae" +
    "\056\uffae\057\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\154\uffae\155\uffae\156\uffae\157\uffae\160\uffae\161" +
    "\uffae\162\uffae\001\002\000\004\002\001\001\002\000\110" +
    "\002\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\021\uffa7\023\uffa7" +
    "\026\uffa7\051\uffa7\055\uffa7\056\uffa7\057\uffa7\063\022\064" +
    "\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7" +
    "\073\uffa7\075\uffa7\154\uffa7\155\uffa7\156\uffa7\157\uffa7\160" +
    "\uffa7\161\uffa7\162\uffa7\001\002\000\004\162\017\001\002" +
    "\000\110\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\016\uffab\021\uffab" +
    "\023\uffab\026\uffab\051\uffab\055\uffab\056\uffab\057\uffab\063" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\075\uffab\154\uffab\155\uffab\156\uffab\157" +
    "\uffab\160\uffab\161\uffab\162\uffab\001\002\000\004\103\020" +
    "\001\002\000\110\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\016\uffa9" +
    "\021\uffa9\023\uffa9\026\uffa9\051\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\075\uffa9\154\uffa9\155\uffa9\156" +
    "\uffa9\157\uffa9\160\uffa9\161\uffa9\162\uffa9\001\002\000\110" +
    "\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5\021\uffa5\023\uffa5" +
    "\026\uffa5\051\uffa5\055\uffa5\056\uffa5\057\uffa5\063\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\073\uffa5\075\uffa5\154\uffa5\155\uffa5\156\uffa5\157\uffa5\160" +
    "\uffa5\161\uffa5\162\uffa5\001\002\000\004\162\u02aa\001\002" +
    "\000\110\002\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\021\uffa8" +
    "\023\uffa8\026\uffa8\051\uffa8\055\uffa8\056\uffa8\057\uffa8\063" +
    "\022\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\075\uffa8\154\uffa8\155\uffa8\156\uffa8\157" +
    "\uffa8\160\uffa8\161\uffa8\162\uffa8\001\002\000\106\002\ufffe" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\016\uffa1\021\uffa1\023\uffa1\026\uffa1" +
    "\051\uffa1\055\uffa1\056\uffa1\057\uffa1\064\025\065\034\066" +
    "\031\067\040\070\035\071\045\072\036\073\uffa1\075\uffa1" +
    "\154\uffa1\155\uffa1\156\uffa1\157\uffa1\160\uffa1\161\uffa1\162" +
    "\uffa1\001\002\000\102\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\016\uff9e\021" +
    "\uff9e\023\uff9e\026\uff9e\051\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\073" +
    "\uff9e\075\uff9e\154\uff9e\155\uff9e\156\uff9e\157\uff9e\160\uff9e" +
    "\161\uff9e\162\uff9e\001\002\000\106\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\021\ufffa\023\ufffa\026\ufffa\051\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\072\ufffa\073\ufffa\075\ufffa\154\ufffa\155" +
    "\ufffa\156\ufffa\157\ufffa\160\ufffa\161\ufffa\162\ufffa\001\002" +
    "\000\106\002\uffff\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\021\uffa1" +
    "\023\uffa1\026\uffa1\051\uffa1\055\uffa1\056\uffa1\057\uffa1\064" +
    "\025\065\034\066\031\067\040\070\035\071\045\072\036" +
    "\073\uffa1\075\uffa1\154\uffa1\155\uffa1\156\uffa1\157\uffa1\160" +
    "\uffa1\161\uffa1\162\uffa1\001\002\000\106\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\016\ufff9\021\ufff9\023\ufff9\026\ufff9\051\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\075\ufff9\154\ufff9" +
    "\155\ufff9\156\ufff9\157\ufff9\160\ufff9\161\ufff9\162\ufff9\001" +
    "\002\000\102\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\016\uff9b\021\uff9b\023" +
    "\uff9b\026\uff9b\051\uff9b\055\uff9b\056\uff9b\057\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\073\uff9b\075" +
    "\uff9b\154\uff9b\155\uff9b\156\uff9b\157\uff9b\160\uff9b\161\uff9b" +
    "\162\uff9b\001\002\000\102\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f" +
    "\021\uff9f\023\uff9f\026\uff9f\051\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f" +
    "\073\uff9f\075\uff9f\154\uff9f\155\uff9f\156\uff9f\157\uff9f\160" +
    "\uff9f\161\uff9f\162\uff9f\001\002\000\106\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\016\ufff8\021\ufff8\023\ufff8\026\ufff8\051\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\064\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\075\ufff8\154\ufff8" +
    "\155\ufff8\156\ufff8\157\ufff8\160\ufff8\161\ufff8\162\ufff8\001" +
    "\002\000\102\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\021\uff9c\023" +
    "\uff9c\026\uff9c\051\uff9c\055\uff9c\056\uff9c\057\uff9c\064\uff9c" +
    "\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\073\uff9c\075" +
    "\uff9c\154\uff9c\155\uff9c\156\uff9c\157\uff9c\160\uff9c\161\uff9c" +
    "\162\uff9c\001\002\000\102\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\016\uff99" +
    "\021\uff99\023\uff99\026\uff99\051\uff99\055\uff99\056\uff99\057" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99" +
    "\073\uff99\075\uff99\154\uff99\155\uff99\156\uff99\157\uff99\160" +
    "\uff99\161\uff99\162\uff99\001\002\000\004\162\u02a4\001\002" +
    "\000\106\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\021\ufffc" +
    "\023\ufffc\026\ufffc\051\ufffc\055\ufffc\056\ufffc\057\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\073\ufffc\075\ufffc\154\ufffc\155\ufffc\156\ufffc\157\ufffc\160" +
    "\ufffc\161\ufffc\162\ufffc\001\002\000\102\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014" +
    "\uff9a\016\uff9a\021\uff9a\023\uff9a\026\uff9a\051\uff9a\055\uff9a" +
    "\056\uff9a\057\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\071\uff9a\073\uff9a\075\uff9a\154\uff9a\155\uff9a\156\uff9a" +
    "\157\uff9a\160\uff9a\161\uff9a\162\uff9a\001\002\000\102\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\016\uffa2\021\uffa2\023\uffa2\026\uffa2\051" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\064\025\065\034\066\031" +
    "\067\040\070\035\071\045\073\uffa2\075\uffa2\154\uffa2\155" +
    "\uffa2\156\uffa2\157\uffa2\160\uffa2\161\uffa2\162\uffa2\001\002" +
    "\000\004\002\uffb2\001\002\000\066\004\074\005\101\006" +
    "\047\007\062\010\107\011\105\012\055\013\052\014\111" +
    "\016\054\021\051\023\053\026\103\051\075\055\110\056" +
    "\067\057\066\073\063\075\056\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\117\001\002\000\106\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\016\ufffb\021\ufffb\023\ufffb\026" +
    "\ufffb\051\ufffb\055\ufffb\056\ufffb\057\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\075" +
    "\ufffb\154\ufffb\155\ufffb\156\ufffb\157\ufffb\160\ufffb\161\ufffb" +
    "\162\ufffb\001\002\000\102\004\uff9d\005\uff9d\006\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d" +
    "\021\uff9d\023\uff9d\026\uff9d\051\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d" +
    "\073\uff9d\075\uff9d\154\uff9d\155\uff9d\156\uff9d\157\uff9d\160" +
    "\uff9d\161\uff9d\162\uff9d\001\002\000\100\076\ufe9f\100\ufe9f" +
    "\101\ufe9f\102\ufe9f\103\ufe9f\104\ufe9f\121\ufe9f\122\ufe9f\123" +
    "\ufe9f\124\ufe9f\125\ufe9f\126\ufe9f\127\ufe9f\130\ufe9f\131\ufe9f" +
    "\132\ufe9f\133\ufe9f\134\ufe9f\135\ufe9f\136\ufe9f\137\ufe9f\140" +
    "\ufe9f\141\ufe9f\142\ufe9f\143\ufe9f\146\ufe9f\147\ufe9f\150\ufe9f" +
    "\151\ufe9f\152\ufe9f\153\ufe9f\001\002\000\012\076\uffc9\101" +
    "\uffc9\121\uffc9\162\uffc9\001\002\000\100\076\ufe9b\100\ufe9b" +
    "\101\ufe9b\102\ufe9b\103\ufe9b\104\ufe9b\121\ufe9b\122\ufe9b\123" +
    "\ufe9b\124\ufe9b\125\ufe9b\126\ufe9b\127\ufe9b\130\ufe9b\131\ufe9b" +
    "\132\ufe9b\133\ufe9b\134\ufe9b\135\ufe9b\136\ufe9b\137\ufe9b\140" +
    "\ufe9b\141\ufe9b\142\ufe9b\143\ufe9b\146\ufe9b\147\ufe9b\150\ufe9b" +
    "\151\ufe9b\152\ufe9b\153\ufe9b\001\002\000\010\016\u0293\017" +
    "\u0292\020\u0294\001\002\000\012\076\uffcb\101\uffcb\121\uffcb" +
    "\162\uffcb\001\002\000\012\076\uffc3\101\uffc3\121\uffc3\162" +
    "\uffc3\001\002\000\004\122\u028c\001\002\000\012\076\uffc5" +
    "\101\uffc5\121\uffc5\162\uffc5\001\002\000\042\051\075\073" +
    "\063\075\135\134\147\135\136\144\137\145\143\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\174\001\002\000\076\076\uff11\100\uff11\102\uff11" +
    "\103\uff11\104\uff11\121\uff11\122\uff11\123\uff11\124\uff11\125" +
    "\uff11\126\uff11\127\uff11\130\uff11\131\uff11\132\uff11\133\uff11" +
    "\134\uff11\135\uff11\136\uff11\137\uff11\140\uff11\141\uff11\142" +
    "\uff11\143\uff11\146\uff11\147\uff11\150\uff11\151\uff11\152\uff11" +
    "\153\uff11\001\002\000\100\076\uff0c\100\uff0c\101\uff0c\102" +
    "\uff0c\103\uff0c\104\uff0c\121\uff0c\122\uff0c\123\uff0c\124\uff0c" +
    "\125\uff0c\126\uff0c\127\uff0c\130\uff0c\131\uff0c\132\uff0c\133" +
    "\uff0c\134\uff0c\135\uff0c\136\uff0c\137\uff0c\140\uff0c\141\uff0c" +
    "\142\uff0c\143\uff0c\146\uff0c\147\uff0c\150\uff0c\151\uff0c\152" +
    "\uff0c\153\uff0c\001\002\000\076\076\uff12\100\uff12\102\uff12" +
    "\103\uff12\104\uff12\121\uff12\122\uff12\123\uff12\124\uff12\125" +
    "\uff12\126\uff12\127\uff12\130\uff12\131\uff12\132\uff12\133\uff12" +
    "\134\uff12\135\uff12\136\uff12\137\uff12\140\uff12\141\uff12\142" +
    "\uff12\143\uff12\146\uff12\147\uff12\150\uff12\151\uff12\152\uff12" +
    "\153\uff12\001\002\000\012\076\uffc8\101\uffc8\121\uffc8\162" +
    "\uffc8\001\002\000\100\076\ufe9c\100\ufe9c\101\ufe9c\102\ufe9c" +
    "\103\ufe9c\104\ufe9c\121\ufe9c\122\ufe9c\123\ufe9c\124\ufe9c\125" +
    "\ufe9c\126\ufe9c\127\ufe9c\130\ufe9c\131\ufe9c\132\ufe9c\133\ufe9c" +
    "\134\ufe9c\135\ufe9c\136\ufe9c\137\ufe9c\140\ufe9c\141\ufe9c\142" +
    "\ufe9c\143\ufe9c\146\ufe9c\147\ufe9c\150\ufe9c\151\ufe9c\152\ufe9c" +
    "\153\ufe9c\001\002\000\100\076\ufe9a\100\ufe9a\101\ufe9a\102" +
    "\ufe9a\103\ufe9a\104\ufe9a\121\ufe9a\122\ufe9a\123\ufe9a\124\ufe9a" +
    "\125\ufe9a\126\ufe9a\127\ufe9a\130\ufe9a\131\ufe9a\132\ufe9a\133" +
    "\ufe9a\134\ufe9a\135\ufe9a\136\ufe9a\137\ufe9a\140\ufe9a\141\ufe9a" +
    "\142\ufe9a\143\ufe9a\146\ufe9a\147\ufe9a\150\ufe9a\151\ufe9a\152" +
    "\ufe9a\153\ufe9a\001\002\000\006\121\uffcf\162\uffcf\001\002" +
    "\000\004\162\u0286\001\002\000\004\162\u026a\001\002\000" +
    "\010\101\u0150\121\uffce\162\uffce\001\002\000\100\076\ufe98" +
    "\100\ufe98\101\ufe98\102\ufe98\103\ufe98\104\ufe98\121\ufe98\122" +
    "\ufe98\123\ufe98\124\ufe98\125\ufe98\126\ufe98\127\ufe98\130\ufe98" +
    "\131\ufe98\132\ufe98\133\ufe98\134\ufe98\135\ufe98\136\ufe98\137" +
    "\ufe98\140\ufe98\141\ufe98\142\ufe98\143\ufe98\146\ufe98\147\ufe98" +
    "\150\ufe98\151\ufe98\152\ufe98\153\ufe98\001\002\000\006\152" +
    "\u014e\153\u0112\001\002\000\100\076\uff0a\100\uff0a\101\uff0a" +
    "\102\uff0a\103\uff0a\104\uff0a\121\uff0a\122\uff0a\123\uff0a\124" +
    "\uff0a\125\uff0a\126\uff0a\127\uff0a\130\uff0a\131\uff0a\132\uff0a" +
    "\133\uff0a\134\uff0a\135\uff0a\136\uff0a\137\uff0a\140\uff0a\141" +
    "\uff0a\142\uff0a\143\uff0a\146\uff0a\147\uff0a\150\uff0a\151\uff0a" +
    "\152\uff0a\153\uff0a\001\002\000\012\076\uffcc\101\uffcc\121" +
    "\uffcc\162\uffcc\001\002\000\034\004\074\005\101\006\047" +
    "\007\062\010\107\011\105\012\055\013\052\014\111\023" +
    "\053\026\103\064\u024d\162\u0250\001\002\000\006\121\uffcd" +
    "\162\uffcd\001\002\000\076\076\uff0f\100\uff0f\102\uff0f\103" +
    "\uff0f\104\uff0f\121\uff0f\122\uff0f\123\uff0f\124\uff0f\125\uff0f" +
    "\126\uff0f\127\uff0f\130\uff0f\131\uff0f\132\uff0f\133\uff0f\134" +
    "\uff0f\135\uff0f\136\uff0f\137\uff0f\140\uff0f\141\uff0f\142\uff0f" +
    "\143\uff0f\146\uff0f\147\uff0f\150\uff0f\151\uff0f\152\uff0f\153" +
    "\uff0f\001\002\000\010\101\u0150\121\uffd0\162\uffd0\001\002" +
    "\000\012\076\uffca\101\uffca\121\uffca\162\uffca\001\002\000" +
    "\100\076\ufe99\100\ufe99\101\ufe99\102\ufe99\103\ufe99\104\ufe99" +
    "\121\ufe99\122\ufe99\123\ufe99\124\ufe99\125\ufe99\126\ufe99\127" +
    "\ufe99\130\ufe99\131\ufe99\132\ufe99\133\ufe99\134\ufe99\135\ufe99" +
    "\136\ufe99\137\ufe99\140\ufe99\141\ufe99\142\ufe99\143\ufe99\146" +
    "\ufe99\147\ufe99\150\ufe99\151\ufe99\152\ufe99\153\ufe99\001\002" +
    "\000\012\076\uffc2\101\uffc2\121\uffc2\162\uffc2\001\002\000" +
    "\076\076\uff10\100\uff10\102\uff10\103\uff10\104\uff10\121\uff10" +
    "\122\uff10\123\uff10\124\uff10\125\uff10\126\uff10\127\uff10\130" +
    "\uff10\131\uff10\132\uff10\133\uff10\134\uff10\135\uff10\136\uff10" +
    "\137\uff10\140\uff10\141\uff10\142\uff10\143\uff10\146\uff10\147" +
    "\uff10\150\uff10\151\uff10\152\uff10\153\uff10\001\002\000\012" +
    "\076\uffc6\101\uffc6\121\uffc6\162\uffc6\001\002\000\100\076" +
    "\uff09\100\uff09\101\uff09\102\uff09\103\uff09\104\uff09\121\uff09" +
    "\122\uff09\123\uff09\124\uff09\125\uff09\126\uff09\127\uff09\130" +
    "\uff09\131\uff09\132\uff09\133\uff09\134\uff09\135\uff09\136\uff09" +
    "\137\uff09\140\uff09\141\uff09\142\uff09\143\uff09\146\uff09\147" +
    "\uff09\150\uff09\151\uff09\152\uff09\153\uff09\001\002\000\012" +
    "\076\uffc7\101\uffc7\121\uffc7\162\uffc7\001\002\000\062\004" +
    "\074\005\101\006\047\007\062\010\107\011\105\012\055" +
    "\013\052\014\111\015\u0230\016\054\021\051\023\053\026" +
    "\103\051\075\073\063\075\056\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\117\001\002\000\012\076" +
    "\uffc4\101\uffc4\121\uffc4\162\uffc4\001\002\000\100\076\uff13" +
    "\100\uff13\101\u0179\102\uff13\103\uff13\104\uff13\121\uff13\122" +
    "\uff13\123\uff13\124\uff13\125\uff13\126\uff13\127\uff13\130\uff13" +
    "\131\uff13\132\uff13\133\uff13\134\uff13\135\uff13\136\uff13\137" +
    "\uff13\140\uff13\141\uff13\142\uff13\143\uff13\146\uff13\147\uff13" +
    "\150\uff13\151\uff13\152\uff13\153\uff13\001\002\000\100\076" +
    "\ufe9d\100\ufe9d\101\ufe9d\102\ufe9d\103\ufe9d\104\ufe9d\121\ufe9d" +
    "\122\ufe9d\123\ufe9d\124\ufe9d\125\ufe9d\126\ufe9d\127\ufe9d\130" +
    "\ufe9d\131\ufe9d\132\ufe9d\133\ufe9d\134\ufe9d\135\ufe9d\136\ufe9d" +
    "\137\ufe9d\140\ufe9d\141\ufe9d\142\ufe9d\143\ufe9d\146\ufe9d\147" +
    "\ufe9d\150\ufe9d\151\ufe9d\152\ufe9d\153\ufe9d\001\002\000\100" +
    "\076\ufe9e\100\ufe9e\101\ufe9e\102\ufe9e\103\ufe9e\104\ufe9e\121" +
    "\ufe9e\122\ufe9e\123\ufe9e\124\ufe9e\125\ufe9e\126\ufe9e\127\ufe9e" +
    "\130\ufe9e\131\ufe9e\132\ufe9e\133\ufe9e\134\ufe9e\135\ufe9e\136" +
    "\ufe9e\137\ufe9e\140\ufe9e\141\ufe9e\142\ufe9e\143\ufe9e\146\ufe9e" +
    "\147\ufe9e\150\ufe9e\151\ufe9e\152\ufe9e\153\ufe9e\001\002\000" +
    "\100\076\uff08\100\uff08\101\uff08\102\uff08\103\uff08\104\uff08" +
    "\121\uff08\122\uff08\123\uff08\124\uff08\125\uff08\126\uff08\127" +
    "\uff08\130\uff08\131\uff08\132\uff08\133\uff08\134\uff08\135\uff08" +
    "\136\uff08\137\uff08\140\uff08\141\uff08\142\uff08\143\uff08\146" +
    "\uff08\147\uff08\150\uff08\151\uff08\152\uff08\153\uff08\001\002" +
    "\000\100\076\ufea0\100\ufea0\101\ufea0\102\ufea0\103\ufea0\104" +
    "\ufea0\121\ufea0\122\ufea0\123\ufea0\124\ufea0\125\ufea0\126\ufea0" +
    "\127\ufea0\130\ufea0\131\ufea0\132\ufea0\133\ufea0\134\ufea0\135" +
    "\ufea0\136\ufea0\137\ufea0\140\ufea0\141\ufea0\142\ufea0\143\ufea0" +
    "\146\ufea0\147\ufea0\150\ufea0\151\ufea0\152\ufea0\153\ufea0\001" +
    "\002\000\016\075\177\101\u0133\121\uffc1\152\u0132\153\200" +
    "\162\uffc1\001\002\000\004\162\122\001\002\000\006\103" +
    "\uff96\104\uff96\001\002\000\014\076\uff8f\101\uff8f\103\uff8f" +
    "\104\uff8f\105\uff8f\001\002\000\006\103\u022e\104\u022d\001" +
    "\002\000\012\101\126\103\uff94\104\uff94\105\125\001\002" +
    "\000\044\051\075\073\063\075\135\077\164\134\147\135" +
    "\136\144\137\145\143\146\130\147\151\154\116\155\046" +
    "\156\114\157\113\160\050\161\064\162\174\001\002\000" +
    "\004\102\127\001\002\000\014\076\uff8e\101\uff8e\103\uff8e" +
    "\104\uff8e\105\uff8e\001\002\000\042\051\075\073\063\075" +
    "\135\134\147\135\136\144\137\145\143\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\u01e7\001\002\000\066\076\ufee1\100\ufee1\102\ufee1\103\ufee1" +
    "\104\ufee1\121\ufee1\122\ufee1\123\ufee1\124\ufee1\125\ufee1\126" +
    "\ufee1\127\ufee1\130\ufee1\131\ufee1\132\ufee1\133\ufee1\134\ufee1" +
    "\135\ufee1\136\ufee1\137\ufee1\140\ufee1\141\ufee1\142\ufee1\143" +
    "\ufee1\150\ufee1\151\ufee1\001\002\000\032\105\u0225\106\u021f" +
    "\107\u0220\110\u022a\111\u0222\112\u0226\113\u0224\114\u0223\115" +
    "\u0229\116\u0221\117\u021e\120\u0228\001\002\000\060\076\ufece" +
    "\100\ufece\102\ufece\103\ufece\104\ufece\121\ufece\122\ufece\123" +
    "\ufece\124\ufece\125\ufece\126\ufece\127\ufece\130\ufece\131\ufece" +
    "\132\ufece\133\ufece\134\u01ec\135\u01ed\140\ufece\141\ufece\142" +
    "\ufece\150\ufece\151\ufece\001\002\000\024\076\ufeba\100\ufeba" +
    "\102\ufeba\103\ufeba\104\ufeba\132\u020e\133\ufeba\150\ufeba\151" +
    "\ufeba\001\002\000\070\004\074\005\101\006\047\007\062" +
    "\010\107\011\105\012\055\013\052\014\111\023\053\026" +
    "\103\051\075\073\063\075\135\134\147\135\136\144\137" +
    "\145\143\146\130\147\151\154\116\155\046\156\114\157" +
    "\113\160\050\161\064\162\174\001\002\000\042\051\075" +
    "\073\063\075\135\134\147\135\136\144\137\145\143\146" +
    "\130\147\151\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\u01e7\001\002\000\042\051\075\073\063\075" +
    "\135\134\147\135\136\144\137\145\143\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\u01e7\001\002\000\036\076\ufec2\100\ufec2\102\ufec2\103\ufec2" +
    "\104\ufec2\123\u0202\126\u0201\132\ufec2\133\ufec2\140\ufec2\141" +
    "\ufec2\142\ufec2\150\ufec2\151\ufec2\001\002\000\030\076\ufebe" +
    "\100\ufebe\102\ufebe\103\ufebe\104\ufebe\132\ufebe\133\ufebe\141" +
    "\ufebe\142\u01fd\150\ufebe\151\ufebe\001\002\000\066\076\ufed8" +
    "\100\ufed8\102\ufed8\103\ufed8\104\ufed8\121\ufed8\122\ufed8\123" +
    "\ufed8\124\ufed8\125\ufed8\126\ufed8\127\ufed8\130\ufed8\131\ufed8" +
    "\132\ufed8\133\ufed8\134\ufed8\135\ufed8\136\ufed8\137\ufed8\140" +
    "\ufed8\141\ufed8\142\ufed8\143\ufed8\150\ufed8\151\ufed8\001\002" +
    "\000\042\051\075\073\063\075\135\134\147\135\136\144" +
    "\137\145\143\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\u01e7\001\002\000\016\076" +
    "\ufeb5\100\ufeb5\102\ufeb5\103\ufeb5\104\ufeb5\151\ufeb5\001\002" +
    "\000\076\076\ufee8\100\ufee8\102\ufee8\103\ufee8\104\ufee8\121" +
    "\ufee8\122\ufee8\123\ufee8\124\ufee8\125\ufee8\126\ufee8\127\ufee8" +
    "\130\ufee8\131\ufee8\132\ufee8\133\ufee8\134\ufee8\135\ufee8\136" +
    "\ufee8\137\ufee8\140\ufee8\141\ufee8\142\ufee8\143\ufee8\146\ufee8" +
    "\147\ufee8\150\ufee8\151\ufee8\152\326\153\u0112\001\002\000" +
    "\130\076\uff0a\100\uff0a\101\uff0a\102\uff0a\103\uff0a\104\uff0a" +
    "\105\ufea6\106\ufea6\107\ufea6\110\ufea6\111\ufea6\112\ufea6\113" +
    "\ufea6\114\ufea6\115\ufea6\116\ufea6\117\ufea6\120\ufea6\121\uff0a" +
    "\122\uff0a\123\uff0a\124\uff0a\125\uff0a\126\uff0a\127\uff0a\130" +
    "\uff0a\131\uff0a\132\uff0a\133\uff0a\134\uff0a\135\uff0a\136\uff0a" +
    "\137\uff0a\140\uff0a\141\uff0a\142\uff0a\143\uff0a\146\uff0a\147" +
    "\uff0a\150\uff0a\151\uff0a\152\uff0a\153\uff0a\001\002\000\042" +
    "\051\075\073\063\075\135\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\u01e7\001\002\000\010\100\uff8c\103" +
    "\uff8c\104\uff8c\001\002\000\042\051\075\073\063\075\135" +
    "\134\147\135\136\144\137\145\143\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\u01e7" +
    "\001\002\000\066\076\ufed5\100\ufed5\102\ufed5\103\ufed5\104" +
    "\ufed5\121\ufed5\122\ufed5\123\ufed5\124\ufed5\125\ufed5\126\ufed5" +
    "\127\ufed5\130\ufed5\131\ufed5\132\ufed5\133\ufed5\134\ufed5\135" +
    "\ufed5\136\ufed5\137\ufed5\140\ufed5\141\ufed5\142\ufed5\143\ufed5" +
    "\150\ufed5\151\ufed5\001\002\000\006\103\uff95\104\uff95\001" +
    "\002\000\010\100\uff8d\103\uff8d\104\uff8d\001\002\000\016" +
    "\076\ufeb6\100\ufeb6\102\ufeb6\103\ufeb6\104\ufeb6\151\ufeb6\001" +
    "\002\000\072\076\ufedb\100\ufedb\102\ufedb\103\ufedb\104\ufedb" +
    "\121\ufedb\122\ufedb\123\ufedb\124\ufedb\125\ufedb\126\ufedb\127" +
    "\ufedb\130\ufedb\131\ufedb\132\ufedb\133\ufedb\134\ufedb\135\ufedb" +
    "\136\ufedb\137\ufedb\140\ufedb\141\ufedb\142\ufedb\143\ufedb\146" +
    "\u01d5\147\u01d4\150\ufedb\151\ufedb\001\002\000\072\076\ufee7" +
    "\100\ufee7\102\ufee7\103\ufee7\104\ufee7\121\ufee7\122\ufee7\123" +
    "\ufee7\124\ufee7\125\ufee7\126\ufee7\127\ufee7\130\ufee7\131\ufee7" +
    "\132\ufee7\133\ufee7\134\ufee7\135\ufee7\136\ufee7\137\ufee7\140" +
    "\ufee7\141\ufee7\142\ufee7\143\ufee7\146\ufee7\147\ufee7\150\ufee7" +
    "\151\ufee7\001\002\000\066\076\ufede\100\ufede\102\ufede\103" +
    "\ufede\104\ufede\121\ufede\122\ufede\123\ufede\124\ufede\125\ufede" +
    "\126\ufede\127\ufede\130\ufede\131\ufede\132\ufede\133\ufede\134" +
    "\ufede\135\ufede\136\ufede\137\ufede\140\ufede\141\ufede\142\ufede" +
    "\143\ufede\150\ufede\151\ufede\001\002\000\054\076\ufeca\100" +
    "\ufeca\102\ufeca\103\ufeca\104\ufeca\121\ufeca\122\ufeca\123\ufeca" +
    "\124\ufeca\125\ufeca\126\ufeca\127\u01e8\130\u01e9\131\u01ea\132" +
    "\ufeca\133\ufeca\140\ufeca\141\ufeca\142\ufeca\150\ufeca\151\ufeca" +
    "\001\002\000\022\076\ufeb8\100\ufeb8\102\ufeb8\103\ufeb8\104" +
    "\ufeb8\133\u020c\150\u020b\151\ufeb8\001\002\000\032\076\ufec0" +
    "\100\ufec0\102\ufec0\103\ufec0\104\ufec0\132\ufec0\133\ufec0\140" +
    "\u01ff\141\ufec0\142\ufec0\150\ufec0\151\ufec0\001\002\000\046" +
    "\051\075\073\063\075\135\077\164\100\uff89\134\147\135" +
    "\136\144\137\145\143\146\130\147\151\154\116\155\046" +
    "\156\114\157\113\160\050\161\064\162\174\001\002\000" +
    "\066\076\ufee2\100\ufee2\102\ufee2\103\ufee2\104\ufee2\121\ufee2" +
    "\122\ufee2\123\ufee2\124\ufee2\125\ufee2\126\ufee2\127\ufee2\130" +
    "\ufee2\131\ufee2\132\ufee2\133\ufee2\134\ufee2\135\ufee2\136\ufee2" +
    "\137\ufee2\140\ufee2\141\ufee2\142\ufee2\143\ufee2\150\ufee2\151" +
    "\ufee2\001\002\000\026\076\ufebc\100\ufebc\102\ufebc\103\ufebc" +
    "\104\ufebc\132\ufebc\133\ufebc\141\u01fb\150\ufebc\151\ufebc\001" +
    "\002\000\016\076\ufea2\100\ufea2\102\ufea2\103\ufea2\104\ufea2" +
    "\151\ufea2\001\002\000\066\076\ufed1\100\ufed1\102\ufed1\103" +
    "\ufed1\104\ufed1\121\ufed1\122\ufed1\123\ufed1\124\ufed1\125\ufed1" +
    "\126\ufed1\127\ufed1\130\ufed1\131\ufed1\132\ufed1\133\ufed1\134" +
    "\ufed1\135\ufed1\136\u01f0\137\u01f1\140\ufed1\141\ufed1\142\ufed1" +
    "\143\u01ef\150\ufed1\151\ufed1\001\002\000\046\076\ufec5\100" +
    "\ufec5\102\ufec5\103\ufec5\104\ufec5\121\u01e4\122\u01e2\123\ufec5" +
    "\124\u01e5\125\u01e3\126\ufec5\132\ufec5\133\ufec5\140\ufec5\141" +
    "\ufec5\142\ufec5\150\ufec5\151\ufec5\001\002\000\130\076\uff08" +
    "\100\uff08\101\uff08\102\uff08\103\uff08\104\uff08\105\ufea5\106" +
    "\ufea5\107\ufea5\110\ufea5\111\ufea5\112\ufea5\113\ufea5\114\ufea5" +
    "\115\ufea5\116\ufea5\117\ufea5\120\ufea5\121\uff08\122\uff08\123" +
    "\uff08\124\uff08\125\uff08\126\uff08\127\uff08\130\uff08\131\uff08" +
    "\132\uff08\133\uff08\134\uff08\135\uff08\136\uff08\137\uff08\140" +
    "\uff08\141\uff08\142\uff08\143\uff08\146\uff08\147\uff08\150\uff08" +
    "\151\uff08\152\uff08\153\uff08\001\002\000\072\076\ufee6\100" +
    "\ufee6\102\ufee6\103\ufee6\104\ufee6\121\ufee6\122\ufee6\123\ufee6" +
    "\124\ufee6\125\ufee6\126\ufee6\127\ufee6\130\ufee6\131\ufee6\132" +
    "\ufee6\133\ufee6\134\ufee6\135\ufee6\136\ufee6\137\ufee6\140\ufee6" +
    "\141\ufee6\142\ufee6\143\ufee6\146\ufee6\147\ufee6\150\ufee6\151" +
    "\ufee6\001\002\000\132\075\177\076\ufee5\100\ufee5\101\176" +
    "\102\ufee5\103\ufee5\104\ufee5\105\ufea7\106\ufea7\107\ufea7\110" +
    "\ufea7\111\ufea7\112\ufea7\113\ufea7\114\ufea7\115\ufea7\116\ufea7" +
    "\117\ufea7\120\ufea7\121\ufee5\122\ufee5\123\ufee5\124\ufee5\125" +
    "\ufee5\126\ufee5\127\ufee5\130\ufee5\131\ufee5\132\ufee5\133\ufee5" +
    "\134\ufee5\135\ufee5\136\ufee5\137\ufee5\140\ufee5\141\ufee5\142" +
    "\ufee5\143\ufee5\146\ufee5\147\ufee5\150\ufee5\151\ufee5\152\175" +
    "\153\200\001\002\000\004\162\u01e1\001\002\000\042\051" +
    "\075\073\063\075\135\134\147\135\136\144\137\145\143" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\174\001\002\000\044\051\075\073\063" +
    "\075\135\076\ufeeb\134\147\135\136\144\137\145\143\146" +
    "\130\147\151\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\174\001\002\000\010\017\201\020\202\162" +
    "\203\001\002\000\100\075\213\076\ufef9\100\ufef9\102\ufef9" +
    "\103\ufef9\104\ufef9\121\ufef9\122\ufef9\123\ufef9\124\ufef9\125" +
    "\ufef9\126\ufef9\127\ufef9\130\ufef9\131\ufef9\132\ufef9\133\ufef9" +
    "\134\ufef9\135\ufef9\136\ufef9\137\ufef9\140\ufef9\141\ufef9\142" +
    "\ufef9\143\ufef9\146\ufef9\147\ufef9\150\ufef9\151\ufef9\152\ufef9" +
    "\153\ufef9\001\002\000\076\076\ufef8\100\ufef8\102\ufef8\103" +
    "\ufef8\104\ufef8\121\ufef8\122\ufef8\123\ufef8\124\ufef8\125\ufef8" +
    "\126\ufef8\127\ufef8\130\ufef8\131\ufef8\132\ufef8\133\ufef8\134" +
    "\ufef8\135\ufef8\136\ufef8\137\ufef8\140\ufef8\141\ufef8\142\ufef8" +
    "\143\ufef8\146\ufef8\147\ufef8\150\ufef8\151\ufef8\152\ufef8\153" +
    "\ufef8\001\002\000\132\075\204\076\ufef4\100\ufef4\101\ufef4" +
    "\102\ufef4\103\ufef4\104\ufef4\105\ufef4\106\ufef4\107\ufef4\110" +
    "\ufef4\111\ufef4\112\ufef4\113\ufef4\114\ufef4\115\ufef4\116\ufef4" +
    "\117\ufef4\120\ufef4\121\ufef4\122\ufef4\123\ufef4\124\ufef4\125" +
    "\ufef4\126\ufef4\127\ufef4\130\ufef4\131\ufef4\132\ufef4\133\ufef4" +
    "\134\ufef4\135\ufef4\136\ufef4\137\ufef4\140\ufef4\141\ufef4\142" +
    "\ufef4\143\ufef4\146\ufef4\147\ufef4\150\ufef4\151\ufef4\152\ufef4" +
    "\153\ufef4\001\002\000\044\051\075\073\063\075\135\076" +
    "\ufeeb\134\147\135\136\144\137\145\143\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\174\001\002\000\004\076\212\001\002\000\010\076\ufeea" +
    "\100\ufeea\104\ufeea\001\002\000\010\076\ufeec\100\ufeec\104" +
    "\210\001\002\000\042\051\075\073\063\075\135\134\147" +
    "\135\136\144\137\145\143\146\130\147\151\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\174\001\002" +
    "\000\010\076\ufee9\100\ufee9\104\ufee9\001\002\000\100\076" +
    "\ufeed\100\ufeed\101\ufeed\102\ufeed\103\ufeed\104\ufeed\121\ufeed" +
    "\122\ufeed\123\ufeed\124\ufeed\125\ufeed\126\ufeed\127\ufeed\130" +
    "\ufeed\131\ufeed\132\ufeed\133\ufeed\134\ufeed\135\ufeed\136\ufeed" +
    "\137\ufeed\140\ufeed\141\ufeed\142\ufeed\143\ufeed\146\ufeed\147" +
    "\ufeed\150\ufeed\151\ufeed\152\ufeed\153\ufeed\001\002\000\006" +
    "\076\uff85\077\214\001\002\000\136\004\074\005\101\006" +
    "\047\007\062\010\107\011\105\012\055\013\052\014\111" +
    "\016\054\021\051\022\224\023\053\024\240\026\103\030" +
    "\256\031\236\032\300\034\257\035\247\036\254\040\255" +
    "\042\262\043\277\044\260\045\276\046\250\047\301\050" +
    "\230\051\075\053\272\071\227\073\063\075\056\077\214" +
    "\100\uff82\103\264\146\130\147\151\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\222\001\002\000\004" +
    "\076\217\001\002\000\004\076\uff86\001\002\000\076\076" +
    "\ufef6\100\ufef6\102\ufef6\103\ufef6\104\ufef6\121\ufef6\122\ufef6" +
    "\123\ufef6\124\ufef6\125\ufef6\126\ufef6\127\ufef6\130\ufef6\131" +
    "\ufef6\132\ufef6\133\ufef6\134\ufef6\135\ufef6\136\ufef6\137\ufef6" +
    "\140\ufef6\141\ufef6\142\ufef6\143\ufef6\146\ufef6\147\ufef6\150" +
    "\ufef6\151\ufef6\152\ufef6\153\ufef6\001\002\000\136\004\074" +
    "\005\101\006\047\007\062\010\107\011\105\012\055\013" +
    "\052\014\111\016\054\021\051\022\224\023\053\024\240" +
    "\026\103\030\256\031\236\032\300\034\257\035\247\036" +
    "\254\040\255\042\262\043\277\044\260\045\276\046\250" +
    "\047\301\050\230\051\075\053\272\071\227\073\063\075" +
    "\056\077\214\100\uff83\103\264\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\222\001" +
    "\002\000\142\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73" +
    "\011\uff73\012\uff73\013\uff73\014\uff73\016\uff73\021\uff73\022" +
    "\uff73\023\uff73\024\uff73\026\uff73\030\uff73\031\uff73\032\uff73" +
    "\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042" +
    "\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73" +
    "\051\uff73\053\uff73\071\uff73\073\uff73\075\uff73\077\uff73\100" +
    "\uff73\103\uff73\146\uff73\147\uff73\154\uff73\155\uff73\156\uff73" +
    "\157\uff73\160\uff73\161\uff73\162\uff73\001\002\000\052\075" +
    "\177\101\u0133\105\ufea7\106\ufea7\107\ufea7\110\ufea7\111\ufea7" +
    "\112\ufea7\113\ufea7\114\ufea7\115\ufea7\116\ufea7\117\ufea7\120" +
    "\ufea7\146\ufee5\147\ufee5\151\373\152\u0132\153\374\162\uffc1" +
    "\001\002\000\142\004\uff80\005\uff80\006\uff80\007\uff80\010" +
    "\uff80\011\uff80\012\uff80\013\uff80\014\uff80\016\uff80\021\uff80" +
    "\022\uff80\023\uff80\024\uff80\026\uff80\030\uff80\031\uff80\032" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\053\uff80\071\uff80\073\uff80\075\uff80\077\uff80" +
    "\100\uff80\103\uff80\146\uff80\147\uff80\154\uff80\155\uff80\156" +
    "\uff80\157\uff80\160\uff80\161\uff80\162\uff80\001\002\000\004" +
    "\075\u01dc\001\002\000\144\004\uff66\005\uff66\006\uff66\007" +
    "\uff66\010\uff66\011\uff66\012\uff66\013\uff66\014\uff66\016\uff66" +
    "\021\uff66\022\uff66\023\uff66\024\uff66\026\uff66\030\uff66\031" +
    "\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66\037\uff66" +
    "\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046" +
    "\uff66\047\uff66\050\uff66\051\uff66\053\uff66\071\uff66\073\uff66" +
    "\075\uff66\077\uff66\100\uff66\103\uff66\146\uff66\147\uff66\154" +
    "\uff66\155\uff66\156\uff66\157\uff66\160\uff66\161\uff66\162\uff66" +
    "\001\002\000\144\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010" +
    "\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\016\uff5f\021\uff5f" +
    "\022\uff5f\023\uff5f\024\uff5f\026\uff5f\030\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f" +
    "\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047" +
    "\uff5f\050\uff5f\051\uff5f\053\uff5f\071\uff5f\073\uff5f\075\uff5f" +
    "\077\uff5f\100\uff5f\103\uff5f\146\uff5f\147\uff5f\154\uff5f\155" +
    "\uff5f\156\uff5f\157\uff5f\160\uff5f\161\uff5f\162\uff5f\001\002" +
    "\000\060\004\074\005\101\006\047\007\062\010\107\011" +
    "\105\012\055\013\052\014\111\016\054\021\051\023\053" +
    "\026\103\051\075\073\063\075\056\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\117\001\002\000\004" +
    "\077\u01d7\001\002\000\004\103\u01d6\001\002\000\144\004" +
    "\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b" +
    "\013\uff6b\014\uff6b\016\uff6b\021\uff6b\022\uff6b\023\uff6b\024" +
    "\uff6b\026\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b" +
    "\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043" +
    "\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b" +
    "\053\uff6b\071\uff6b\073\uff6b\075\uff6b\077\uff6b\100\uff6b\103" +
    "\uff6b\146\uff6b\147\uff6b\154\uff6b\155\uff6b\156\uff6b\157\uff6b" +
    "\160\uff6b\161\uff6b\162\uff6b\001\002\000\010\076\uff35\103" +
    "\uff35\104\uff35\001\002\000\006\146\u01d5\147\u01d4\001\002" +
    "\000\144\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64\011" +
    "\uff64\012\uff64\013\uff64\014\uff64\016\uff64\021\uff64\022\uff64" +
    "\023\uff64\024\uff64\026\uff64\030\uff64\031\uff64\032\uff64\033" +
    "\uff64\034\uff64\035\uff64\036\uff64\037\uff64\040\uff64\041\uff64" +
    "\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64\047\uff64\050" +
    "\uff64\051\uff64\053\uff64\071\uff64\073\uff64\075\uff64\077\uff64" +
    "\100\uff64\103\uff64\146\uff64\147\uff64\154\uff64\155\uff64\156" +
    "\uff64\157\uff64\160\uff64\161\uff64\162\uff64\001\002\000\004" +
    "\103\u01d3\001\002\000\144\004\uff62\005\uff62\006\uff62\007" +
    "\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\016\uff62" +
    "\021\uff62\022\uff62\023\uff62\024\uff62\026\uff62\030\uff62\031" +
    "\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62" +
    "\040\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046" +
    "\uff62\047\uff62\050\uff62\051\uff62\053\uff62\071\uff62\073\uff62" +
    "\075\uff62\077\uff62\100\uff62\103\uff62\146\uff62\147\uff62\154" +
    "\uff62\155\uff62\156\uff62\157\uff62\160\uff62\161\uff62\162\uff62" +
    "\001\002\000\026\051\075\073\063\075\056\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\u010f\001\002" +
    "\000\014\076\uff33\103\uff33\104\uff33\146\ufee6\147\ufee6\001" +
    "\002\000\004\103\u01d0\001\002\000\144\004\uff69\005\uff69" +
    "\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014" +
    "\uff69\016\uff69\021\uff69\022\uff69\023\uff69\024\uff69\026\uff69" +
    "\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036" +
    "\uff69\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69" +
    "\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\053\uff69\071" +
    "\uff69\073\uff69\075\uff69\077\uff69\100\uff69\103\uff69\146\uff69" +
    "\147\uff69\154\uff69\155\uff69\156\uff69\157\uff69\160\uff69\161" +
    "\uff69\162\uff69\001\002\000\144\004\uff60\005\uff60\006\uff60" +
    "\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60\014\uff60\016" +
    "\uff60\021\uff60\022\uff60\023\uff60\024\uff60\026\uff60\030\uff60" +
    "\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60\037" +
    "\uff60\040\uff60\041\uff60\042\uff60\043\uff60\044\uff60\045\uff60" +
    "\046\uff60\047\uff60\050\uff60\051\uff60\053\uff60\071\uff60\073" +
    "\uff60\075\uff60\077\uff60\100\uff60\103\uff60\146\uff60\147\uff60" +
    "\154\uff60\155\uff60\156\uff60\157\uff60\160\uff60\161\uff60\162" +
    "\uff60\001\002\000\144\004\uff5e\005\uff5e\006\uff5e\007\uff5e" +
    "\010\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\016\uff5e\021" +
    "\uff5e\022\uff5e\023\uff5e\024\uff5e\026\uff5e\030\uff5e\031\uff5e" +
    "\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040" +
    "\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e" +
    "\047\uff5e\050\uff5e\051\uff5e\053\uff5e\071\uff5e\073\uff5e\075" +
    "\uff5e\077\uff5e\100\uff5e\103\uff5e\146\uff5e\147\uff5e\154\uff5e" +
    "\155\uff5e\156\uff5e\157\uff5e\160\uff5e\161\uff5e\162\uff5e\001" +
    "\002\000\142\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\014\uff76\016\uff76\021\uff76\022" +
    "\uff76\023\uff76\024\uff76\026\uff76\030\uff76\031\uff76\032\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76" +
    "\051\uff76\053\uff76\071\uff76\073\uff76\075\uff76\077\uff76\100" +
    "\uff76\103\uff76\146\uff76\147\uff76\154\uff76\155\uff76\156\uff76" +
    "\157\uff76\160\uff76\161\uff76\162\uff76\001\002\000\004\075" +
    "\u01cd\001\002\000\010\025\u0152\034\u01c1\077\214\001\002" +
    "\000\004\162\122\001\002\000\144\004\uff6a\005\uff6a\006" +
    "\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a" +
    "\016\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\026\uff6a\030" +
    "\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a" +
    "\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045" +
    "\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\053\uff6a\071\uff6a" +
    "\073\uff6a\075\uff6a\077\uff6a\100\uff6a\103\uff6a\146\uff6a\147" +
    "\uff6a\154\uff6a\155\uff6a\156\uff6a\157\uff6a\160\uff6a\161\uff6a" +
    "\162\uff6a\001\002\000\142\004\uff77\005\uff77\006\uff77\007" +
    "\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\016\uff77" +
    "\021\uff77\022\uff77\023\uff77\024\uff77\026\uff77\030\uff77\031" +
    "\uff77\032\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77" +
    "\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\047" +
    "\uff77\050\uff77\051\uff77\053\uff77\071\uff77\073\uff77\075\uff77" +
    "\077\uff77\100\uff77\103\uff77\146\uff77\147\uff77\154\uff77\155" +
    "\uff77\156\uff77\157\uff77\160\uff77\161\uff77\162\uff77\001\002" +
    "\000\004\075\u01a5\001\002\000\100\022\224\024\240\030" +
    "\256\031\236\032\300\034\257\035\247\036\254\040\255" +
    "\042\262\043\277\044\260\045\276\046\250\047\301\050" +
    "\230\051\075\053\272\073\063\075\056\077\214\103\264" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\356\001\002\000\004\103\u019f\001\002" +
    "\000\004\075\u0198\001\002\000\044\051\075\073\063\075" +
    "\135\103\ufea3\134\147\135\136\144\137\145\143\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\174\001\002\000\144\004\uff63\005\uff63\006\uff63" +
    "\007\uff63\010\uff63\011\uff63\012\uff63\013\uff63\014\uff63\016" +
    "\uff63\021\uff63\022\uff63\023\uff63\024\uff63\026\uff63\030\uff63" +
    "\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036\uff63\037" +
    "\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63" +
    "\046\uff63\047\uff63\050\uff63\051\uff63\053\uff63\071\uff63\073" +
    "\uff63\075\uff63\077\uff63\100\uff63\103\uff63\146\uff63\147\uff63" +
    "\154\uff63\155\uff63\156\uff63\157\uff63\160\uff63\161\uff63\162" +
    "\uff63\001\002\000\006\103\uff2b\162\u0182\001\002\000\144" +
    "\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\012" +
    "\uff5d\013\uff5d\014\uff5d\016\uff5d\021\uff5d\022\uff5d\023\uff5d" +
    "\024\uff5d\026\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034" +
    "\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d" +
    "\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051" +
    "\uff5d\053\uff5d\071\uff5d\073\uff5d\075\uff5d\077\uff5d\100\uff5d" +
    "\103\uff5d\146\uff5d\147\uff5d\154\uff5d\155\uff5d\156\uff5d\157" +
    "\uff5d\160\uff5d\161\uff5d\162\uff5d\001\002\000\144\004\uff3d" +
    "\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\013" +
    "\uff3d\014\uff3d\016\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d" +
    "\026\uff3d\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035" +
    "\uff3d\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d" +
    "\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\053" +
    "\uff3d\071\uff3d\073\uff3d\075\uff3d\077\uff3d\100\uff3d\103\uff3d" +
    "\146\uff3d\147\uff3d\154\uff3d\155\uff3d\156\uff3d\157\uff3d\160" +
    "\uff3d\161\uff3d\162\uff3d\001\002\000\010\076\uff37\103\uff37" +
    "\104\uff37\001\002\000\004\100\u0193\001\002\000\142\004" +
    "\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74" +
    "\013\uff74\014\uff74\016\uff74\021\uff74\022\uff74\023\uff74\024" +
    "\uff74\026\uff74\030\uff74\031\uff74\032\uff74\034\uff74\035\uff74" +
    "\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\053\uff74" +
    "\071\uff74\073\uff74\075\uff74\077\uff74\100\uff74\103\uff74\146" +
    "\uff74\147\uff74\154\uff74\155\uff74\156\uff74\157\uff74\160\uff74" +
    "\161\uff74\162\uff74\001\002\000\022\076\uff32\101\uff09\103" +
    "\uff32\104\uff32\146\uff09\147\uff09\152\uff09\153\uff09\001\002" +
    "\000\012\146\ufee8\147\ufee8\152\u014e\153\361\001\002\000" +
    "\004\052\u0185\001\002\000\144\004\uff61\005\uff61\006\uff61" +
    "\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61\014\uff61\016" +
    "\uff61\021\uff61\022\uff61\023\uff61\024\uff61\026\uff61\030\uff61" +
    "\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\037" +
    "\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61" +
    "\046\uff61\047\uff61\050\uff61\051\uff61\053\uff61\071\uff61\073" +
    "\uff61\075\uff61\077\uff61\100\uff61\103\uff61\146\uff61\147\uff61" +
    "\154\uff61\155\uff61\156\uff61\157\uff61\160\uff61\161\uff61\162" +
    "\uff61\001\002\000\142\004\uff71\005\uff71\006\uff71\007\uff71" +
    "\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71\016\uff71\021" +
    "\uff71\022\uff71\023\uff71\024\uff71\026\uff71\030\uff71\031\uff71" +
    "\032\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041" +
    "\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71" +
    "\050\uff71\051\uff71\053\uff71\071\uff71\073\uff71\075\uff71\077" +
    "\uff71\100\uff71\103\uff71\146\uff71\147\uff71\154\uff71\155\uff71" +
    "\156\uff71\157\uff71\160\uff71\161\uff71\162\uff71\001\002\000" +
    "\142\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75" +
    "\012\uff75\013\uff75\014\uff75\016\uff75\021\uff75\022\uff75\023" +
    "\uff75\024\uff75\026\uff75\030\uff75\031\uff75\032\uff75\034\uff75" +
    "\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75" +
    "\053\uff75\071\uff75\073\uff75\075\uff75\077\uff75\100\uff75\103" +
    "\uff75\146\uff75\147\uff75\154\uff75\155\uff75\156\uff75\157\uff75" +
    "\160\uff75\161\uff75\162\uff75\001\002\000\004\077\214\001" +
    "\002\000\006\103\uff2b\162\u0182\001\002\000\004\075\u0113" +
    "\001\002\000\004\050\311\001\002\000\144\004\uff67\005" +
    "\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67" +
    "\014\uff67\016\uff67\021\uff67\022\uff67\023\uff67\024\uff67\026" +
    "\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67" +
    "\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044" +
    "\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\053\uff67" +
    "\071\uff67\073\uff67\075\uff67\077\uff67\100\uff67\103\uff67\146" +
    "\uff67\147\uff67\154\uff67\155\uff67\156\uff67\157\uff67\160\uff67" +
    "\161\uff67\162\uff67\001\002\000\010\076\uff36\103\uff36\104" +
    "\uff36\001\002\000\142\004\uff72\005\uff72\006\uff72\007\uff72" +
    "\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72\016\uff72\021" +
    "\uff72\022\uff72\023\uff72\024\uff72\026\uff72\030\uff72\031\uff72" +
    "\032\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041" +
    "\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72" +
    "\050\uff72\051\uff72\053\uff72\071\uff72\073\uff72\075\uff72\077" +
    "\uff72\100\uff72\103\uff72\146\uff72\147\uff72\154\uff72\155\uff72" +
    "\156\uff72\157\uff72\160\uff72\161\uff72\162\uff72\001\002\000" +
    "\142\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\016\uff7a\021\uff7a\022\uff7a\023" +
    "\uff7a\024\uff7a\026\uff7a\030\uff7a\031\uff7a\032\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\053\uff7a\071\uff7a\073\uff7a\075\uff7a\077\uff7a\100\uff7a\103" +
    "\uff7a\146\uff7a\147\uff7a\154\uff7a\155\uff7a\156\uff7a\157\uff7a" +
    "\160\uff7a\161\uff7a\162\uff7a\001\002\000\014\076\uff34\103" +
    "\uff34\104\uff34\146\ufee7\147\ufee7\001\002\000\144\004\uff68" +
    "\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68\013" +
    "\uff68\014\uff68\016\uff68\021\uff68\022\uff68\023\uff68\024\uff68" +
    "\026\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035" +
    "\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68" +
    "\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\053" +
    "\uff68\071\uff68\073\uff68\075\uff68\077\uff68\100\uff68\103\uff68" +
    "\146\uff68\147\uff68\154\uff68\155\uff68\156\uff68\157\uff68\160" +
    "\uff68\161\uff68\162\uff68\001\002\000\144\004\uff5a\005\uff5a" +
    "\006\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014" +
    "\uff5a\016\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\026\uff5a" +
    "\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036" +
    "\uff5a\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a" +
    "\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\053\uff5a\071" +
    "\uff5a\073\uff5a\075\uff5a\077\uff5a\100\uff5a\103\uff5a\146\uff5a" +
    "\147\uff5a\154\uff5a\155\uff5a\156\uff5a\157\uff5a\160\uff5a\161" +
    "\uff5a\162\uff5a\001\002\000\004\077\312\001\002\000\030" +
    "\030\323\051\075\073\063\075\316\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\314\001\002\000\004" +
    "\105\u010e\001\002\000\014\075\177\101\176\105\ufea7\152" +
    "\175\153\u010d\001\002\000\004\151\u010b\001\002\000\042" +
    "\051\075\073\063\075\135\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\174\001\002\000\006\152\326\153" +
    "\327\001\002\000\004\151\uff14\001\002\000\032\030\uff19" +
    "\051\uff19\073\uff19\075\uff19\100\uff19\154\uff19\155\uff19\156" +
    "\uff19\157\uff19\160\uff19\161\uff19\162\uff19\001\002\000\032" +
    "\030\323\051\075\073\063\075\316\100\324\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\314\001\002" +
    "\000\004\151\uff15\001\002\000\144\004\uff1c\005\uff1c\006" +
    "\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013\uff1c\014\uff1c" +
    "\016\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c\026\uff1c\030" +
    "\uff1c\031\uff1c\032\uff1c\033\uff1c\034\uff1c\035\uff1c\036\uff1c" +
    "\037\uff1c\040\uff1c\041\uff1c\042\uff1c\043\uff1c\044\uff1c\045" +
    "\uff1c\046\uff1c\047\uff1c\050\uff1c\051\uff1c\053\uff1c\071\uff1c" +
    "\073\uff1c\075\uff1c\077\uff1c\100\uff1c\103\uff1c\146\uff1c\147" +
    "\uff1c\154\uff1c\155\uff1c\156\uff1c\157\uff1c\160\uff1c\161\uff1c" +
    "\162\uff1c\001\002\000\032\030\uff1a\051\uff1a\073\uff1a\075" +
    "\uff1a\100\uff1a\154\uff1a\155\uff1a\156\uff1a\157\uff1a\160\uff1a" +
    "\161\uff1a\162\uff1a\001\002\000\004\162\345\001\002\000" +
    "\012\017\330\020\332\027\331\162\333\001\002\000\100" +
    "\075\342\076\ufefb\100\ufefb\102\ufefb\103\ufefb\104\ufefb\121" +
    "\ufefb\122\ufefb\123\ufefb\124\ufefb\125\ufefb\126\ufefb\127\ufefb" +
    "\130\ufefb\131\ufefb\132\ufefb\133\ufefb\134\ufefb\135\ufefb\136" +
    "\ufefb\137\ufefb\140\ufefb\141\ufefb\142\ufefb\143\ufefb\146\ufefb" +
    "\147\ufefb\150\ufefb\151\ufefb\152\ufefb\153\ufefb\001\002\000" +
    "\004\075\337\001\002\000\076\076\ufefa\100\ufefa\102\ufefa" +
    "\103\ufefa\104\ufefa\121\ufefa\122\ufefa\123\ufefa\124\ufefa\125" +
    "\ufefa\126\ufefa\127\ufefa\130\ufefa\131\ufefa\132\ufefa\133\ufefa" +
    "\134\ufefa\135\ufefa\136\ufefa\137\ufefa\140\ufefa\141\ufefa\142" +
    "\ufefa\143\ufefa\146\ufefa\147\ufefa\150\ufefa\151\ufefa\152\ufefa" +
    "\153\ufefa\001\002\000\132\075\334\076\ufef5\100\ufef5\101" +
    "\ufef5\102\ufef5\103\ufef5\104\ufef5\105\ufef5\106\ufef5\107\ufef5" +
    "\110\ufef5\111\ufef5\112\ufef5\113\ufef5\114\ufef5\115\ufef5\116" +
    "\ufef5\117\ufef5\120\ufef5\121\ufef5\122\ufef5\123\ufef5\124\ufef5" +
    "\125\ufef5\126\ufef5\127\ufef5\130\ufef5\131\ufef5\132\ufef5\133" +
    "\ufef5\134\ufef5\135\ufef5\136\ufef5\137\ufef5\140\ufef5\141\ufef5" +
    "\142\ufef5\143\ufef5\146\ufef5\147\ufef5\150\ufef5\151\ufef5\152" +
    "\ufef5\153\ufef5\001\002\000\044\051\075\073\063\075\135" +
    "\076\ufeeb\134\147\135\136\144\137\145\143\146\130\147" +
    "\151\154\116\155\046\156\114\157\113\160\050\161\064" +
    "\162\174\001\002\000\004\076\336\001\002\000\100\076" +
    "\ufef0\100\ufef0\101\ufef0\102\ufef0\103\ufef0\104\ufef0\121\ufef0" +
    "\122\ufef0\123\ufef0\124\ufef0\125\ufef0\126\ufef0\127\ufef0\130" +
    "\ufef0\131\ufef0\132\ufef0\133\ufef0\134\ufef0\135\ufef0\136\ufef0" +
    "\137\ufef0\140\ufef0\141\ufef0\142\ufef0\143\ufef0\146\ufef0\147" +
    "\ufef0\150\ufef0\151\ufef0\152\ufef0\153\ufef0\001\002\000\042" +
    "\051\075\073\063\075\135\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\174\001\002\000\004\076\341\001" +
    "\002\000\146\004\uff3a\005\uff3a\006\uff3a\007\uff3a\010\uff3a" +
    "\011\uff3a\012\uff3a\013\uff3a\014\uff3a\016\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\026\uff3a\030\uff3a\031\uff3a\032\uff3a" +
    "\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041" +
    "\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a" +
    "\050\uff3a\051\uff3a\053\uff3a\071\uff3a\073\uff3a\075\uff3a\077" +
    "\uff3a\100\uff3a\103\uff3a\146\uff3a\147\uff3a\151\uff3a\154\uff3a" +
    "\155\uff3a\156\uff3a\157\uff3a\160\uff3a\161\uff3a\162\uff3a\001" +
    "\002\000\006\076\uff85\077\214\001\002\000\004\076\344" +
    "\001\002\000\076\076\ufef7\100\ufef7\102\ufef7\103\ufef7\104" +
    "\ufef7\121\ufef7\122\ufef7\123\ufef7\124\ufef7\125\ufef7\126\ufef7" +
    "\127\ufef7\130\ufef7\131\ufef7\132\ufef7\133\ufef7\134\ufef7\135" +
    "\ufef7\136\ufef7\137\ufef7\140\ufef7\141\ufef7\142\ufef7\143\ufef7" +
    "\146\ufef7\147\ufef7\150\ufef7\151\ufef7\152\ufef7\153\ufef7\001" +
    "\002\000\100\075\346\076\uff0e\100\uff0e\102\uff0e\103\uff0e" +
    "\104\uff0e\121\uff0e\122\uff0e\123\uff0e\124\uff0e\125\uff0e\126" +
    "\uff0e\127\uff0e\130\uff0e\131\uff0e\132\uff0e\133\uff0e\134\uff0e" +
    "\135\uff0e\136\uff0e\137\uff0e\140\uff0e\141\uff0e\142\uff0e\143" +
    "\uff0e\146\uff0e\147\uff0e\150\uff0e\151\uff0e\152\uff0e\153\uff0e" +
    "\001\002\000\044\051\075\073\063\075\135\076\ufeeb\134" +
    "\147\135\136\144\137\145\143\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\174\001" +
    "\002\000\004\076\350\001\002\000\100\076\ufeef\100\ufeef" +
    "\101\ufeef\102\ufeef\103\ufeef\104\ufeef\121\ufeef\122\ufeef\123" +
    "\ufeef\124\ufeef\125\ufeef\126\ufeef\127\ufeef\130\ufeef\131\ufeef" +
    "\132\ufeef\133\ufeef\134\ufeef\135\ufeef\136\ufeef\137\ufeef\140" +
    "\ufeef\141\ufeef\142\ufeef\143\ufeef\146\ufeef\147\ufeef\150\ufeef" +
    "\151\ufeef\152\ufeef\153\ufeef\001\002\000\004\076\352\001" +
    "\002\000\012\101\uff0b\132\353\152\uff0b\153\uff0b\001\002" +
    "\000\030\030\323\051\075\073\063\075\056\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\314\001\002" +
    "\000\004\151\355\001\002\000\100\022\224\024\240\030" +
    "\256\031\236\032\300\034\257\035\247\036\254\040\255" +
    "\042\262\043\277\044\260\045\276\046\250\047\301\050" +
    "\230\051\075\053\272\073\063\075\056\077\214\103\264" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\356\001\002\000\050\075\177\101\176" +
    "\105\ufea7\106\ufea7\107\ufea7\110\ufea7\111\ufea7\112\ufea7\113" +
    "\ufea7\114\ufea7\115\ufea7\116\ufea7\117\ufea7\120\ufea7\146\ufee5" +
    "\147\ufee5\151\373\152\175\153\374\001\002\000\012\146" +
    "\ufee8\147\ufee8\152\326\153\361\001\002\000\032\030\uff18" +
    "\051\uff18\073\uff18\075\uff18\100\uff18\154\uff18\155\uff18\156" +
    "\uff18\157\uff18\160\uff18\161\uff18\162\uff18\001\002\000\012" +
    "\017\362\020\363\027\331\162\333\001\002\000\014\075" +
    "\370\146\ufefb\147\ufefb\152\ufefb\153\ufefb\001\002\000\014" +
    "\075\364\146\ufefa\147\ufefa\152\ufefa\153\ufefa\001\002\000" +
    "\042\051\075\073\063\075\135\134\147\135\136\144\137" +
    "\145\143\146\130\147\151\154\116\155\046\156\114\157" +
    "\113\160\050\161\064\162\174\001\002\000\004\076\366" +
    "\001\002\000\004\103\367\001\002\000\144\004\uff5b\005" +
    "\uff5b\006\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b" +
    "\014\uff5b\016\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\026" +
    "\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b" +
    "\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044" +
    "\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b\053\uff5b" +
    "\071\uff5b\073\uff5b\075\uff5b\077\uff5b\100\uff5b\103\uff5b\146" +
    "\uff5b\147\uff5b\154\uff5b\155\uff5b\156\uff5b\157\uff5b\160\uff5b" +
    "\161\uff5b\162\uff5b\001\002\000\006\076\uff85\077\214\001" +
    "\002\000\004\076\372\001\002\000\020\076\uff31\103\uff31" +
    "\104\uff31\146\ufef7\147\ufef7\152\ufef7\153\ufef7\001\002\000" +
    "\100\022\224\024\240\030\256\031\236\032\300\034\257" +
    "\035\247\036\254\040\255\042\262\043\277\044\260\045" +
    "\276\046\250\047\301\050\230\051\075\053\272\073\063" +
    "\075\056\077\214\103\264\146\130\147\151\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\356\001\002" +
    "\000\012\017\375\020\377\027\376\162\203\001\002\000" +
    "\014\075\u0107\146\ufef9\147\ufef9\152\ufef9\153\ufef9\001\002" +
    "\000\004\075\u0104\001\002\000\014\075\u0100\146\ufef8\147" +
    "\ufef8\152\ufef8\153\ufef8\001\002\000\042\051\075\073\063" +
    "\075\135\134\147\135\136\144\137\145\143\146\130\147" +
    "\151\154\116\155\046\156\114\157\113\160\050\161\064" +
    "\162\174\001\002\000\004\076\u0102\001\002\000\004\103" +
    "\u0103\001\002\000\144\004\uff5c\005\uff5c\006\uff5c\007\uff5c" +
    "\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\016\uff5c\021" +
    "\uff5c\022\uff5c\023\uff5c\024\uff5c\026\uff5c\030\uff5c\031\uff5c" +
    "\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040" +
    "\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c" +
    "\047\uff5c\050\uff5c\051\uff5c\053\uff5c\071\uff5c\073\uff5c\075" +
    "\uff5c\077\uff5c\100\uff5c\103\uff5c\146\uff5c\147\uff5c\154\uff5c" +
    "\155\uff5c\156\uff5c\157\uff5c\160\uff5c\161\uff5c\162\uff5c\001" +
    "\002\000\042\051\075\073\063\075\135\134\147\135\136" +
    "\144\137\145\143\146\130\147\151\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\174\001\002\000\004" +
    "\076\u0106\001\002\000\146\004\uff3b\005\uff3b\006\uff3b\007" +
    "\uff3b\010\uff3b\011\uff3b\012\uff3b\013\uff3b\014\uff3b\016\uff3b" +
    "\021\uff3b\022\uff3b\023\uff3b\024\uff3b\026\uff3b\030\uff3b\031" +
    "\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b" +
    "\040\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046" +
    "\uff3b\047\uff3b\050\uff3b\051\uff3b\053\uff3b\071\uff3b\073\uff3b" +
    "\075\uff3b\077\uff3b\100\uff3b\103\uff3b\146\uff3b\147\uff3b\151" +
    "\uff3b\154\uff3b\155\uff3b\156\uff3b\157\uff3b\160\uff3b\161\uff3b" +
    "\162\uff3b\001\002\000\006\076\uff85\077\214\001\002\000" +
    "\004\076\u0109\001\002\000\020\076\uff30\103\uff30\104\uff30" +
    "\146\ufef6\147\ufef6\152\ufef6\153\ufef6\001\002\000\142\004" +
    "\uff2f\005\uff2f\006\uff2f\007\uff2f\010\uff2f\011\uff2f\012\uff2f" +
    "\013\uff2f\014\uff2f\016\uff2f\021\uff2f\022\uff2f\023\uff2f\024" +
    "\uff2f\026\uff2f\030\uff2f\031\uff2f\032\uff2f\034\uff2f\035\uff2f" +
    "\036\uff2f\037\uff2f\040\uff2f\041\uff2f\042\uff2f\043\uff2f\044" +
    "\uff2f\045\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\053\uff2f" +
    "\071\uff2f\073\uff2f\075\uff2f\077\uff2f\100\uff2f\103\uff2f\146" +
    "\uff2f\147\uff2f\154\uff2f\155\uff2f\156\uff2f\157\uff2f\160\uff2f" +
    "\161\uff2f\162\uff2f\001\002\000\100\022\224\024\240\030" +
    "\256\031\236\032\300\034\257\035\247\036\254\040\255" +
    "\042\262\043\277\044\260\045\276\046\250\047\301\050" +
    "\230\051\075\053\272\073\063\075\056\077\214\103\264" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\356\001\002\000\032\030\uff17\051\uff17" +
    "\073\uff17\075\uff17\100\uff17\154\uff17\155\uff17\156\uff17\157" +
    "\uff17\160\uff17\161\uff17\162\uff17\001\002\000\012\017\201" +
    "\020\202\027\376\162\203\001\002\000\026\051\075\073" +
    "\063\075\056\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\u010f\001\002\000\012\075\177\101\176\152" +
    "\175\153\200\001\002\000\010\151\uff16\152\uff10\153\uff10" +
    "\001\002\000\006\152\326\153\u0112\001\002\000\010\017" +
    "\330\020\332\162\333\001\002\000\042\051\075\073\063" +
    "\075\135\134\147\135\136\144\137\145\143\146\130\147" +
    "\151\154\116\155\046\156\114\157\113\160\050\161\064" +
    "\162\174\001\002\000\004\076\u0115\001\002\000\100\022" +
    "\u0116\024\240\030\256\031\236\032\u011f\034\u011c\035\u0119" +
    "\036\254\040\255\042\262\043\277\044\260\045\276\046" +
    "\u011a\047\301\050\230\051\075\053\272\073\063\075\056" +
    "\077\214\103\264\146\130\147\151\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\356\001\002\000\004" +
    "\075\u0170\001\002\000\004\033\uff6f\001\002\000\004\033" +
    "\uff6d\001\002\000\004\075\u016b\001\002\000\010\025\u0152" +
    "\034\u0153\077\214\001\002\000\144\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77" +
    "\016\uff77\021\uff77\022\uff77\023\uff77\024\uff77\026\uff77\030" +
    "\uff77\031\uff77\032\uff77\033\uff70\034\uff77\035\uff77\036\uff77" +
    "\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045" +
    "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\053\uff77\071\uff77" +
    "\073\uff77\075\uff77\077\uff77\100\uff77\103\uff77\146\uff77\147" +
    "\uff77\154\uff77\155\uff77\156\uff77\157\uff77\160\uff77\161\uff77" +
    "\162\uff77\001\002\000\004\075\u012a\001\002\000\004\033" +
    "\uff6e\001\002\000\004\033\u0129\001\002\000\004\075\u0122" +
    "\001\002\000\004\033\uff6c\001\002\000\142\004\uff59\005" +
    "\uff59\006\uff59\007\uff59\010\uff59\011\uff59\012\uff59\013\uff59" +
    "\014\uff59\016\uff59\021\uff59\022\uff59\023\uff59\024\uff59\026" +
    "\uff59\030\uff59\031\uff59\032\uff59\034\uff59\035\uff59\036\uff59" +
    "\037\uff59\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59\045" +
    "\uff59\046\uff59\047\uff59\050\uff59\051\uff59\053\uff59\071\uff59" +
    "\073\uff59\075\uff59\077\uff59\100\uff59\103\uff59\146\uff59\147" +
    "\uff59\154\uff59\155\uff59\156\uff59\157\uff59\160\uff59\161\uff59" +
    "\162\uff59\001\002\000\042\051\075\073\063\075\135\134" +
    "\147\135\136\144\137\145\143\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\174\001" +
    "\002\000\004\076\u0124\001\002\000\100\022\u0116\024\240" +
    "\030\256\031\236\032\u011f\034\u011c\035\u0119\036\254\040" +
    "\255\042\262\043\277\044\260\045\276\046\u011a\047\301" +
    "\050\230\051\075\053\272\073\063\075\056\077\214\103" +
    "\264\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\356\001\002\000\004\033\u0126\001" +
    "\002\000\100\022\u0116\024\240\030\256\031\236\032\u011f" +
    "\034\u011c\035\u0119\036\254\040\255\042\262\043\277\044" +
    "\260\045\276\046\u011a\047\301\050\230\051\075\053\272" +
    "\073\063\075\056\077\214\103\264\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\356" +
    "\001\002\000\004\033\uff57\001\002\000\142\004\uff58\005" +
    "\uff58\006\uff58\007\uff58\010\uff58\011\uff58\012\uff58\013\uff58" +
    "\014\uff58\016\uff58\021\uff58\022\uff58\023\uff58\024\uff58\026" +
    "\uff58\030\uff58\031\uff58\032\uff58\034\uff58\035\uff58\036\uff58" +
    "\037\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\045" +
    "\uff58\046\uff58\047\uff58\050\uff58\051\uff58\053\uff58\071\uff58" +
    "\073\uff58\075\uff58\077\uff58\100\uff58\103\uff58\146\uff58\147" +
    "\uff58\154\uff58\155\uff58\156\uff58\157\uff58\160\uff58\161\uff58" +
    "\162\uff58\001\002\000\100\022\224\024\240\030\256\031" +
    "\236\032\300\034\257\035\247\036\254\040\255\042\262" +
    "\043\277\044\260\045\276\046\250\047\301\050\230\051" +
    "\075\053\272\073\063\075\056\077\214\103\264\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\356\001\002\000\070\004\074\005\101\006\047" +
    "\007\062\010\107\011\105\012\055\013\052\014\111\016" +
    "\054\021\051\023\053\026\103\051\075\071\227\073\063" +
    "\075\056\103\uff4d\146\130\147\151\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\u0131\001\002\000\010" +
    "\076\uff47\103\uff47\104\uff47\001\002\000\004\103\uff4b\001" +
    "\002\000\012\146\ufee8\147\ufee8\152\u014e\153\u0143\001\002" +
    "\000\004\103\u0144\001\002\000\006\103\uff4c\104\u013f\001" +
    "\002\000\004\103\uff4e\001\002\000\050\075\177\101\u0133" +
    "\105\ufea7\106\ufea7\107\ufea7\110\ufea7\111\ufea7\112\ufea7\113" +
    "\ufea7\114\ufea7\115\ufea7\116\ufea7\117\ufea7\120\ufea7\146\ufee5" +
    "\147\ufee5\152\u0132\153\u0135\162\uffc1\001\002\000\004\162" +
    "\u013b\001\002\000\044\051\075\073\063\075\135\102\u0139" +
    "\134\147\135\136\144\137\145\143\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\174" +
    "\001\002\000\010\101\u0136\121\uffbc\162\uffbc\001\002\000" +
    "\010\017\375\020\202\162\203\001\002\000\004\102\u0137" +
    "\001\002\000\104\076\ufefe\077\ufefe\100\ufefe\101\ufefe\102" +
    "\ufefe\103\ufefe\104\ufefe\121\ufefe\122\ufefe\123\ufefe\124\ufefe" +
    "\125\ufefe\126\ufefe\127\ufefe\130\ufefe\131\ufefe\132\ufefe\133" +
    "\ufefe\134\ufefe\135\ufefe\136\ufefe\137\ufefe\140\ufefe\141\ufefe" +
    "\142\ufefe\143\ufefe\146\ufefe\147\ufefe\150\ufefe\151\ufefe\152" +
    "\ufefe\153\ufefe\162\ufefe\001\002\000\004\102\u013a\001\002" +
    "\000\104\076\ufefd\077\ufefd\100\ufefd\101\ufefd\102\ufefd\103" +
    "\ufefd\104\ufefd\121\ufefd\122\ufefd\123\ufefd\124\ufefd\125\ufefd" +
    "\126\ufefd\127\ufefd\130\ufefd\131\ufefd\132\ufefd\133\ufefd\134" +
    "\ufefd\135\ufefd\136\ufefd\137\ufefd\140\ufefd\141\ufefd\142\ufefd" +
    "\143\ufefd\146\ufefd\147\ufefd\150\ufefd\151\ufefd\152\ufefd\153" +
    "\ufefd\162\ufefd\001\002\000\130\076\ufef3\100\ufef3\101\ufef3" +
    "\102\ufef3\103\ufef3\104\ufef3\105\ufef3\106\ufef3\107\ufef3\110" +
    "\ufef3\111\ufef3\112\ufef3\113\ufef3\114\ufef3\115\ufef3\116\ufef3" +
    "\117\ufef3\120\ufef3\121\ufef3\122\ufef3\123\ufef3\124\ufef3\125" +
    "\ufef3\126\ufef3\127\ufef3\130\ufef3\131\ufef3\132\ufef3\133\ufef3" +
    "\134\ufef3\135\ufef3\136\ufef3\137\ufef3\140\ufef3\141\ufef3\142" +
    "\ufef3\143\ufef3\146\ufef3\147\ufef3\150\ufef3\151\ufef3\152\ufef3" +
    "\153\ufef3\001\002\000\020\075\u013c\121\uffbf\146\uff0d\147" +
    "\uff0d\152\uff0d\153\uff0d\162\uffbf\001\002\000\044\051\075" +
    "\073\063\075\135\076\ufeeb\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\174\001\002\000\004\076\u013e\001" +
    "\002\000\100\076\ufeee\100\ufeee\101\ufeee\102\ufeee\103\ufeee" +
    "\104\ufeee\121\ufeee\122\ufeee\123\ufeee\124\ufeee\125\ufeee\126" +
    "\ufeee\127\ufeee\130\ufeee\131\ufeee\132\ufeee\133\ufeee\134\ufeee" +
    "\135\ufeee\136\ufeee\137\ufeee\140\ufeee\141\ufeee\142\ufeee\143" +
    "\ufeee\146\ufeee\147\ufeee\150\ufeee\151\ufeee\152\ufeee\153\ufeee" +
    "\001\002\000\032\051\075\073\063\075\056\146\130\147" +
    "\151\154\116\155\046\156\114\157\113\160\050\161\064" +
    "\162\u0141\001\002\000\010\076\uff46\103\uff46\104\uff46\001" +
    "\002\000\046\075\177\101\176\105\ufea7\106\ufea7\107\ufea7" +
    "\110\ufea7\111\ufea7\112\ufea7\113\ufea7\114\ufea7\115\ufea7\116" +
    "\ufea7\117\ufea7\120\ufea7\146\ufee5\147\ufee5\152\175\153\u0135" +
    "\001\002\000\012\146\ufee8\147\ufee8\152\326\153\u0143\001" +
    "\002\000\010\017\362\020\332\162\333\001\002\000\044" +
    "\051\075\073\063\075\135\103\ufea3\134\147\135\136\144" +
    "\137\145\143\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\174\001\002\000\004\103" +
    "\ufea4\001\002\000\004\103\u0147\001\002\000\034\051\075" +
    "\073\063\075\056\076\uff49\146\130\147\151\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\u0141\001\002" +
    "\000\004\076\uff4a\001\002\000\004\076\u014b\001\002\000" +
    "\006\076\uff48\104\u013f\001\002\000\100\022\u0116\024\240" +
    "\030\256\031\236\032\u011f\034\u011c\035\u0119\036\254\040" +
    "\255\042\262\043\277\044\260\045\276\046\u011a\047\301" +
    "\050\230\051\075\053\272\073\063\075\056\077\214\103" +
    "\264\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\356\001\002\000\004\033\uff51\001" +
    "\002\000\142\004\uff54\005\uff54\006\uff54\007\uff54\010\uff54" +
    "\011\uff54\012\uff54\013\uff54\014\uff54\016\uff54\021\uff54\022" +
    "\uff54\023\uff54\024\uff54\026\uff54\030\uff54\031\uff54\032\uff54" +
    "\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54\042" +
    "\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050\uff54" +
    "\051\uff54\053\uff54\071\uff54\073\uff54\075\uff54\077\uff54\100" +
    "\uff54\103\uff54\146\uff54\147\uff54\154\uff54\155\uff54\156\uff54" +
    "\157\uff54\160\uff54\161\uff54\162\uff54\001\002\000\004\162" +
    "\u014f\001\002\000\022\075\346\101\u0150\121\uffc0\146\uff0e" +
    "\147\uff0e\152\uff0e\153\uff0e\162\uffc0\001\002\000\004\102" +
    "\u0139\001\002\000\010\101\u0136\121\uffbb\162\uffbb\001\002" +
    "\000\004\075\u0164\001\002\000\004\075\u0155\001\002\000" +
    "\144\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\012\uff7f\013\uff7f\014\uff7f\016\uff7f\021\uff7f\022\uff7f\023" +
    "\uff7f\024\uff7f\026\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f" +
    "\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042" +
    "\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f" +
    "\051\uff7f\053\uff7f\071\uff7f\073\uff7f\075\uff7f\077\uff7f\100" +
    "\uff7f\103\uff7f\146\uff7f\147\uff7f\154\uff7f\155\uff7f\156\uff7f" +
    "\157\uff7f\160\uff7f\161\uff7f\162\uff7f\001\002\000\070\004" +
    "\074\005\101\006\047\007\062\010\107\011\105\012\055" +
    "\013\052\014\111\016\054\021\051\023\053\026\103\051" +
    "\075\071\227\073\063\075\056\103\uff4d\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\u0131\001\002\000\004\103\u0157\001\002\000\044\051\075" +
    "\073\063\075\135\103\ufea3\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\174\001\002\000\004\103\u0159\001" +
    "\002\000\034\051\075\073\063\075\056\076\uff49\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\u0141\001\002\000\004\076\u015b\001\002\000\102" +
    "\022\u0116\024\240\025\u015c\030\256\031\236\032\u011f\034" +
    "\u011c\035\u0119\036\254\040\255\042\262\043\277\044\260" +
    "\045\276\046\u011a\047\301\050\230\051\075\053\272\073" +
    "\063\075\056\077\214\103\264\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\356\001" +
    "\002\000\004\075\u015f\001\002\000\004\033\uff4f\001\002" +
    "\000\142\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52\011" +
    "\uff52\012\uff52\013\uff52\014\uff52\016\uff52\021\uff52\022\uff52" +
    "\023\uff52\024\uff52\026\uff52\030\uff52\031\uff52\032\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051" +
    "\uff52\053\uff52\071\uff52\073\uff52\075\uff52\077\uff52\100\uff52" +
    "\103\uff52\146\uff52\147\uff52\154\uff52\155\uff52\156\uff52\157" +
    "\uff52\160\uff52\161\uff52\162\uff52\001\002\000\042\051\075" +
    "\073\063\075\135\134\147\135\136\144\137\145\143\146" +
    "\130\147\151\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\174\001\002\000\006\076\u0161\104\210\001" +
    "\002\000\100\022\u0116\024\240\030\256\031\236\032\u011f" +
    "\034\u011c\035\u0119\036\254\040\255\042\262\043\277\044" +
    "\260\045\276\046\u011a\047\301\050\230\051\075\053\272" +
    "\073\063\075\056\077\214\103\264\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\356" +
    "\001\002\000\004\033\uff50\001\002\000\142\004\uff53\005" +
    "\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53\013\uff53" +
    "\014\uff53\016\uff53\021\uff53\022\uff53\023\uff53\024\uff53\026" +
    "\uff53\030\uff53\031\uff53\032\uff53\034\uff53\035\uff53\036\uff53" +
    "\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53\044\uff53\045" +
    "\uff53\046\uff53\047\uff53\050\uff53\051\uff53\053\uff53\071\uff53" +
    "\073\uff53\075\uff53\077\uff53\100\uff53\103\uff53\146\uff53\147" +
    "\uff53\154\uff53\155\uff53\156\uff53\157\uff53\160\uff53\161\uff53" +
    "\162\uff53\001\002\000\042\051\075\073\063\075\135\134" +
    "\147\135\136\144\137\145\143\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\174\001" +
    "\002\000\006\076\uff7c\104\uff7c\001\002\000\006\076\u0168" +
    "\104\u0167\001\002\000\042\051\075\073\063\075\135\134" +
    "\147\135\136\144\137\145\143\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\174\001" +
    "\002\000\004\077\214\001\002\000\144\004\uff7e\005\uff7e" +
    "\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014" +
    "\uff7e\016\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\026\uff7e" +
    "\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e" +
    "\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\053\uff7e\071" +
    "\uff7e\073\uff7e\075\uff7e\077\uff7e\100\uff7e\103\uff7e\146\uff7e" +
    "\147\uff7e\154\uff7e\155\uff7e\156\uff7e\157\uff7e\160\uff7e\161" +
    "\uff7e\162\uff7e\001\002\000\006\076\uff7d\104\uff7d\001\002" +
    "\000\042\051\075\073\063\075\135\134\147\135\136\144" +
    "\137\145\143\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\174\001\002\000\004\076" +
    "\u016d\001\002\000\100\022\u0116\024\240\030\256\031\236" +
    "\032\u011f\034\u011c\035\u0119\036\254\040\255\042\262\043" +
    "\277\044\260\045\276\046\u011a\047\301\050\230\051\075" +
    "\053\272\073\063\075\056\077\214\103\264\146\130\147" +
    "\151\154\116\155\046\156\114\157\113\160\050\161\064" +
    "\162\356\001\002\000\004\033\uff55\001\002\000\142\004" +
    "\uff56\005\uff56\006\uff56\007\uff56\010\uff56\011\uff56\012\uff56" +
    "\013\uff56\014\uff56\016\uff56\021\uff56\022\uff56\023\uff56\024" +
    "\uff56\026\uff56\030\uff56\031\uff56\032\uff56\034\uff56\035\uff56" +
    "\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044" +
    "\uff56\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\053\uff56" +
    "\071\uff56\073\uff56\075\uff56\077\uff56\100\uff56\103\uff56\146" +
    "\uff56\147\uff56\154\uff56\155\uff56\156\uff56\157\uff56\160\uff56" +
    "\161\uff56\162\uff56\001\002\000\032\016\054\021\051\051" +
    "\075\073\063\075\056\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\u0172\001\002\000\006\076\u017d\104" +
    "\u017c\001\002\000\016\075\177\076\uff40\101\176\104\uff40" +
    "\152\175\153\200\001\002\000\004\162\u0176\001\002\000" +
    "\012\076\uff3e\104\uff3e\152\uff0f\153\uff0f\001\002\000\006" +
    "\076\uff41\104\uff41\001\002\000\004\105\u0177\001\002\000" +
    "\026\051\075\073\063\075\056\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\u010f\001\002\000\014\076" +
    "\uff3f\101\u0179\104\uff3f\152\uff13\153\uff13\001\002\000\042" +
    "\051\075\073\063\075\135\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\174\001\002\000\004\102\u017b\001" +
    "\002\000\130\076\ufef2\100\ufef2\101\ufef2\102\ufef2\103\ufef2" +
    "\104\ufef2\105\ufef2\106\ufef2\107\ufef2\110\ufef2\111\ufef2\112" +
    "\ufef2\113\ufef2\114\ufef2\115\ufef2\116\ufef2\117\ufef2\120\ufef2" +
    "\121\ufef2\122\ufef2\123\ufef2\124\ufef2\125\ufef2\126\ufef2\127" +
    "\ufef2\130\ufef2\131\ufef2\132\ufef2\133\ufef2\134\ufef2\135\ufef2" +
    "\136\ufef2\137\ufef2\140\ufef2\141\ufef2\142\ufef2\143\ufef2\146" +
    "\ufef2\147\ufef2\150\ufef2\151\ufef2\152\ufef2\153\ufef2\001\002" +
    "\000\032\016\054\021\051\051\075\073\063\075\056\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\u0172" +
    "\001\002\000\100\022\u0116\024\240\030\256\031\236\032" +
    "\u011f\034\u011c\035\u0119\036\254\040\255\042\262\043\277" +
    "\044\260\045\276\046\u011a\047\301\050\230\051\075\053" +
    "\272\073\063\075\056\077\214\103\264\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\356\001\002\000\004\033\uff43\001\002\000\142\004\uff44" +
    "\005\uff44\006\uff44\007\uff44\010\uff44\011\uff44\012\uff44\013" +
    "\uff44\014\uff44\016\uff44\021\uff44\022\uff44\023\uff44\024\uff44" +
    "\026\uff44\030\uff44\031\uff44\032\uff44\034\uff44\035\uff44\036" +
    "\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043\uff44\044\uff44" +
    "\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44\053\uff44\071" +
    "\uff44\073\uff44\075\uff44\077\uff44\100\uff44\103\uff44\146\uff44" +
    "\147\uff44\154\uff44\155\uff44\156\uff44\157\uff44\160\uff44\161" +
    "\uff44\162\uff44\001\002\000\006\076\uff42\104\uff42\001\002" +
    "\000\004\103\u0183\001\002\000\004\103\uff2c\001\002\000" +
    "\144\004\uff2d\005\uff2d\006\uff2d\007\uff2d\010\uff2d\011\uff2d" +
    "\012\uff2d\013\uff2d\014\uff2d\016\uff2d\021\uff2d\022\uff2d\023" +
    "\uff2d\024\uff2d\026\uff2d\030\uff2d\031\uff2d\032\uff2d\033\uff2d" +
    "\034\uff2d\035\uff2d\036\uff2d\037\uff2d\040\uff2d\041\uff2d\042" +
    "\uff2d\043\uff2d\044\uff2d\045\uff2d\046\uff2d\047\uff2d\050\uff2d" +
    "\051\uff2d\053\uff2d\071\uff2d\073\uff2d\075\uff2d\077\uff2d\100" +
    "\uff2d\103\uff2d\146\uff2d\147\uff2d\154\uff2d\155\uff2d\156\uff2d" +
    "\157\uff2d\160\uff2d\161\uff2d\162\uff2d\001\002\000\144\004" +
    "\uff65\005\uff65\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65" +
    "\013\uff65\014\uff65\016\uff65\021\uff65\022\uff65\023\uff65\024" +
    "\uff65\026\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65" +
    "\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043" +
    "\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65" +
    "\053\uff65\071\uff65\073\uff65\075\uff65\077\uff65\100\uff65\103" +
    "\uff65\146\uff65\147\uff65\154\uff65\155\uff65\156\uff65\157\uff65" +
    "\160\uff65\161\uff65\162\uff65\001\002\000\004\054\u0186\001" +
    "\002\000\004\075\u0187\001\002\000\062\004\074\005\101" +
    "\006\047\007\062\010\107\011\105\012\055\013\052\014" +
    "\111\016\054\021\051\023\053\026\103\051\075\071\u0188" +
    "\073\063\075\056\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\117\001\002\000\060\004\074\005\101" +
    "\006\047\007\062\010\107\011\105\012\055\013\052\014" +
    "\111\016\054\021\051\023\053\026\103\051\075\073\063" +
    "\075\056\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\117\001\002\000\006\076\uffe5\104\uffe5\001\002" +
    "\000\006\076\u018e\104\u018d\001\002\000\004\162\122\001" +
    "\002\000\010\076\uffe4\101\126\104\uffe4\001\002\000\062" +
    "\004\074\005\101\006\047\007\062\010\107\011\105\012" +
    "\055\013\052\014\111\016\054\021\051\023\053\026\103" +
    "\051\075\071\u0188\073\063\075\056\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\117\001\002\000\004" +
    "\103\u018f\001\002\000\144\004\uff39\005\uff39\006\uff39\007" +
    "\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39\016\uff39" +
    "\021\uff39\022\uff39\023\uff39\024\uff39\026\uff39\030\uff39\031" +
    "\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39" +
    "\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39\045\uff39\046" +
    "\uff39\047\uff39\050\uff39\051\uff39\053\uff39\071\uff39\073\uff39" +
    "\075\uff39\077\uff39\100\uff39\103\uff39\146\uff39\147\uff39\154" +
    "\uff39\155\uff39\156\uff39\157\uff39\160\uff39\161\uff39\162\uff39" +
    "\001\002\000\006\076\uffe6\104\uffe6\001\002\000\004\162" +
    "\122\001\002\000\010\076\uffe3\101\126\104\uffe3\001\002" +
    "\000\172\002\uff84\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\016\uff84\021\uff84" +
    "\022\uff84\023\uff84\024\uff84\026\uff84\030\uff84\031\uff84\032" +
    "\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\053\uff84\055\uff84\056\uff84\057\uff84" +
    "\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072" +
    "\uff84\073\uff84\075\uff84\076\uff84\077\uff84\100\uff84\103\uff84" +
    "\146\uff84\147\uff84\154\uff84\155\uff84\156\uff84\157\uff84\160" +
    "\uff84\161\uff84\162\uff84\001\002\000\004\103\u0195\001\002" +
    "\000\144\004\uff2e\005\uff2e\006\uff2e\007\uff2e\010\uff2e\011" +
    "\uff2e\012\uff2e\013\uff2e\014\uff2e\016\uff2e\021\uff2e\022\uff2e" +
    "\023\uff2e\024\uff2e\026\uff2e\030\uff2e\031\uff2e\032\uff2e\033" +
    "\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e\041\uff2e" +
    "\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047\uff2e\050" +
    "\uff2e\051\uff2e\053\uff2e\071\uff2e\073\uff2e\075\uff2e\077\uff2e" +
    "\100\uff2e\103\uff2e\146\uff2e\147\uff2e\154\uff2e\155\uff2e\156" +
    "\uff2e\157\uff2e\160\uff2e\161\uff2e\162\uff2e\001\002\000\004" +
    "\103\u0197\001\002\000\144\004\uff2a\005\uff2a\006\uff2a\007" +
    "\uff2a\010\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a\016\uff2a" +
    "\021\uff2a\022\uff2a\023\uff2a\024\uff2a\026\uff2a\030\uff2a\031" +
    "\uff2a\032\uff2a\033\uff2a\034\uff2a\035\uff2a\036\uff2a\037\uff2a" +
    "\040\uff2a\041\uff2a\042\uff2a\043\uff2a\044\uff2a\045\uff2a\046" +
    "\uff2a\047\uff2a\050\uff2a\051\uff2a\053\uff2a\071\uff2a\073\uff2a" +
    "\075\uff2a\077\uff2a\100\uff2a\103\uff2a\146\uff2a\147\uff2a\154" +
    "\uff2a\155\uff2a\156\uff2a\157\uff2a\160\uff2a\161\uff2a\162\uff2a" +
    "\001\002\000\070\004\074\005\101\006\047\007\062\010" +
    "\107\011\105\012\055\013\052\014\111\016\054\021\051" +
    "\023\053\026\103\051\075\071\227\073\063\075\056\103" +
    "\uff4d\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\u0131\001\002\000\004\103\u019a\001" +
    "\002\000\044\051\075\073\063\075\135\103\ufea3\134\147" +
    "\135\136\144\137\145\143\146\130\147\151\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\174\001\002" +
    "\000\004\103\u019c\001\002\000\034\051\075\073\063\075" +
    "\056\076\uff49\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\u0141\001\002\000\004\076" +
    "\u019e\001\002\000\100\022\224\024\240\030\256\031\236" +
    "\032\300\034\257\035\247\036\254\040\255\042\262\043" +
    "\277\044\260\045\276\046\250\047\301\050\230\051\075" +
    "\053\272\073\063\075\056\077\214\103\264\146\130\147" +
    "\151\154\116\155\046\156\114\157\113\160\050\161\064" +
    "\162\356\001\002\000\144\004\uff1d\005\uff1d\006\uff1d\007" +
    "\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\016\uff1d" +
    "\021\uff1d\022\uff1d\023\uff1d\024\uff1d\026\uff1d\030\uff1d\031" +
    "\uff1d\032\uff1d\033\uff1d\034\uff1d\035\uff1d\036\uff1d\037\uff1d" +
    "\040\uff1d\041\uff1d\042\uff1d\043\uff1d\044\uff1d\045\uff1d\046" +
    "\uff1d\047\uff1d\050\uff1d\051\uff1d\053\uff1d\071\uff1d\073\uff1d" +
    "\075\uff1d\077\uff1d\100\uff1d\103\uff1d\146\uff1d\147\uff1d\154" +
    "\uff1d\155\uff1d\156\uff1d\157\uff1d\160\uff1d\161\uff1d\162\uff1d" +
    "\001\002\000\004\035\u01a1\001\002\000\004\075\u01a2\001" +
    "\002\000\042\051\075\073\063\075\135\134\147\135\136" +
    "\144\137\145\143\146\130\147\151\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\174\001\002\000\004" +
    "\076\u01a4\001\002\000\144\004\uff45\005\uff45\006\uff45\007" +
    "\uff45\010\uff45\011\uff45\012\uff45\013\uff45\014\uff45\016\uff45" +
    "\021\uff45\022\uff45\023\uff45\024\uff45\026\uff45\030\uff45\031" +
    "\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45" +
    "\040\uff45\041\uff45\042\uff45\043\uff45\044\uff45\045\uff45\046" +
    "\uff45\047\uff45\050\uff45\051\uff45\053\uff45\071\uff45\073\uff45" +
    "\075\uff45\077\uff45\100\uff45\103\uff45\146\uff45\147\uff45\154" +
    "\uff45\155\uff45\156\uff45\157\uff45\160\uff45\161\uff45\162\uff45" +
    "\001\002\000\042\051\075\073\063\075\135\134\147\135" +
    "\136\144\137\145\143\146\130\147\151\154\116\155\046" +
    "\156\114\157\113\160\050\161\064\162\174\001\002\000" +
    "\004\076\u01a7\001\002\000\004\077\u01a8\001\002\000\010" +
    "\037\u01af\041\u01ab\100\uff26\001\002\000\144\004\uff29\005" +
    "\uff29\006\uff29\007\uff29\010\uff29\011\uff29\012\uff29\013\uff29" +
    "\014\uff29\016\uff29\021\uff29\022\uff29\023\uff29\024\uff29\026" +
    "\uff29\030\uff29\031\uff29\032\uff29\033\uff29\034\uff29\035\uff29" +
    "\036\uff29\037\uff29\040\uff29\041\uff29\042\uff29\043\uff29\044" +
    "\uff29\045\uff29\046\uff29\047\uff29\050\uff29\051\uff29\053\uff29" +
    "\071\uff29\073\uff29\075\uff29\077\uff29\100\uff29\103\uff29\146" +
    "\uff29\147\uff29\154\uff29\155\uff29\156\uff29\157\uff29\160\uff29" +
    "\161\uff29\162\uff29\001\002\000\004\100\u01b9\001\002\000" +
    "\004\151\u01b8\001\002\000\010\037\u01af\041\u01ab\100\uff27" +
    "\001\002\000\010\037\uff25\041\uff25\100\uff25\001\002\000" +
    "\140\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22\011\uff22" +
    "\012\uff22\013\uff22\014\uff22\016\uff22\021\uff22\022\uff22\023" +
    "\uff22\024\uff22\026\uff22\030\uff22\031\uff22\032\uff22\034\uff22" +
    "\035\uff22\036\uff22\037\uff22\040\uff22\041\uff22\042\uff22\043" +
    "\uff22\044\uff22\045\uff22\046\uff22\047\uff22\050\uff22\051\uff22" +
    "\053\uff22\071\uff22\073\uff22\075\uff22\077\uff22\103\uff22\146" +
    "\uff22\147\uff22\154\uff22\155\uff22\156\uff22\157\uff22\160\uff22" +
    "\161\uff22\162\uff22\001\002\000\042\051\075\073\063\075" +
    "\135\134\147\135\136\144\137\145\143\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\174\001\002\000\140\004\074\005\101\006\047\007\062" +
    "\010\107\011\105\012\055\013\052\014\111\016\054\021" +
    "\051\022\224\023\053\024\240\026\103\030\256\031\236" +
    "\032\300\034\257\035\247\036\254\037\u01af\040\255\041" +
    "\u01ab\042\262\043\277\044\260\045\276\046\250\047\301" +
    "\050\230\051\075\053\272\071\227\073\063\075\056\077" +
    "\214\103\264\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\222\001\002\000\142\004" +
    "\074\005\101\006\047\007\062\010\107\011\105\012\055" +
    "\013\052\014\111\016\054\021\051\022\224\023\053\024" +
    "\240\026\103\030\256\031\236\032\300\034\257\035\247" +
    "\036\254\037\uff23\040\255\041\uff23\042\262\043\277\044" +
    "\260\045\276\046\250\047\301\050\230\051\075\053\272" +
    "\071\227\073\063\075\056\077\214\100\uff23\103\264\146" +
    "\130\147\151\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\222\001\002\000\140\004\uff21\005\uff21\006" +
    "\uff21\007\uff21\010\uff21\011\uff21\012\uff21\013\uff21\014\uff21" +
    "\016\uff21\021\uff21\022\uff21\023\uff21\024\uff21\026\uff21\030" +
    "\uff21\031\uff21\032\uff21\034\uff21\035\uff21\036\uff21\037\uff21" +
    "\040\uff21\041\uff21\042\uff21\043\uff21\044\uff21\045\uff21\046" +
    "\uff21\047\uff21\050\uff21\051\uff21\053\uff21\071\uff21\073\uff21" +
    "\075\uff21\077\uff21\103\uff21\146\uff21\147\uff21\154\uff21\155" +
    "\uff21\156\uff21\157\uff21\160\uff21\161\uff21\162\uff21\001\002" +
    "\000\142\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011" +
    "\uff81\012\uff81\013\uff81\014\uff81\016\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\026\uff81\030\uff81\031\uff81\032\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051" +
    "\uff81\053\uff81\071\uff81\073\uff81\075\uff81\077\uff81\100\uff81" +
    "\103\uff81\146\uff81\147\uff81\154\uff81\155\uff81\156\uff81\157" +
    "\uff81\160\uff81\161\uff81\162\uff81\001\002\000\004\151\u01b6" +
    "\001\002\000\004\151\ufea1\001\002\000\140\004\uff20\005" +
    "\uff20\006\uff20\007\uff20\010\uff20\011\uff20\012\uff20\013\uff20" +
    "\014\uff20\016\uff20\021\uff20\022\uff20\023\uff20\024\uff20\026" +
    "\uff20\030\uff20\031\uff20\032\uff20\034\uff20\035\uff20\036\uff20" +
    "\037\uff20\040\uff20\041\uff20\042\uff20\043\uff20\044\uff20\045" +
    "\uff20\046\uff20\047\uff20\050\uff20\051\uff20\053\uff20\071\uff20" +
    "\073\uff20\075\uff20\077\uff20\103\uff20\146\uff20\147\uff20\154" +
    "\uff20\155\uff20\156\uff20\157\uff20\160\uff20\161\uff20\162\uff20" +
    "\001\002\000\010\037\uff24\041\uff24\100\uff24\001\002\000" +
    "\140\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010\uff1f\011\uff1f" +
    "\012\uff1f\013\uff1f\014\uff1f\016\uff1f\021\uff1f\022\uff1f\023" +
    "\uff1f\024\uff1f\026\uff1f\030\uff1f\031\uff1f\032\uff1f\034\uff1f" +
    "\035\uff1f\036\uff1f\037\uff1f\040\uff1f\041\uff1f\042\uff1f\043" +
    "\uff1f\044\uff1f\045\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f" +
    "\053\uff1f\071\uff1f\073\uff1f\075\uff1f\077\uff1f\103\uff1f\146" +
    "\uff1f\147\uff1f\154\uff1f\155\uff1f\156\uff1f\157\uff1f\160\uff1f" +
    "\161\uff1f\162\uff1f\001\002\000\144\004\uff28\005\uff28\006" +
    "\uff28\007\uff28\010\uff28\011\uff28\012\uff28\013\uff28\014\uff28" +
    "\016\uff28\021\uff28\022\uff28\023\uff28\024\uff28\026\uff28\030" +
    "\uff28\031\uff28\032\uff28\033\uff28\034\uff28\035\uff28\036\uff28" +
    "\037\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28\045" +
    "\uff28\046\uff28\047\uff28\050\uff28\051\uff28\053\uff28\071\uff28" +
    "\073\uff28\075\uff28\077\uff28\100\uff28\103\uff28\146\uff28\147" +
    "\uff28\154\uff28\155\uff28\156\uff28\157\uff28\160\uff28\161\uff28" +
    "\162\uff28\001\002\000\006\103\uff92\104\uff92\001\002\000" +
    "\006\103\uff78\104\u01bf\001\002\000\012\101\126\103\uff91" +
    "\104\uff91\105\u01bd\001\002\000\044\051\075\073\063\075" +
    "\135\077\164\134\147\135\136\144\137\145\143\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\174\001\002\000\006\103\uff90\104\uff90\001\002" +
    "\000\004\162\122\001\002\000\006\103\uff93\104\uff93\001" +
    "\002\000\004\075\u01c2\001\002\000\070\004\074\005\101" +
    "\006\047\007\062\010\107\011\105\012\055\013\052\014" +
    "\111\016\054\021\051\023\053\026\103\051\075\071\227" +
    "\073\063\075\056\103\uff4d\146\130\147\151\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\u0131\001\002" +
    "\000\004\103\u01c4\001\002\000\044\051\075\073\063\075" +
    "\135\103\ufea3\134\147\135\136\144\137\145\143\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\174\001\002\000\004\103\u01c6\001\002\000\034" +
    "\051\075\073\063\075\056\076\uff49\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\u0141" +
    "\001\002\000\004\076\u01c8\001\002\000\102\022\224\024" +
    "\240\025\u01c9\030\256\031\236\032\300\034\257\035\247" +
    "\036\254\040\255\042\262\043\277\044\260\045\276\046" +
    "\250\047\301\050\230\051\075\053\272\073\063\075\056" +
    "\077\214\103\264\146\130\147\151\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\356\001\002\000\004" +
    "\075\u01ca\001\002\000\042\051\075\073\063\075\135\134" +
    "\147\135\136\144\137\145\143\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\174\001" +
    "\002\000\006\076\u01cc\104\210\001\002\000\100\022\224" +
    "\024\240\030\256\031\236\032\300\034\257\035\247\036" +
    "\254\040\255\042\262\043\277\044\260\045\276\046\250" +
    "\047\301\050\230\051\075\053\272\073\063\075\056\077" +
    "\214\103\264\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\356\001\002\000\042\051" +
    "\075\073\063\075\135\134\147\135\136\144\137\145\143" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\174\001\002\000\004\076\u01cf\001\002" +
    "\000\100\022\224\024\240\030\256\031\236\032\300\034" +
    "\257\035\247\036\254\040\255\042\262\043\277\044\260" +
    "\045\276\046\250\047\301\050\230\051\075\053\272\073" +
    "\063\075\056\077\214\103\264\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\356\001" +
    "\002\000\142\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b" +
    "\011\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\024\uff7b\026\uff7b\030\uff7b\031\uff7b\032\uff7b" +
    "\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042" +
    "\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\053\uff7b\071\uff7b\073\uff7b\075\uff7b\077\uff7b\100" +
    "\uff7b\103\uff7b\146\uff7b\147\uff7b\154\uff7b\155\uff7b\156\uff7b" +
    "\157\uff7b\160\uff7b\161\uff7b\162\uff7b\001\002\000\012\101" +
    "\u0179\103\u01d2\152\uff13\153\uff13\001\002\000\144\004\uff3c" +
    "\005\uff3c\006\uff3c\007\uff3c\010\uff3c\011\uff3c\012\uff3c\013" +
    "\uff3c\014\uff3c\016\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c" +
    "\026\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035" +
    "\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c" +
    "\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c\053" +
    "\uff3c\071\uff3c\073\uff3c\075\uff3c\077\uff3c\100\uff3c\103\uff3c" +
    "\146\uff3c\147\uff3c\154\uff3c\155\uff3c\156\uff3c\157\uff3c\160" +
    "\uff3c\161\uff3c\162\uff3c\001\002\000\144\004\uff1e\005\uff1e" +
    "\006\uff1e\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e\014" +
    "\uff1e\016\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\026\uff1e" +
    "\030\uff1e\031\uff1e\032\uff1e\033\uff1e\034\uff1e\035\uff1e\036" +
    "\uff1e\037\uff1e\040\uff1e\041\uff1e\042\uff1e\043\uff1e\044\uff1e" +
    "\045\uff1e\046\uff1e\047\uff1e\050\uff1e\051\uff1e\053\uff1e\071" +
    "\uff1e\073\uff1e\075\uff1e\077\uff1e\100\uff1e\103\uff1e\146\uff1e" +
    "\147\uff1e\154\uff1e\155\uff1e\156\uff1e\157\uff1e\160\uff1e\161" +
    "\uff1e\162\uff1e\001\002\000\072\076\ufee3\100\ufee3\102\ufee3" +
    "\103\ufee3\104\ufee3\121\ufee3\122\ufee3\123\ufee3\124\ufee3\125" +
    "\ufee3\126\ufee3\127\ufee3\130\ufee3\131\ufee3\132\ufee3\133\ufee3" +
    "\134\ufee3\135\ufee3\136\ufee3\137\ufee3\140\ufee3\141\ufee3\142" +
    "\ufee3\143\ufee3\146\ufee3\147\ufee3\150\ufee3\151\ufee3\001\002" +
    "\000\072\076\ufee4\100\ufee4\102\ufee4\103\ufee4\104\ufee4\121" +
    "\ufee4\122\ufee4\123\ufee4\124\ufee4\125\ufee4\126\ufee4\127\ufee4" +
    "\130\ufee4\131\ufee4\132\ufee4\133\ufee4\134\ufee4\135\ufee4\136" +
    "\ufee4\137\ufee4\140\ufee4\141\ufee4\142\ufee4\143\ufee4\146\ufee4" +
    "\147\ufee4\150\ufee4\151\ufee4\001\002\000\144\004\uff38\005" +
    "\uff38\006\uff38\007\uff38\010\uff38\011\uff38\012\uff38\013\uff38" +
    "\014\uff38\016\uff38\021\uff38\022\uff38\023\uff38\024\uff38\026" +
    "\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38" +
    "\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38\043\uff38\044" +
    "\uff38\045\uff38\046\uff38\047\uff38\050\uff38\051\uff38\053\uff38" +
    "\071\uff38\073\uff38\075\uff38\077\uff38\100\uff38\103\uff38\146" +
    "\uff38\147\uff38\154\uff38\155\uff38\156\uff38\157\uff38\160\uff38" +
    "\161\uff38\162\uff38\001\002\000\030\030\323\051\075\073" +
    "\063\075\316\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\314\001\002\000\032\030\323\051\075\073" +
    "\063\075\316\100\u01d9\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\314\001\002\000\144\004\uff1b\005" +
    "\uff1b\006\uff1b\007\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b" +
    "\014\uff1b\016\uff1b\021\uff1b\022\uff1b\023\uff1b\024\uff1b\026" +
    "\uff1b\030\uff1b\031\uff1b\032\uff1b\033\uff1b\034\uff1b\035\uff1b" +
    "\036\uff1b\037\uff1b\040\uff1b\041\uff1b\042\uff1b\043\uff1b\044" +
    "\uff1b\045\uff1b\046\uff1b\047\uff1b\050\uff1b\051\uff1b\053\uff1b" +
    "\071\uff1b\073\uff1b\075\uff1b\077\uff1b\100\uff1b\103\uff1b\146" +
    "\uff1b\147\uff1b\154\uff1b\155\uff1b\156\uff1b\157\uff1b\160\uff1b" +
    "\161\uff1b\162\uff1b\001\002\000\004\162\122\001\002\000" +
    "\006\103\uff79\104\u01bf\001\002\000\032\016\054\021\051" +
    "\051\075\073\063\075\056\154\116\155\046\156\114\157" +
    "\113\160\050\161\064\162\u0172\001\002\000\006\076\u01de" +
    "\104\u017c\001\002\000\100\022\224\024\240\030\256\031" +
    "\236\032\300\034\257\035\247\036\254\040\255\042\262" +
    "\043\277\044\260\045\276\046\250\047\301\050\230\051" +
    "\075\053\272\073\063\075\056\077\214\103\264\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\356\001\002\000\004\076\u01e0\001\002\000\100" +
    "\076\ufef1\100\ufef1\101\ufef1\102\ufef1\103\ufef1\104\ufef1\121" +
    "\ufef1\122\ufef1\123\ufef1\124\ufef1\125\ufef1\126\ufef1\127\ufef1" +
    "\130\ufef1\131\ufef1\132\ufef1\133\ufef1\134\ufef1\135\ufef1\136" +
    "\ufef1\137\ufef1\140\ufef1\141\ufef1\142\ufef1\143\ufef1\146\ufef1" +
    "\147\ufef1\150\ufef1\151\ufef1\152\ufef1\153\ufef1\001\002\000" +
    "\100\075\u013c\076\uff0d\100\uff0d\102\uff0d\103\uff0d\104\uff0d" +
    "\121\uff0d\122\uff0d\123\uff0d\124\uff0d\125\uff0d\126\uff0d\127" +
    "\uff0d\130\uff0d\131\uff0d\132\uff0d\133\uff0d\134\uff0d\135\uff0d" +
    "\136\uff0d\137\uff0d\140\uff0d\141\uff0d\142\uff0d\143\uff0d\146" +
    "\uff0d\147\uff0d\150\uff0d\151\uff0d\152\uff0d\153\uff0d\001\002" +
    "\000\042\051\075\073\063\075\135\134\147\135\136\144" +
    "\137\145\143\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\u01e7\001\002\000\042\051" +
    "\075\073\063\075\135\134\147\135\136\144\137\145\143" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\u01e7\001\002\000\042\051\075\073\063" +
    "\075\135\134\147\135\136\144\137\145\143\146\130\147" +
    "\151\154\116\155\046\156\114\157\113\160\050\161\064" +
    "\162\u01e7\001\002\000\042\051\075\073\063\075\135\134" +
    "\147\135\136\144\137\145\143\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\u01e7\001" +
    "\002\000\054\076\ufec7\100\ufec7\102\ufec7\103\ufec7\104\ufec7" +
    "\121\ufec7\122\ufec7\123\ufec7\124\ufec7\125\ufec7\126\ufec7\127" +
    "\u01e8\130\u01e9\131\u01ea\132\ufec7\133\ufec7\140\ufec7\141\ufec7" +
    "\142\ufec7\150\ufec7\151\ufec7\001\002\000\102\075\177\076" +
    "\ufee5\100\ufee5\101\176\102\ufee5\103\ufee5\104\ufee5\121\ufee5" +
    "\122\ufee5\123\ufee5\124\ufee5\125\ufee5\126\ufee5\127\ufee5\130" +
    "\ufee5\131\ufee5\132\ufee5\133\ufee5\134\ufee5\135\ufee5\136\ufee5" +
    "\137\ufee5\140\ufee5\141\ufee5\142\ufee5\143\ufee5\146\ufee5\147" +
    "\ufee5\150\ufee5\151\ufee5\152\175\153\200\001\002\000\042" +
    "\051\075\073\063\075\135\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\u01e7\001\002\000\042\051\075\073" +
    "\063\075\135\134\147\135\136\144\137\145\143\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\u01e7\001\002\000\042\051\075\073\063\075\135" +
    "\134\147\135\136\144\137\145\143\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\u01e7" +
    "\001\002\000\060\076\ufecb\100\ufecb\102\ufecb\103\ufecb\104" +
    "\ufecb\121\ufecb\122\ufecb\123\ufecb\124\ufecb\125\ufecb\126\ufecb" +
    "\127\ufecb\130\ufecb\131\ufecb\132\ufecb\133\ufecb\134\u01ec\135" +
    "\u01ed\140\ufecb\141\ufecb\142\ufecb\150\ufecb\151\ufecb\001\002" +
    "\000\042\051\075\073\063\075\135\134\147\135\136\144" +
    "\137\145\143\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\u01e7\001\002\000\042\051" +
    "\075\073\063\075\135\134\147\135\136\144\137\145\143" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\u01e7\001\002\000\066\076\ufecf\100\ufecf" +
    "\102\ufecf\103\ufecf\104\ufecf\121\ufecf\122\ufecf\123\ufecf\124" +
    "\ufecf\125\ufecf\126\ufecf\127\ufecf\130\ufecf\131\ufecf\132\ufecf" +
    "\133\ufecf\134\ufecf\135\ufecf\136\u01f0\137\u01f1\140\ufecf\141" +
    "\ufecf\142\ufecf\143\u01ef\150\ufecf\151\ufecf\001\002\000\042" +
    "\051\075\073\063\075\135\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\u01e7\001\002\000\042\051\075\073" +
    "\063\075\135\134\147\135\136\144\137\145\143\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\u01e7\001\002\000\042\051\075\073\063\075\135" +
    "\134\147\135\136\144\137\145\143\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\u01e7" +
    "\001\002\000\066\076\ufed3\100\ufed3\102\ufed3\103\ufed3\104" +
    "\ufed3\121\ufed3\122\ufed3\123\ufed3\124\ufed3\125\ufed3\126\ufed3" +
    "\127\ufed3\130\ufed3\131\ufed3\132\ufed3\133\ufed3\134\ufed3\135" +
    "\ufed3\136\ufed3\137\ufed3\140\ufed3\141\ufed3\142\ufed3\143\ufed3" +
    "\150\ufed3\151\ufed3\001\002\000\066\076\ufed4\100\ufed4\102" +
    "\ufed4\103\ufed4\104\ufed4\121\ufed4\122\ufed4\123\ufed4\124\ufed4" +
    "\125\ufed4\126\ufed4\127\ufed4\130\ufed4\131\ufed4\132\ufed4\133" +
    "\ufed4\134\ufed4\135\ufed4\136\ufed4\137\ufed4\140\ufed4\141\ufed4" +
    "\142\ufed4\143\ufed4\150\ufed4\151\ufed4\001\002\000\066\076" +
    "\ufed2\100\ufed2\102\ufed2\103\ufed2\104\ufed2\121\ufed2\122\ufed2" +
    "\123\ufed2\124\ufed2\125\ufed2\126\ufed2\127\ufed2\130\ufed2\131" +
    "\ufed2\132\ufed2\133\ufed2\134\ufed2\135\ufed2\136\ufed2\137\ufed2" +
    "\140\ufed2\141\ufed2\142\ufed2\143\ufed2\150\ufed2\151\ufed2\001" +
    "\002\000\066\076\ufed0\100\ufed0\102\ufed0\103\ufed0\104\ufed0" +
    "\121\ufed0\122\ufed0\123\ufed0\124\ufed0\125\ufed0\126\ufed0\127" +
    "\ufed0\130\ufed0\131\ufed0\132\ufed0\133\ufed0\134\ufed0\135\ufed0" +
    "\136\u01f0\137\u01f1\140\ufed0\141\ufed0\142\ufed0\143\u01ef\150" +
    "\ufed0\151\ufed0\001\002\000\060\076\ufecc\100\ufecc\102\ufecc" +
    "\103\ufecc\104\ufecc\121\ufecc\122\ufecc\123\ufecc\124\ufecc\125" +
    "\ufecc\126\ufecc\127\ufecc\130\ufecc\131\ufecc\132\ufecc\133\ufecc" +
    "\134\u01ec\135\u01ed\140\ufecc\141\ufecc\142\ufecc\150\ufecc\151" +
    "\ufecc\001\002\000\060\076\ufecd\100\ufecd\102\ufecd\103\ufecd" +
    "\104\ufecd\121\ufecd\122\ufecd\123\ufecd\124\ufecd\125\ufecd\126" +
    "\ufecd\127\ufecd\130\ufecd\131\ufecd\132\ufecd\133\ufecd\134\u01ec" +
    "\135\u01ed\140\ufecd\141\ufecd\142\ufecd\150\ufecd\151\ufecd\001" +
    "\002\000\054\076\ufec8\100\ufec8\102\ufec8\103\ufec8\104\ufec8" +
    "\121\ufec8\122\ufec8\123\ufec8\124\ufec8\125\ufec8\126\ufec8\127" +
    "\u01e8\130\u01e9\131\u01ea\132\ufec8\133\ufec8\140\ufec8\141\ufec8" +
    "\142\ufec8\150\ufec8\151\ufec8\001\002\000\054\076\ufec6\100" +
    "\ufec6\102\ufec6\103\ufec6\104\ufec6\121\ufec6\122\ufec6\123\ufec6" +
    "\124\ufec6\125\ufec6\126\ufec6\127\u01e8\130\u01e9\131\u01ea\132" +
    "\ufec6\133\ufec6\140\ufec6\141\ufec6\142\ufec6\150\ufec6\151\ufec6" +
    "\001\002\000\054\076\ufec9\100\ufec9\102\ufec9\103\ufec9\104" +
    "\ufec9\121\ufec9\122\ufec9\123\ufec9\124\ufec9\125\ufec9\126\ufec9" +
    "\127\u01e8\130\u01e9\131\u01ea\132\ufec9\133\ufec9\140\ufec9\141" +
    "\ufec9\142\ufec9\150\ufec9\151\ufec9\001\002\000\042\051\075" +
    "\073\063\075\135\134\147\135\136\144\137\145\143\146" +
    "\130\147\151\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\u01e7\001\002\000\030\076\ufebd\100\ufebd\102" +
    "\ufebd\103\ufebd\104\ufebd\132\ufebd\133\ufebd\141\ufebd\142\u01fd" +
    "\150\ufebd\151\ufebd\001\002\000\042\051\075\073\063\075" +
    "\135\134\147\135\136\144\137\145\143\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\u01e7\001\002\000\032\076\ufebf\100\ufebf\102\ufebf\103\ufebf" +
    "\104\ufebf\132\ufebf\133\ufebf\140\u01ff\141\ufebf\142\ufebf\150" +
    "\ufebf\151\ufebf\001\002\000\042\051\075\073\063\075\135" +
    "\134\147\135\136\144\137\145\143\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\u01e7" +
    "\001\002\000\036\076\ufec1\100\ufec1\102\ufec1\103\ufec1\104" +
    "\ufec1\123\u0202\126\u0201\132\ufec1\133\ufec1\140\ufec1\141\ufec1" +
    "\142\ufec1\150\ufec1\151\ufec1\001\002\000\042\051\075\073" +
    "\063\075\135\134\147\135\136\144\137\145\143\146\130" +
    "\147\151\154\116\155\046\156\114\157\113\160\050\161" +
    "\064\162\u01e7\001\002\000\042\051\075\073\063\075\135" +
    "\134\147\135\136\144\137\145\143\146\130\147\151\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\u01e7" +
    "\001\002\000\046\076\ufec4\100\ufec4\102\ufec4\103\ufec4\104" +
    "\ufec4\121\u01e4\122\u01e2\123\ufec4\124\u01e5\125\u01e3\126\ufec4" +
    "\132\ufec4\133\ufec4\140\ufec4\141\ufec4\142\ufec4\150\ufec4\151" +
    "\ufec4\001\002\000\046\076\ufec3\100\ufec3\102\ufec3\103\ufec3" +
    "\104\ufec3\121\u01e4\122\u01e2\123\ufec3\124\u01e5\125\u01e3\126" +
    "\ufec3\132\ufec3\133\ufec3\140\ufec3\141\ufec3\142\ufec3\150\ufec3" +
    "\151\ufec3\001\002\000\006\100\uff8a\104\u0209\001\002\000" +
    "\006\100\uff87\104\uff87\001\002\000\004\100\u0208\001\002" +
    "\000\076\076\uff8b\100\uff8b\102\uff8b\103\uff8b\104\uff8b\121" +
    "\uff8b\122\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b" +
    "\130\uff8b\131\uff8b\132\uff8b\133\uff8b\134\uff8b\135\uff8b\136" +
    "\uff8b\137\uff8b\140\uff8b\141\uff8b\142\uff8b\143\uff8b\146\uff8b" +
    "\147\uff8b\150\uff8b\151\uff8b\152\uff8b\153\uff8b\001\002\000" +
    "\044\051\075\073\063\075\135\077\164\134\147\135\136" +
    "\144\137\145\143\146\130\147\151\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\174\001\002\000\006" +
    "\100\uff88\104\uff88\001\002\000\042\051\075\073\063\075" +
    "\135\134\147\135\136\144\137\145\143\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\174\001\002\000\042\051\075\073\063\075\135\134\147" +
    "\135\136\144\137\145\143\146\130\147\151\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\u01e7\001\002" +
    "\000\024\076\ufeb9\100\ufeb9\102\ufeb9\103\ufeb9\104\ufeb9\132" +
    "\u020e\133\ufeb9\150\ufeb9\151\ufeb9\001\002\000\042\051\075" +
    "\073\063\075\135\134\147\135\136\144\137\145\143\146" +
    "\130\147\151\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\u01e7\001\002\000\026\076\ufebb\100\ufebb\102" +
    "\ufebb\103\ufebb\104\ufebb\132\ufebb\133\ufebb\141\u01fb\150\ufebb" +
    "\151\ufebb\001\002\000\004\151\u0211\001\002\000\042\051" +
    "\075\073\063\075\135\134\147\135\136\144\137\145\143" +
    "\146\130\147\151\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\u01e7\001\002\000\016\076\ufeb7\100\ufeb7" +
    "\102\ufeb7\103\ufeb7\104\ufeb7\151\ufeb7\001\002\000\066\076" +
    "\ufedc\100\ufedc\102\ufedc\103\ufedc\104\ufedc\121\ufedc\122\ufedc" +
    "\123\ufedc\124\ufedc\125\ufedc\126\ufedc\127\ufedc\130\ufedc\131" +
    "\ufedc\132\ufedc\133\ufedc\134\ufedc\135\ufedc\136\ufedc\137\ufedc" +
    "\140\ufedc\141\ufedc\142\ufedc\143\ufedc\150\ufedc\151\ufedc\001" +
    "\002\000\066\076\ufee0\100\ufee0\102\ufee0\103\ufee0\104\ufee0" +
    "\121\ufee0\122\ufee0\123\ufee0\124\ufee0\125\ufee0\126\ufee0\127" +
    "\ufee0\130\ufee0\131\ufee0\132\ufee0\133\ufee0\134\ufee0\135\ufee0" +
    "\136\ufee0\137\ufee0\140\ufee0\141\ufee0\142\ufee0\143\ufee0\150" +
    "\ufee0\151\ufee0\001\002\000\066\076\ufeda\100\ufeda\102\ufeda" +
    "\103\ufeda\104\ufeda\121\ufeda\122\ufeda\123\ufeda\124\ufeda\125" +
    "\ufeda\126\ufeda\127\ufeda\130\ufeda\131\ufeda\132\ufeda\133\ufeda" +
    "\134\ufeda\135\ufeda\136\ufeda\137\ufeda\140\ufeda\141\ufeda\142" +
    "\ufeda\143\ufeda\150\ufeda\151\ufeda\001\002\000\066\076\ufed9" +
    "\100\ufed9\102\ufed9\103\ufed9\104\ufed9\121\ufed9\122\ufed9\123" +
    "\ufed9\124\ufed9\125\ufed9\126\ufed9\127\ufed9\130\ufed9\131\ufed9" +
    "\132\ufed9\133\ufed9\134\ufed9\135\ufed9\136\ufed9\137\ufed9\140" +
    "\ufed9\141\ufed9\142\ufed9\143\ufed9\150\ufed9\151\ufed9\001\002" +
    "\000\066\076\ufedf\100\ufedf\102\ufedf\103\ufedf\104\ufedf\121" +
    "\ufedf\122\ufedf\123\ufedf\124\ufedf\125\ufedf\126\ufedf\127\ufedf" +
    "\130\ufedf\131\ufedf\132\ufedf\133\ufedf\134\ufedf\135\ufedf\136" +
    "\ufedf\137\ufedf\140\ufedf\141\ufedf\142\ufedf\143\ufedf\150\ufedf" +
    "\151\ufedf\001\002\000\004\076\u021c\001\002\000\004\076" +
    "\u021a\001\002\000\042\051\075\073\063\075\135\134\147" +
    "\135\136\144\137\145\143\146\130\147\151\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\u01e7\001\002" +
    "\000\066\076\ufed6\100\ufed6\102\ufed6\103\ufed6\104\ufed6\121" +
    "\ufed6\122\ufed6\123\ufed6\124\ufed6\125\ufed6\126\ufed6\127\ufed6" +
    "\130\ufed6\131\ufed6\132\ufed6\133\ufed6\134\ufed6\135\ufed6\136" +
    "\ufed6\137\ufed6\140\ufed6\141\ufed6\142\ufed6\143\ufed6\150\ufed6" +
    "\151\ufed6\001\002\000\130\051\075\073\063\075\135\076" +
    "\uff0b\100\uff0b\101\uff0b\102\uff0b\103\uff0b\104\uff0b\121\uff0b" +
    "\122\uff0b\123\uff0b\124\uff0b\125\uff0b\126\uff0b\127\uff0b\130" +
    "\uff0b\131\uff0b\132\uff0b\133\uff0b\134\uff0b\135\uff0b\136\uff0b" +
    "\137\uff0b\140\uff0b\141\uff0b\142\uff0b\143\uff0b\144\137\145" +
    "\143\146\uff0b\147\uff0b\150\uff0b\151\uff0b\152\uff0b\153\uff0b" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\u01e7\001\002\000\066\076\ufed7\100\ufed7\102\ufed7\103\ufed7" +
    "\104\ufed7\121\ufed7\122\ufed7\123\ufed7\124\ufed7\125\ufed7\126" +
    "\ufed7\127\ufed7\130\ufed7\131\ufed7\132\ufed7\133\ufed7\134\ufed7" +
    "\135\ufed7\136\ufed7\137\ufed7\140\ufed7\141\ufed7\142\ufed7\143" +
    "\ufed7\150\ufed7\151\ufed7\001\002\000\042\051\ufea9\073\ufea9" +
    "\075\ufea9\134\ufea9\135\ufea9\144\ufea9\145\ufea9\146\ufea9\147" +
    "\ufea9\154\ufea9\155\ufea9\156\ufea9\157\ufea9\160\ufea9\161\ufea9" +
    "\162\ufea9\001\002\000\042\051\ufeb2\073\ufeb2\075\ufeb2\134" +
    "\ufeb2\135\ufeb2\144\ufeb2\145\ufeb2\146\ufeb2\147\ufeb2\154\ufeb2" +
    "\155\ufeb2\156\ufeb2\157\ufeb2\160\ufeb2\161\ufeb2\162\ufeb2\001" +
    "\002\000\042\051\ufeb1\073\ufeb1\075\ufeb1\134\ufeb1\135\ufeb1" +
    "\144\ufeb1\145\ufeb1\146\ufeb1\147\ufeb1\154\ufeb1\155\ufeb1\156" +
    "\ufeb1\157\ufeb1\160\ufeb1\161\ufeb1\162\ufeb1\001\002\000\042" +
    "\051\ufeaa\073\ufeaa\075\ufeaa\134\ufeaa\135\ufeaa\144\ufeaa\145" +
    "\ufeaa\146\ufeaa\147\ufeaa\154\ufeaa\155\ufeaa\156\ufeaa\157\ufeaa" +
    "\160\ufeaa\161\ufeaa\162\ufeaa\001\002\000\042\051\ufeaf\073" +
    "\ufeaf\075\ufeaf\134\ufeaf\135\ufeaf\144\ufeaf\145\ufeaf\146\ufeaf" +
    "\147\ufeaf\154\ufeaf\155\ufeaf\156\ufeaf\157\ufeaf\160\ufeaf\161" +
    "\ufeaf\162\ufeaf\001\002\000\042\051\ufeac\073\ufeac\075\ufeac" +
    "\134\ufeac\135\ufeac\144\ufeac\145\ufeac\146\ufeac\147\ufeac\154" +
    "\ufeac\155\ufeac\156\ufeac\157\ufeac\160\ufeac\161\ufeac\162\ufeac" +
    "\001\002\000\042\051\ufead\073\ufead\075\ufead\134\ufead\135" +
    "\ufead\144\ufead\145\ufead\146\ufead\147\ufead\154\ufead\155\ufead" +
    "\156\ufead\157\ufead\160\ufead\161\ufead\162\ufead\001\002\000" +
    "\042\051\ufeb3\073\ufeb3\075\ufeb3\134\ufeb3\135\ufeb3\144\ufeb3" +
    "\145\ufeb3\146\ufeb3\147\ufeb3\154\ufeb3\155\ufeb3\156\ufeb3\157" +
    "\ufeb3\160\ufeb3\161\ufeb3\162\ufeb3\001\002\000\042\051\ufeae" +
    "\073\ufeae\075\ufeae\134\ufeae\135\ufeae\144\ufeae\145\ufeae\146" +
    "\ufeae\147\ufeae\154\ufeae\155\ufeae\156\ufeae\157\ufeae\160\ufeae" +
    "\161\ufeae\162\ufeae\001\002\000\042\051\075\073\063\075" +
    "\135\134\147\135\136\144\137\145\143\146\130\147\151" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\174\001\002\000\042\051\ufea8\073\ufea8\075\ufea8\134\ufea8" +
    "\135\ufea8\144\ufea8\145\ufea8\146\ufea8\147\ufea8\154\ufea8\155" +
    "\ufea8\156\ufea8\157\ufea8\160\ufea8\161\ufea8\162\ufea8\001\002" +
    "\000\042\051\ufeab\073\ufeab\075\ufeab\134\ufeab\135\ufeab\144" +
    "\ufeab\145\ufeab\146\ufeab\147\ufeab\154\ufeab\155\ufeab\156\ufeab" +
    "\157\ufeab\160\ufeab\161\ufeab\162\ufeab\001\002\000\042\051" +
    "\ufeb0\073\ufeb0\075\ufeb0\134\ufeb0\135\ufeb0\144\ufeb0\145\ufeb0" +
    "\146\ufeb0\147\ufeb0\154\ufeb0\155\ufeb0\156\ufeb0\157\ufeb0\160" +
    "\ufeb0\161\ufeb0\162\ufeb0\001\002\000\016\076\ufeb4\100\ufeb4" +
    "\102\ufeb4\103\ufeb4\104\ufeb4\151\ufeb4\001\002\000\066\076" +
    "\ufedd\100\ufedd\102\ufedd\103\ufedd\104\ufedd\121\ufedd\122\ufedd" +
    "\123\ufedd\124\ufedd\125\ufedd\126\ufedd\127\ufedd\130\ufedd\131" +
    "\ufedd\132\ufedd\133\ufedd\134\ufedd\135\ufedd\136\ufedd\137\ufedd" +
    "\140\ufedd\141\ufedd\142\ufedd\143\ufedd\150\ufedd\151\ufedd\001" +
    "\002\000\004\162\122\001\002\000\106\002\uff98\004\uff98" +
    "\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\016\uff98\021\uff98\023\uff98\026\uff98\051\uff98" +
    "\055\uff98\056\uff98\057\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\070\uff98\071\uff98\072\uff98\073\uff98\075\uff98\154\uff98" +
    "\155\uff98\156\uff98\157\uff98\160\uff98\161\uff98\162\uff98\001" +
    "\002\000\006\103\uff97\104\uff97\001\002\000\004\162\u0246" +
    "\001\002\000\004\162\u0232\001\002\000\004\075\u0233\001" +
    "\002\000\064\004\074\005\101\006\047\007\062\010\107" +
    "\011\105\012\055\013\052\014\111\016\054\021\051\023" +
    "\053\026\103\051\075\071\u0188\073\063\075\056\076\uffe7" +
    "\154\116\155\046\156\114\157\113\160\050\161\064\162" +
    "\117\001\002\000\006\076\uffe8\104\u018d\001\002\000\004" +
    "\076\u0236\001\002\000\010\061\u0238\077\uffef\103\uffef\001" +
    "\002\000\006\077\214\103\u0243\001\002\000\004\162\u023a" +
    "\001\002\000\010\077\uffed\103\uffed\104\uffed\001\002\000" +
    "\016\076\uffec\077\uffec\103\uffec\104\uffec\152\uffea\153\uffea" +
    "\001\002\000\006\152\u023f\153\u0240\001\002\000\010\077" +
    "\ufff0\103\ufff0\104\u023d\001\002\000\004\162\u023a\001\002" +
    "\000\010\077\uffee\103\uffee\104\uffee\001\002\000\004\162" +
    "\u0242\001\002\000\004\162\u0241\001\002\000\010\103\uffe9" +
    "\152\uffe9\153\uffe9\001\002\000\012\076\uffeb\077\uffeb\103" +
    "\uffeb\104\uffeb\001\002\000\106\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\016\ufff1\021\ufff1\023\ufff1\026\ufff1\051\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\075\ufff1\154\ufff1\155\ufff1" +
    "\156\ufff1\157\ufff1\160\ufff1\161\ufff1\162\ufff1\001\002\000" +
    "\106\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\021\ufff4\023" +
    "\ufff4\026\ufff4\051\ufff4\055\ufff4\056\ufff4\057\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\075\ufff4\154\ufff4\155\ufff4\156\ufff4\157\ufff4\160\ufff4" +
    "\161\ufff4\162\ufff4\001\002\000\106\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\016\ufff2\021\ufff2\023\ufff2\026\ufff2\051\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\072\ufff2\073\ufff2\075\ufff2\154\ufff2\155" +
    "\ufff2\156\ufff2\157\ufff2\160\ufff2\161\ufff2\162\ufff2\001\002" +
    "\000\004\075\u0247\001\002\000\064\004\074\005\101\006" +
    "\047\007\062\010\107\011\105\012\055\013\052\014\111" +
    "\016\054\021\051\023\053\026\103\051\075\071\u0188\073" +
    "\063\075\056\076\uffe7\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\117\001\002\000\004\076\u0249\001" +
    "\002\000\010\061\u0238\077\uffef\103\uffef\001\002\000\006" +
    "\077\214\103\u0243\001\002\000\106\002\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\021\ufff3\023\ufff3\026\ufff3\051\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\073\ufff3\075\ufff3\154\ufff3\155" +
    "\ufff3\156\ufff3\157\ufff3\160\ufff3\161\ufff3\162\ufff3\001\002" +
    "\000\010\101\u0136\121\uffbe\162\uffbe\001\002\000\004\075" +
    "\u0266\001\002\000\004\077\u025f\001\002\000\004\101\u0252" +
    "\001\002\000\012\077\uffec\101\u0252\152\uffea\153\uffea\001" +
    "\002\000\100\076\uff03\100\uff03\101\uff03\102\uff03\103\uff03" +
    "\104\uff03\121\uff03\122\uff03\123\uff03\124\uff03\125\uff03\126" +
    "\uff03\127\uff03\130\uff03\131\uff03\132\uff03\133\uff03\134\uff03" +
    "\135\uff03\136\uff03\137\uff03\140\uff03\141\uff03\142\uff03\143" +
    "\uff03\146\uff03\147\uff03\150\uff03\151\uff03\152\uff03\153\uff03" +
    "\001\002\000\044\051\075\073\063\075\135\102\u0139\134" +
    "\147\135\136\144\137\145\143\146\130\147\151\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\174\001" +
    "\002\000\100\076\ufeff\100\ufeff\101\u0252\102\ufeff\103\ufeff" +
    "\104\ufeff\121\ufeff\122\ufeff\123\ufeff\124\ufeff\125\ufeff\126" +
    "\ufeff\127\ufeff\130\ufeff\131\ufeff\132\ufeff\133\ufeff\134\ufeff" +
    "\135\ufeff\136\ufeff\137\ufeff\140\ufeff\141\ufeff\142\ufeff\143" +
    "\ufeff\146\ufeff\147\ufeff\150\ufeff\151\ufeff\152\ufeff\153\ufeff" +
    "\001\002\000\006\077\164\101\u0136\001\002\000\076\076" +
    "\uff04\100\uff04\102\uff04\103\uff04\104\uff04\121\uff04\122\uff04" +
    "\123\uff04\124\uff04\125\uff04\126\uff04\127\uff04\130\uff04\131" +
    "\uff04\132\uff04\133\uff04\134\uff04\135\uff04\136\uff04\137\uff04" +
    "\140\uff04\141\uff04\142\uff04\143\uff04\146\uff04\147\uff04\150" +
    "\uff04\151\uff04\152\uff04\153\uff04\001\002\000\076\076\uff05" +
    "\100\uff05\102\uff05\103\uff05\104\uff05\121\uff05\122\uff05\123" +
    "\uff05\124\uff05\125\uff05\126\uff05\127\uff05\130\uff05\131\uff05" +
    "\132\uff05\133\uff05\134\uff05\135\uff05\136\uff05\137\uff05\140" +
    "\uff05\141\uff05\142\uff05\143\uff05\146\uff05\147\uff05\150\uff05" +
    "\151\uff05\152\uff05\153\uff05\001\002\000\100\076\uff02\100" +
    "\uff02\101\uff02\102\uff02\103\uff02\104\uff02\121\uff02\122\uff02" +
    "\123\uff02\124\uff02\125\uff02\126\uff02\127\uff02\130\uff02\131" +
    "\uff02\132\uff02\133\uff02\134\uff02\135\uff02\136\uff02\137\uff02" +
    "\140\uff02\141\uff02\142\uff02\143\uff02\146\uff02\147\uff02\150" +
    "\uff02\151\uff02\152\uff02\153\uff02\001\002\000\100\076\uff00" +
    "\100\uff00\101\u0136\102\uff00\103\uff00\104\uff00\121\uff00\122" +
    "\uff00\123\uff00\124\uff00\125\uff00\126\uff00\127\uff00\130\uff00" +
    "\131\uff00\132\uff00\133\uff00\134\uff00\135\uff00\136\uff00\137" +
    "\uff00\140\uff00\141\uff00\142\uff00\143\uff00\146\uff00\147\uff00" +
    "\150\uff00\151\uff00\152\uff00\153\uff00\001\002\000\004\102" +
    "\u025a\001\002\000\100\076\uff01\100\uff01\101\uff01\102\uff01" +
    "\103\uff01\104\uff01\121\uff01\122\uff01\123\uff01\124\uff01\125" +
    "\uff01\126\uff01\127\uff01\130\uff01\131\uff01\132\uff01\133\uff01" +
    "\134\uff01\135\uff01\136\uff01\137\uff01\140\uff01\141\uff01\142" +
    "\uff01\143\uff01\146\uff01\147\uff01\150\uff01\151\uff01\152\uff01" +
    "\153\uff01\001\002\000\100\076\ufeff\100\ufeff\101\u0252\102" +
    "\ufeff\103\ufeff\104\ufeff\121\ufeff\122\ufeff\123\ufeff\124\ufeff" +
    "\125\ufeff\126\ufeff\127\ufeff\130\ufeff\131\ufeff\132\ufeff\133" +
    "\ufeff\134\ufeff\135\ufeff\136\ufeff\137\ufeff\140\ufeff\141\ufeff" +
    "\142\ufeff\143\ufeff\146\ufeff\147\ufeff\150\ufeff\151\ufeff\152" +
    "\ufeff\153\ufeff\001\002\000\006\077\164\101\u0136\001\002" +
    "\000\076\076\uff06\100\uff06\102\uff06\103\uff06\104\uff06\121" +
    "\uff06\122\uff06\123\uff06\124\uff06\125\uff06\126\uff06\127\uff06" +
    "\130\uff06\131\uff06\132\uff06\133\uff06\134\uff06\135\uff06\136" +
    "\uff06\137\uff06\140\uff06\141\uff06\142\uff06\143\uff06\146\uff06" +
    "\147\uff06\150\uff06\151\uff06\152\uff06\153\uff06\001\002\000" +
    "\076\076\uff07\100\uff07\102\uff07\103\uff07\104\uff07\121\uff07" +
    "\122\uff07\123\uff07\124\uff07\125\uff07\126\uff07\127\uff07\130" +
    "\uff07\131\uff07\132\uff07\133\uff07\134\uff07\135\uff07\136\uff07" +
    "\137\uff07\140\uff07\141\uff07\142\uff07\143\uff07\146\uff07\147" +
    "\uff07\150\uff07\151\uff07\152\uff07\153\uff07\001\002\000\042" +
    "\051\075\073\063\075\135\134\147\135\136\144\137\145" +
    "\143\146\130\147\151\154\116\155\046\156\114\157\113" +
    "\160\050\161\064\162\u0261\001\002\000\006\100\u0265\104" +
    "\210\001\002\000\124\075\177\100\ufee5\101\176\104\ufee5" +
    "\105\ufea7\106\ufea7\107\ufea7\110\ufea7\111\ufea7\112\ufea7\113" +
    "\ufea7\114\ufea7\115\ufea7\116\ufea7\117\ufea7\120\ufea7\121\ufee5" +
    "\122\ufee5\123\ufee5\124\ufee5\125\ufee5\126\ufee5\127\ufee5\130" +
    "\ufee5\131\ufee5\132\ufee5\133\ufee5\134\ufee5\135\ufee5\136\ufee5" +
    "\137\ufee5\140\ufee5\141\ufee5\142\ufee5\143\ufee5\146\ufee5\147" +
    "\ufee5\150\ufee5\151\u0262\152\175\153\200\001\002\000\044" +
    "\051\075\073\063\075\135\100\ufeeb\134\147\135\136\144" +
    "\137\145\143\146\130\147\151\154\116\155\046\156\114" +
    "\157\113\160\050\161\064\162\174\001\002\000\004\100" +
    "\u0264\001\002\000\100\076\ufe96\100\ufe96\101\ufe96\102\ufe96" +
    "\103\ufe96\104\ufe96\121\ufe96\122\ufe96\123\ufe96\124\ufe96\125" +
    "\ufe96\126\ufe96\127\ufe96\130\ufe96\131\ufe96\132\ufe96\133\ufe96" +
    "\134\ufe96\135\ufe96\136\ufe96\137\ufe96\140\ufe96\141\ufe96\142" +
    "\ufe96\143\ufe96\146\ufe96\147\ufe96\150\ufe96\151\ufe96\152\ufe96" +
    "\153\ufe96\001\002\000\100\076\ufe97\100\ufe97\101\ufe97\102" +
    "\ufe97\103\ufe97\104\ufe97\121\ufe97\122\ufe97\123\ufe97\124\ufe97" +
    "\125\ufe97\126\ufe97\127\ufe97\130\ufe97\131\ufe97\132\ufe97\133" +
    "\ufe97\134\ufe97\135\ufe97\136\ufe97\137\ufe97\140\ufe97\141\ufe97" +
    "\142\ufe97\143\ufe97\146\ufe97\147\ufe97\150\ufe97\151\ufe97\152" +
    "\ufe97\153\ufe97\001\002\000\004\162\u023a\001\002\000\004" +
    "\076\u0268\001\002\000\076\076\ufefc\100\ufefc\102\ufefc\103" +
    "\ufefc\104\ufefc\121\ufefc\122\ufefc\123\ufefc\124\ufefc\125\ufefc" +
    "\126\ufefc\127\ufefc\130\ufefc\131\ufefc\132\ufefc\133\ufefc\134" +
    "\ufefc\135\ufefc\136\ufefc\137\ufefc\140\ufefc\141\ufefc\142\ufefc" +
    "\143\ufefc\146\ufefc\147\ufefc\150\ufefc\151\ufefc\152\ufefc\153" +
    "\ufefc\001\002\000\010\101\u0136\121\uffbd\162\uffbd\001\002" +
    "\000\010\060\u026b\077\uffdf\103\uffdf\001\002\000\004\162" +
    "\u023a\001\002\000\006\077\u026d\103\u026e\001\002\000\004" +
    "\162\u0271\001\002\000\106\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\016\uffe1\021\uffe1\023\uffe1\026\uffe1\051\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\075\uffe1\154\uffe1\155\uffe1\156" +
    "\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\001\002\000\106" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\021\uffe2\023\uffe2" +
    "\026\uffe2\051\uffe2\055\uffe2\056\uffe2\057\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\075\uffe2\154\uffe2\155\uffe2\156\uffe2\157\uffe2\160\uffe2\161" +
    "\uffe2\162\uffe2\001\002\000\006\100\uffdc\162\uffdc\001\002" +
    "\000\004\151\u0275\001\002\000\006\100\u0274\162\u0271\001" +
    "\002\000\006\100\uffdd\162\uffdd\001\002\000\106\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\016\uffde\021\uffde\023\uffde\026\uffde" +
    "\051\uffde\055\uffde\056\uffde\057\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\075\uffde" +
    "\154\uffde\155\uffde\156\uffde\157\uffde\160\uffde\161\uffde\162" +
    "\uffde\001\002\000\004\077\u0276\001\002\000\062\004\074" +
    "\005\101\006\047\007\062\010\107\011\105\012\055\013" +
    "\052\014\111\016\054\021\051\023\053\026\103\051\075" +
    "\073\063\075\056\100\u027a\154\116\155\046\156\114\157" +
    "\113\160\050\161\064\162\117\001\002\000\006\100\uffdb" +
    "\162\uffdb\001\002\000\006\100\uffda\162\uffda\001\002\000" +
    "\062\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\016\uffd5\021\uffd5\023\uffd5\026" +
    "\uffd5\051\uffd5\073\uffd5\075\uffd5\100\uffd5\154\uffd5\155\uffd5" +
    "\156\uffd5\157\uffd5\160\uffd5\161\uffd5\162\uffd5\001\002\000" +
    "\006\100\uffd9\162\uffd9\001\002\000\062\004\074\005\101" +
    "\006\047\007\062\010\107\011\105\012\055\013\052\014" +
    "\111\016\054\021\051\023\053\026\103\051\075\073\063" +
    "\075\056\100\u0284\154\116\155\046\156\114\157\113\160" +
    "\050\161\064\162\117\001\002\000\004\162\122\001\002" +
    "\000\006\103\uffd2\104\uffd2\001\002\000\006\103\u0281\104" +
    "\u0280\001\002\000\010\101\126\103\uffd1\104\uffd1\001\002" +
    "\000\004\162\122\001\002\000\062\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\016\uffd4\021\uffd4\023\uffd4\026\uffd4\051\uffd4\073\uffd4\075" +
    "\uffd4\100\uffd4\154\uffd4\155\uffd4\156\uffd4\157\uffd4\160\uffd4" +
    "\161\uffd4\162\uffd4\001\002\000\006\103\uffd3\104\uffd3\001" +
    "\002\000\062\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\021\uffd6\023" +
    "\uffd6\026\uffd6\051\uffd6\073\uffd6\075\uffd6\100\uffd6\154\uffd6" +
    "\155\uffd6\156\uffd6\157\uffd6\160\uffd6\161\uffd6\162\uffd6\001" +
    "\002\000\110\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\021" +
    "\uffd7\023\uffd7\026\uffd7\051\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\073\uffd7\075\uffd7\100\uffd7\154\uffd7\155\uffd7\156\uffd7" +
    "\157\uffd7\160\uffd7\161\uffd7\162\uffd7\001\002\000\010\077" +
    "\uffe0\103\uffe0\104\u023d\001\002\000\006\060\u026b\077\uffdf" +
    "\001\002\000\004\077\u0288\001\002\000\060\004\074\005" +
    "\101\006\047\007\062\010\107\011\105\012\055\013\052" +
    "\014\111\016\054\021\051\023\053\026\103\051\075\073" +
    "\063\075\056\154\116\155\046\156\114\157\113\160\050" +
    "\161\064\162\117\001\002\000\106\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\016\uffd8\021\uffd8\023\uffd8\026\uffd8\051\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\075\uffd8\154\uffd8\155" +
    "\uffd8\156\uffd8\157\uffd8\160\uffd8\161\uffd8\162\uffd8\001\002" +
    "\000\004\076\u028b\001\002\000\022\076\uff0b\101\uff0b\103" +
    "\uff0b\104\uff0b\146\uff0b\147\uff0b\152\uff0b\153\uff0b\001\002" +
    "\000\060\004\074\005\101\006\047\007\062\010\107\011" +
    "\105\012\055\013\052\014\111\016\054\021\051\023\053" +
    "\026\103\051\075\073\063\075\056\154\116\155\046\156" +
    "\114\157\113\160\050\161\064\162\117\001\002\000\004" +
    "\121\u028e\001\002\000\012\101\uffb7\121\uffb7\153\u028f\162" +
    "\uffb7\001\002\000\006\017\u0290\020\u0291\001\002\000\010" +
    "\101\uffb6\121\uffb6\162\uffb6\001\002\000\010\101\uffb5\121" +
    "\uffb5\162\uffb5\001\002\000\004\016\u029f\001\002\000\004" +
    "\122\u0299\001\002\000\004\016\u0295\001\002\000\004\122" +
    "\u0296\001\002\000\060\004\074\005\101\006\047\007\062" +
    "\010\107\011\105\012\055\013\052\014\111\016\054\021" +
    "\051\023\053\026\103\051\075\073\063\075\056\154\116" +
    "\155\046\156\114\157\113\160\050\161\064\162\117\001" +
    "\002\000\004\121\u0298\001\002\000\010\101\uffb9\121\uffb9" +
    "\162\uffb9\001\002\000\060\004\074\005\101\006\047\007" +
    "\062\010\107\011\105\012\055\013\052\014\111\016\054" +
    "\021\051\023\053\026\103\051\075\073\063\075\056\154" +
    "\116\155\046\156\114\157\113\160\050\161\064\162\117" +
    "\001\002\000\004\121\u029b\001\002\000\012\101\uffb8\121" +
    "\uffb8\153\u029c\162\uffb8\001\002\000\006\017\u029d\020\u029e" +
    "\001\002\000\010\101\uffb4\121\uffb4\162\uffb4\001\002\000" +
    "\010\101\uffb3\121\uffb3\162\uffb3\001\002\000\004\122\u02a0" +
    "\001\002\000\060\004\074\005\101\006\047\007\062\010" +
    "\107\011\105\012\055\013\052\014\111\016\054\021\051" +
    "\023\053\026\103\051\075\073\063\075\056\154\116\155" +
    "\046\156\114\157\113\160\050\161\064\162\117\001\002" +
    "\000\004\121\u02a2\001\002\000\010\101\uffba\121\uffba\162" +
    "\uffba\001\002\000\102\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0\021" +
    "\uffa0\023\uffa0\026\uffa0\051\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\073" +
    "\uffa0\075\uffa0\154\uffa0\155\uffa0\156\uffa0\157\uffa0\160\uffa0" +
    "\161\uffa0\162\uffa0\001\002\000\006\136\ufff6\162\ufff6\001" +
    "\002\000\006\136\u02a6\162\u02a7\001\002\000\006\136\ufff5" +
    "\162\ufff5\001\002\000\106\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\016\ufff7\021\ufff7\023\ufff7\026\ufff7\051\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\073\ufff7\075\ufff7\154\ufff7\155\ufff7\156" +
    "\ufff7\157\ufff7\160\ufff7\161\ufff7\162\ufff7\001\002\000\106" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\021\ufffd\023\ufffd" +
    "\026\ufffd\051\ufffd\055\ufffd\056\ufffd\057\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd" +
    "\075\ufffd\154\ufffd\155\ufffd\156\ufffd\157\ufffd\160\ufffd\161" +
    "\ufffd\162\ufffd\001\002\000\110\002\uffa6\004\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\016\uffa6\021\uffa6\023\uffa6\026\uffa6\051\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\075\uffa6\154\uffa6" +
    "\155\uffa6\156\uffa6\157\uffa6\160\uffa6\161\uffa6\162\uffa6\001" +
    "\002\000\006\103\uffea\153\uffea\001\002\000\006\103\u02ac" +
    "\153\u02ad\001\002\000\110\002\uffa4\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\016\uffa4\021\uffa4\023\uffa4\026\uffa4\051\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\075\uffa4\154\uffa4\155" +
    "\uffa4\156\uffa4\157\uffa4\160\uffa4\161\uffa4\162\uffa4\001\002" +
    "\000\006\136\u02ae\162\u0241\001\002\000\004\103\u02af\001" +
    "\002\000\110\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\021" +
    "\uffa3\023\uffa3\026\uffa3\051\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\075\uffa3\154\uffa3\155\uffa3\156\uffa3" +
    "\157\uffa3\160\uffa3\161\uffa3\162\uffa3\001\002\000\006\103" +
    "\u02b1\160\u02b2\001\002\000\114\002\uffac\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\016\uffac\021\uffac\023\uffac\026\uffac\051\uffac\055\uffac" +
    "\056\uffac\057\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\075\uffac\154\uffac\155\uffac\156\uffac\157\uffac\160\uffac\161" +
    "\uffac\162\uffac\001\002\000\004\103\u02b3\001\002\000\114" +
    "\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\016\uffad\021\uffad\023\uffad" +
    "\026\uffad\051\uffad\055\uffad\056\uffad\057\uffad\062\uffad\063" +
    "\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071\uffad" +
    "\072\uffad\073\uffad\074\uffad\075\uffad\154\uffad\155\uffad\156" +
    "\uffad\157\uffad\160\uffad\161\uffad\162\uffad\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02b1\000\014\003\006\042\007\045\005\046\010\047" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\013\044\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\050\023\051\022\052\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u02aa\001\001\000" +
    "\004\052\u02a8\001\001\000\026\004\041\005\026\006\036" +
    "\010\043\021\027\027\025\053\042\054\040\055\031\056" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\u02a7\010\043\021\027\027\025\053\042\054\040\055" +
    "\031\056\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u02a4\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u02a2\001\001\000\002\001" +
    "\001\000\044\035\117\036\077\037\075\040\064\041\067" +
    "\155\071\156\111\157\060\164\056\165\076\166\103\167" +
    "\072\170\114\171\105\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\110\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\105\174\155\175\156\176" +
    "\172\177\151\200\164\201\130\202\157\203\141\204\167" +
    "\205\132\206\160\207\170\210\137\211\162\212\140\213" +
    "\165\214\133\215\161\216\154\217\166\220\143\222\131" +
    "\224\u0289\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\163\u0268\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\u023a\020\u024d\036\u024e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\163\u024b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\035\u0230\036\077\037\075\040\064" +
    "\041\067\155\071\156\111\157\060\164\056\165\076\166" +
    "\103\167\072\170\114\171\105\226\057\227\101\230\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\163\u0133\001\001\000\010\057\122\060\120\063" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\114\064\152\065\153\155" +
    "\144\156\111\157\060\164\056\165\076\166\103\167\145" +
    "\170\171\171\105\174\155\175\156\176\172\177\151\200" +
    "\164\201\130\202\157\203\141\204\167\205\132\206\160" +
    "\207\170\210\137\211\162\212\140\213\165\214\133\215" +
    "\161\216\154\217\166\220\143\222\131\224\147\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\072\170\114\171\105\174\155\175\156\176" +
    "\172\177\u022b\200\164\201\130\202\157\203\141\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\004\221" +
    "\u0226\001\001\000\002\001\001\000\002\001\001\000\112" +
    "\036\u0218\155\144\156\111\157\060\164\056\165\076\166" +
    "\103\167\145\170\171\171\105\174\155\175\156\176\172" +
    "\177\151\200\164\201\130\202\157\203\141\204\167\205" +
    "\132\206\160\207\170\210\137\211\162\212\140\213\165" +
    "\214\133\215\161\216\154\217\166\220\143\222\131\224" +
    "\u0217\226\057\227\101\230\070\001\001\000\052\155\144" +
    "\156\111\157\060\164\056\165\076\166\103\167\072\170" +
    "\114\171\105\174\155\175\156\176\172\177\u0216\200\164" +
    "\201\130\202\157\203\141\226\057\227\101\230\070\001" +
    "\001\000\052\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\072\170\114\171\105\174\155\175\156\176" +
    "\172\177\u0215\200\164\201\130\202\157\203\141\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\155\144\156\111\157\060" +
    "\164\056\165\076\166\103\167\072\170\114\171\105\174" +
    "\155\175\156\176\172\177\u0214\200\164\201\130\202\157" +
    "\203\141\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\155\144" +
    "\156\111\157\060\164\056\165\076\166\103\167\072\170" +
    "\114\171\105\174\155\175\156\176\172\177\u0213\200\164" +
    "\201\130\202\157\203\141\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\052\155\144\156\111\157\060" +
    "\164\056\165\076\166\103\167\072\170\114\171\105\174" +
    "\155\175\156\176\172\177\u0212\200\164\201\130\202\157" +
    "\203\141\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\120" +
    "\064\u0205\065\153\066\u0206\067\u0204\155\144\156\111\157" +
    "\060\164\056\165\076\166\103\167\145\170\171\171\105" +
    "\174\155\175\156\176\172\177\151\200\164\201\130\202" +
    "\157\203\141\204\167\205\132\206\160\207\170\210\137" +
    "\211\162\212\140\213\165\214\133\215\161\216\154\217" +
    "\166\220\143\222\131\224\147\226\057\227\101\230\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\110\155\144\156\111\157\060\164\056\165\076\166\103" +
    "\167\145\170\171\171\105\174\155\175\156\176\172\177" +
    "\151\200\164\201\130\202\157\203\141\204\167\205\132" +
    "\206\160\207\170\210\137\211\162\212\140\213\165\214" +
    "\133\215\161\216\154\217\166\220\143\222\131\224\u0137" +
    "\226\057\227\101\230\070\001\001\000\114\155\144\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\105\172\u01de\173\206\174\155\175\156\176\172\177" +
    "\151\200\164\201\130\202\157\203\141\204\167\205\132" +
    "\206\160\207\170\210\137\211\162\212\140\213\165\214" +
    "\133\215\161\216\154\217\166\220\143\222\131\224\205" +
    "\226\057\227\101\230\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\114" +
    "\155\144\156\111\157\060\164\056\165\076\166\103\167" +
    "\145\170\171\171\105\172\204\173\206\174\155\175\156" +
    "\176\172\177\151\200\164\201\130\202\157\203\141\204" +
    "\167\205\132\206\160\207\170\210\137\211\162\212\140" +
    "\213\165\214\133\215\161\216\154\217\166\220\143\222" +
    "\131\224\205\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\110\155" +
    "\144\156\111\157\060\164\056\165\076\166\103\167\145" +
    "\170\171\171\105\174\155\175\156\176\172\177\151\200" +
    "\164\201\130\202\157\203\141\204\167\205\132\206\160" +
    "\207\170\210\137\211\162\212\140\213\165\214\133\215" +
    "\161\216\154\217\166\220\143\222\131\224\210\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\070\214\071\215\001\001\000\152\035\250" +
    "\036\077\037\075\040\064\041\067\071\231\072\265\073" +
    "\217\074\251\076\222\077\241\100\304\102\252\103\245" +
    "\104\274\106\266\110\220\120\306\121\303\125\242\126" +
    "\301\127\224\130\234\131\260\132\230\133\273\134\236" +
    "\135\272\137\243\140\225\147\262\150\244\151\307\155" +
    "\270\156\111\157\060\164\056\165\076\166\103\167\145" +
    "\170\171\171\267\174\233\175\305\176\240\200\302\201" +
    "\232\220\264\222\131\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\146\035\250\036\077\037\075\040\064\041\067\071\231" +
    "\074\251\076\u01b2\077\241\100\304\102\252\103\245\104" +
    "\274\106\266\110\220\120\306\121\303\125\242\126\301" +
    "\127\224\130\234\131\260\132\230\133\273\134\236\135" +
    "\272\137\243\140\225\147\262\150\244\151\307\155\270" +
    "\156\111\157\060\164\056\165\076\166\103\167\145\170" +
    "\171\171\267\174\233\175\305\176\240\200\302\201\232" +
    "\220\264\222\131\226\057\227\101\230\070\001\001\000" +
    "\002\001\001\000\004\163\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\035\u01d9\036\077\037\075\040\064\041\067\155\071" +
    "\156\111\157\060\164\056\165\076\166\103\167\072\170" +
    "\114\171\105\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\155\u0110\156\u01d0\157\060\164" +
    "\056\165\076\166\103\167\072\170\114\171\105\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\u0153\001" +
    "\001\000\010\061\u01ba\062\u01b9\063\u01bb\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\130\071" +
    "\231\074\251\100\u019f\102\252\103\245\104\274\106\266" +
    "\110\220\120\306\121\303\125\242\126\301\127\224\130" +
    "\234\131\260\132\230\133\273\134\236\135\272\137\243" +
    "\140\225\147\262\150\244\151\307\155\356\156\111\157" +
    "\060\164\056\165\076\166\103\167\145\170\171\171\267" +
    "\174\233\175\305\176\240\200\302\201\232\220\264\222" +
    "\131\226\057\227\101\230\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\112\155\144\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\105\174\155" +
    "\175\156\176\172\177\151\200\164\201\130\202\157\203" +
    "\141\204\167\205\132\206\160\207\170\210\137\211\162" +
    "\212\140\213\165\214\133\215\161\216\154\217\166\220" +
    "\143\222\131\223\u0195\224\u0144\226\057\227\101\230\070" +
    "\001\001\000\002\001\001\000\004\136\u0193\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u0183\001\001\000\004\136" +
    "\u0180\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\127\317\152\321\153\320\154" +
    "\314\155\316\156\111\157\060\164\056\165\076\166\103" +
    "\167\145\170\171\171\105\222\312\226\057\227\101\230" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\155\144\156\111\157\060\164\056\165" +
    "\076\166\103\167\145\170\171\171\105\174\155\175\156" +
    "\176\172\177\151\200\164\201\130\202\157\203\141\204" +
    "\167\205\132\206\160\207\170\210\137\211\162\212\140" +
    "\213\165\214\133\215\161\216\154\217\166\220\143\222" +
    "\131\224\350\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\127" +
    "\317\153\324\154\314\155\316\156\111\157\060\164\056" +
    "\165\076\166\103\167\145\170\171\171\105\222\312\226" +
    "\057\227\101\230\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\114\155\144\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\105\172\334" +
    "\173\206\174\155\175\156\176\172\177\151\200\164\201" +
    "\130\202\157\203\141\204\167\205\132\206\160\207\170" +
    "\210\137\211\162\212\140\213\165\214\133\215\161\216" +
    "\154\217\166\220\143\222\131\224\205\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\110\155\144\156\111\157\060\164\056\165\076\166\103" +
    "\167\145\170\171\171\105\174\155\175\156\176\172\177" +
    "\151\200\164\201\130\202\157\203\141\204\167\205\132" +
    "\206\160\207\170\210\137\211\162\212\140\213\165\214" +
    "\133\215\161\216\154\217\166\220\143\222\131\224\337" +
    "\226\057\227\101\230\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\070\342\071\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\114\155" +
    "\144\156\111\157\060\164\056\165\076\166\103\167\145" +
    "\170\171\171\105\172\346\173\206\174\155\175\156\176" +
    "\172\177\151\200\164\201\130\202\157\203\141\204\167" +
    "\205\132\206\160\207\170\210\137\211\162\212\140\213" +
    "\165\214\133\215\161\216\154\217\166\220\143\222\131" +
    "\224\205\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\127\317\154\353\155\316\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\105\222\312" +
    "\226\057\227\101\230\070\001\001\000\002\001\001\000" +
    "\130\071\231\074\251\100\357\102\252\103\245\104\274" +
    "\106\266\110\220\120\306\121\303\125\242\126\301\127" +
    "\224\130\234\131\260\132\230\133\273\134\236\135\272" +
    "\137\243\140\225\147\262\150\244\151\307\155\356\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\267\174\233\175\305\176\240\200\302\201\232\220" +
    "\264\222\131\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\155\144" +
    "\156\111\157\060\164\056\165\076\166\103\167\145\170" +
    "\171\171\105\174\155\175\156\176\172\177\151\200\164" +
    "\201\130\202\157\203\141\204\167\205\132\206\160\207" +
    "\170\210\137\211\162\212\140\213\165\214\133\215\161" +
    "\216\154\217\166\220\143\222\131\224\364\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\070\370\071\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\130\071\231\074\251" +
    "\100\u0109\102\252\103\245\104\274\106\266\110\220\120" +
    "\306\121\303\125\242\126\301\127\224\130\234\131\260" +
    "\132\230\133\273\134\236\135\272\137\243\140\225\147" +
    "\262\150\244\151\307\155\356\156\111\157\060\164\056" +
    "\165\076\166\103\167\145\170\171\171\267\174\233\175" +
    "\305\176\240\200\302\201\232\220\264\222\131\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\155\144" +
    "\156\111\157\060\164\056\165\076\166\103\167\145\170" +
    "\171\171\105\174\155\175\156\176\172\177\151\200\164" +
    "\201\130\202\157\203\141\204\167\205\132\206\160\207" +
    "\170\210\137\211\162\212\140\213\165\214\133\215\161" +
    "\216\154\217\166\220\143\222\131\224\u0100\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\110\155\144\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\105\174\155" +
    "\175\156\176\172\177\151\200\164\201\130\202\157\203" +
    "\141\204\167\205\132\206\160\207\170\210\137\211\162" +
    "\212\140\213\165\214\133\215\161\216\154\217\166\220" +
    "\143\222\131\224\u0104\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\070\u0107\071" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\130\071\231\074\251\100\u010b\102\252\103" +
    "\245\104\274\106\266\110\220\120\306\121\303\125\242" +
    "\126\301\127\224\130\234\131\260\132\230\133\273\134" +
    "\236\135\272\137\243\140\225\147\262\150\244\151\307" +
    "\155\356\156\111\157\060\164\056\165\076\166\103\167" +
    "\145\170\171\171\267\174\233\175\305\176\240\200\302" +
    "\201\232\220\264\222\131\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\155\u0110" +
    "\156\111\157\060\164\056\165\076\166\u010f\167\072\170" +
    "\114\171\105\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\110\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\105\174\155\175\156\176" +
    "\172\177\151\200\164\201\130\202\157\203\141\204\167" +
    "\205\132\206\160\207\170\210\137\211\162\212\140\213" +
    "\165\214\133\215\161\216\154\217\166\220\143\222\131" +
    "\224\u0113\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\142\071\231\074\251\100\u0120\101\u011d\102\u011a" +
    "\103\245\104\274\105\u0116\106\266\107\u011c\110\220\111" +
    "\u0117\120\306\121\303\122\u011f\125\242\126\301\127\224" +
    "\130\234\131\260\132\230\133\273\134\236\135\272\137" +
    "\243\140\225\147\262\150\244\151\307\155\356\156\111" +
    "\157\060\164\056\165\076\166\103\167\145\170\171\171" +
    "\267\174\233\175\305\176\240\200\302\201\232\220\264" +
    "\222\131\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u0153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\110\155\144\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\105\174\155\175\156\176\172\177\151\200\164\201" +
    "\130\202\157\203\141\204\167\205\132\206\160\207\170" +
    "\210\137\211\162\212\140\213\165\214\133\215\161\216" +
    "\154\217\166\220\143\222\131\224\u0122\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\142\071\231\074" +
    "\251\100\u0120\101\u0124\102\u011a\103\245\104\274\105\u0116" +
    "\106\266\107\u011c\110\220\111\u0117\120\306\121\303\122" +
    "\u011f\125\242\126\301\127\224\130\234\131\260\132\230" +
    "\133\273\134\236\135\272\137\243\140\225\147\262\150" +
    "\244\151\307\155\356\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\267\174\233\175\305\176" +
    "\240\200\302\201\232\220\264\222\131\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\142\071\231\074" +
    "\251\100\u0127\101\u0126\102\u011a\103\245\104\274\105\u0116" +
    "\106\266\107\u011c\110\220\111\u0117\120\306\121\303\122" +
    "\u011f\125\242\126\301\127\224\130\234\131\260\132\230" +
    "\133\273\134\236\135\272\137\243\140\225\147\262\150" +
    "\244\151\307\155\356\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\267\174\233\175\305\176" +
    "\240\200\302\201\232\220\264\222\131\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\130\071\231\074\251\100\u0127\102\252\103\245\104\274" +
    "\106\266\110\220\120\306\121\303\125\242\126\301\127" +
    "\224\130\234\131\260\132\230\133\273\134\236\135\272" +
    "\137\243\140\225\147\262\150\244\151\307\155\356\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\267\174\233\175\305\176\240\200\302\201\232\220" +
    "\264\222\131\226\057\227\101\230\070\001\001\000\074" +
    "\035\250\036\077\037\075\040\064\041\067\077\u012b\112" +
    "\u012d\113\u012f\116\u012e\132\u012a\155\u012c\156\111\157\060" +
    "\164\056\165\076\166\103\167\145\170\171\171\267\174" +
    "\233\175\305\176\240\200\302\201\232\220\264\222\131" +
    "\226\057\227\101\230\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\163\u0133\001\001\000" +
    "\002\001\001\000\110\155\144\156\111\157\060\164\056" +
    "\165\076\166\103\167\145\170\171\171\105\174\155\175" +
    "\156\176\172\177\151\200\164\201\130\202\157\203\141" +
    "\204\167\205\132\206\160\207\170\210\137\211\162\212" +
    "\140\213\165\214\133\215\161\216\154\217\166\220\143" +
    "\222\131\224\u0137\226\057\227\101\230\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\155\144\156\111\157\060" +
    "\164\056\165\076\166\103\167\145\170\171\171\105\172" +
    "\u013c\173\206\174\155\175\156\176\172\177\151\200\164" +
    "\201\130\202\157\203\141\204\167\205\132\206\160\207" +
    "\170\210\137\211\162\212\140\213\165\214\133\215\161" +
    "\216\154\217\166\220\143\222\131\224\205\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\132\u013f\155\u0141\156\111\157\060\164\056\165" +
    "\076\166\103\167\145\170\171\171\267\174\233\175\305" +
    "\176\240\200\302\201\232\220\264\222\131\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\112\155\144\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\105\174\155\175\156\176\172\177\151\200\164\201" +
    "\130\202\157\203\141\204\167\205\132\206\160\207\170" +
    "\210\137\211\162\212\140\213\165\214\133\215\161\216" +
    "\154\217\166\220\143\222\131\223\u0145\224\u0144\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\114\u0148\115\u0147\116\u0149\132\u012a\155\u0141" +
    "\156\111\157\060\164\056\165\076\166\103\167\145\170" +
    "\171\171\267\174\233\175\305\176\240\200\302\201\232" +
    "\220\264\222\131\226\057\227\101\230\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\142" +
    "\071\231\074\251\100\u014c\101\u014b\102\u011a\103\245\104" +
    "\274\105\u0116\106\266\107\u011c\110\220\111\u0117\120\306" +
    "\121\303\122\u011f\125\242\126\301\127\224\130\234\131" +
    "\260\132\230\133\273\134\236\135\272\137\243\140\225" +
    "\147\262\150\244\151\307\155\356\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\267\174\233" +
    "\175\305\176\240\200\302\201\232\220\264\222\131\226" +
    "\057\227\101\230\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\163\u0150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\035\250\036\077\037" +
    "\075\040\064\041\067\077\u012b\112\u0155\113\u012f\116\u012e" +
    "\132\u012a\155\u012c\156\111\157\060\164\056\165\076\166" +
    "\103\167\145\170\171\171\267\174\233\175\305\176\240" +
    "\200\302\201\232\220\264\222\131\226\057\227\101\230" +
    "\070\001\001\000\002\001\001\000\112\155\144\156\111" +
    "\157\060\164\056\165\076\166\103\167\145\170\171\171" +
    "\105\174\155\175\156\176\172\177\151\200\164\201\130" +
    "\202\157\203\141\204\167\205\132\206\160\207\170\210" +
    "\137\211\162\212\140\213\165\214\133\215\161\216\154" +
    "\217\166\220\143\222\131\223\u0157\224\u0144\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\060\114\u0159" +
    "\115\u0147\116\u0149\132\u012a\155\u0141\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\267\174\233" +
    "\175\305\176\240\200\302\201\232\220\264\222\131\226" +
    "\057\227\101\230\070\001\001\000\002\001\001\000\142" +
    "\071\231\074\251\100\u015d\101\u015c\102\u011a\103\245\104" +
    "\274\105\u0116\106\266\107\u011c\110\220\111\u0117\120\306" +
    "\121\303\122\u011f\125\242\126\301\127\224\130\234\131" +
    "\260\132\230\133\273\134\236\135\272\137\243\140\225" +
    "\147\262\150\244\151\307\155\356\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\267\174\233" +
    "\175\305\176\240\200\302\201\232\220\264\222\131\226" +
    "\057\227\101\230\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\112\155\144\156\111\157" +
    "\060\164\056\165\076\166\103\167\145\170\171\171\105" +
    "\173\u015f\174\155\175\156\176\172\177\151\200\164\201" +
    "\130\202\157\203\141\204\167\205\132\206\160\207\170" +
    "\210\137\211\162\212\140\213\165\214\133\215\161\216" +
    "\154\217\166\220\143\222\131\224\205\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\142\071\231\074" +
    "\251\100\u0162\101\u0161\102\u011a\103\245\104\274\105\u0116" +
    "\106\266\107\u011c\110\220\111\u0117\120\306\121\303\122" +
    "\u011f\125\242\126\301\127\224\130\234\131\260\132\230" +
    "\133\273\134\236\135\272\137\243\140\225\147\262\150" +
    "\244\151\307\155\356\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\267\174\233\175\305\176" +
    "\240\200\302\201\232\220\264\222\131\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\112\075\u0165\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\105\174\155\175\156\176" +
    "\172\177\151\200\164\201\130\202\157\203\141\204\167" +
    "\205\132\206\160\207\170\210\137\211\162\212\140\213" +
    "\165\214\133\215\161\216\154\217\166\220\143\222\131" +
    "\224\u0164\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\110\155\144\156\111\157\060" +
    "\164\056\165\076\166\103\167\145\170\171\171\105\174" +
    "\155\175\156\176\172\177\151\200\164\201\130\202\157" +
    "\203\141\204\167\205\132\206\160\207\170\210\137\211" +
    "\162\212\140\213\165\214\133\215\161\216\154\217\166" +
    "\220\143\222\131\224\u0169\226\057\227\101\230\070\001" +
    "\001\000\004\071\u0168\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\155\144\156\111\157\060\164\056\165" +
    "\076\166\103\167\145\170\171\171\105\174\155\175\156" +
    "\176\172\177\151\200\164\201\130\202\157\203\141\204" +
    "\167\205\132\206\160\207\170\210\137\211\162\212\140" +
    "\213\165\214\133\215\161\216\154\217\166\220\143\222" +
    "\131\224\u016b\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\142\071\231\074\251\100\u016e\101\u016d\102" +
    "\u011a\103\245\104\274\105\u0116\106\266\107\u011c\110\220" +
    "\111\u0117\120\306\121\303\122\u011f\125\242\126\301\127" +
    "\224\130\234\131\260\132\230\133\273\134\236\135\272" +
    "\137\243\140\225\147\262\150\244\151\307\155\356\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\267\174\233\175\305\176\240\200\302\201\232\220" +
    "\264\222\131\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\041\u0172\123\u0170\124" +
    "\u0174\155\u0110\156\111\157\060\164\056\165\u0173\166\103" +
    "\167\072\170\114\171\105\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\155\u0110\156\u0177\157\060\164\056\165\076\166\103" +
    "\167\072\170\114\171\105\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\110\155\144\156\111\157\060" +
    "\164\056\165\076\166\103\167\145\170\171\171\105\174" +
    "\155\175\156\176\172\177\151\200\164\201\130\202\157" +
    "\203\141\204\167\205\132\206\160\207\170\210\137\211" +
    "\162\212\140\213\165\214\133\215\161\216\154\217\166" +
    "\220\143\222\131\224\u0179\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\041\u0172" +
    "\124\u017f\155\u0110\156\111\157\060\164\056\165\u0173\166" +
    "\103\167\072\170\114\171\105\226\057\227\101\230\070" +
    "\001\001\000\142\071\231\074\251\100\u017e\101\u017d\102" +
    "\u011a\103\245\104\274\105\u0116\106\266\107\u011c\110\220" +
    "\111\u0117\120\306\121\303\122\u011f\125\242\126\301\127" +
    "\224\130\234\131\260\132\230\133\273\134\236\135\272" +
    "\137\243\140\225\147\262\150\244\151\307\155\356\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\267\174\233\175\305\176\240\200\302\201\232\220" +
    "\264\222\131\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\015\u0189\016" +
    "\u0188\035\u018a\036\077\037\075\040\064\041\067\155\071" +
    "\156\111\157\060\164\056\165\076\166\103\167\072\170" +
    "\114\171\105\226\057\227\101\230\070\001\001\000\044" +
    "\035\u0190\036\077\037\075\040\064\041\067\155\071\156" +
    "\111\157\060\164\056\165\076\166\103\167\072\170\114" +
    "\171\105\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\u018b\001\001\000\002" +
    "\001\001\000\046\016\u018f\035\u018a\036\077\037\075\040" +
    "\064\041\067\155\071\156\111\157\060\164\056\165\076" +
    "\166\103\167\072\170\114\171\105\226\057\227\101\230" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u0191\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\035\250\036\077\037" +
    "\075\040\064\041\067\077\u012b\112\u0198\113\u012f\116\u012e" +
    "\132\u012a\155\u012c\156\111\157\060\164\056\165\076\166" +
    "\103\167\145\170\171\171\267\174\233\175\305\176\240" +
    "\200\302\201\232\220\264\222\131\226\057\227\101\230" +
    "\070\001\001\000\002\001\001\000\112\155\144\156\111" +
    "\157\060\164\056\165\076\166\103\167\145\170\171\171" +
    "\105\174\155\175\156\176\172\177\151\200\164\201\130" +
    "\202\157\203\141\204\167\205\132\206\160\207\170\210" +
    "\137\211\162\212\140\213\165\214\133\215\161\216\154" +
    "\217\166\220\143\222\131\223\u019a\224\u0144\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\060\114\u019c" +
    "\115\u0147\116\u0149\132\u012a\155\u0141\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\267\174\233" +
    "\175\305\176\240\200\302\201\232\220\264\222\131\226" +
    "\057\227\101\230\070\001\001\000\002\001\001\000\130" +
    "\071\231\074\251\100\u014c\102\252\103\245\104\274\106" +
    "\266\110\220\120\306\121\303\125\242\126\301\127\224" +
    "\130\234\131\260\132\230\133\273\134\236\135\272\137" +
    "\243\140\225\147\262\150\244\151\307\155\356\156\111" +
    "\157\060\164\056\165\076\166\103\167\145\170\171\171" +
    "\267\174\233\175\305\176\240\200\302\201\232\220\264" +
    "\222\131\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\155\144" +
    "\156\111\157\060\164\056\165\076\166\103\167\145\170" +
    "\171\171\105\174\155\175\156\176\172\177\151\200\164" +
    "\201\130\202\157\203\141\204\167\205\132\206\160\207" +
    "\170\210\137\211\162\212\140\213\165\214\133\215\161" +
    "\216\154\217\166\220\143\222\131\224\u01a2\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\110\155\144\156\111\157\060\164\056\165\076\166" +
    "\103\167\145\170\171\171\105\174\155\175\156\176\172" +
    "\177\151\200\164\201\130\202\157\203\141\204\167\205" +
    "\132\206\160\207\170\210\137\211\162\212\140\213\165" +
    "\214\133\215\161\216\154\217\166\220\143\222\131\224" +
    "\u01a5\226\057\227\101\230\070\001\001\000\002\001\001" +
    "\000\004\141\u01a8\001\001\000\014\142\u01a9\143\u01ab\144" +
    "\u01ac\145\u01af\146\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\144\u01b6\145\u01af\146" +
    "\u01ad\001\001\000\002\001\001\000\002\001\001\000\112" +
    "\155\144\156\111\157\060\164\056\165\076\166\103\167" +
    "\145\170\171\171\105\174\155\175\156\176\172\177\151" +
    "\200\164\201\130\202\157\203\141\204\167\205\132\206" +
    "\160\207\170\210\137\211\162\212\140\213\165\214\133" +
    "\215\161\216\154\217\166\220\143\222\131\224\u01b4\225" +
    "\u01b3\226\057\227\101\230\070\001\001\000\152\035\250" +
    "\036\077\037\075\040\064\041\067\071\231\073\u01b0\074" +
    "\251\076\222\077\241\100\304\102\252\103\245\104\274" +
    "\106\266\110\220\120\306\121\303\125\242\126\301\127" +
    "\224\130\234\131\260\132\230\133\273\134\236\135\272" +
    "\137\243\140\225\146\u01b1\147\262\150\244\151\307\155" +
    "\270\156\111\157\060\164\056\165\076\166\103\167\145" +
    "\170\171\171\267\174\233\175\305\176\240\200\302\201" +
    "\232\220\264\222\131\226\057\227\101\230\070\001\001" +
    "\000\146\035\250\036\077\037\075\040\064\041\067\071" +
    "\231\074\251\076\u01b2\077\241\100\304\102\252\103\245" +
    "\104\274\106\266\110\220\120\306\121\303\125\242\126" +
    "\301\127\224\130\234\131\260\132\230\133\273\134\236" +
    "\135\272\137\243\140\225\147\262\150\244\151\307\155" +
    "\270\156\111\157\060\164\056\165\076\166\103\167\145" +
    "\170\171\171\267\174\233\175\305\176\240\200\302\201" +
    "\232\220\264\222\131\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\064\u01bd\065\153\155\144" +
    "\156\111\157\060\164\056\165\076\166\103\167\145\170" +
    "\171\171\105\174\155\175\156\176\172\177\151\200\164" +
    "\201\130\202\157\203\141\204\167\205\132\206\160\207" +
    "\170\210\137\211\162\212\140\213\165\214\133\215\161" +
    "\216\154\217\166\220\143\222\131\224\147\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\006\062\u01bf" +
    "\063\u01bb\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\035\250\036\077\037\075\040\064\041\067\077\u012b" +
    "\112\u01c2\113\u012f\116\u012e\132\u012a\155\u012c\156\111\157" +
    "\060\164\056\165\076\166\103\167\145\170\171\171\267" +
    "\174\233\175\305\176\240\200\302\201\232\220\264\222" +
    "\131\226\057\227\101\230\070\001\001\000\002\001\001" +
    "\000\112\155\144\156\111\157\060\164\056\165\076\166" +
    "\103\167\145\170\171\171\105\174\155\175\156\176\172" +
    "\177\151\200\164\201\130\202\157\203\141\204\167\205" +
    "\132\206\160\207\170\210\137\211\162\212\140\213\165" +
    "\214\133\215\161\216\154\217\166\220\143\222\131\223" +
    "\u01c4\224\u0144\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\060\114\u01c6\115\u0147\116\u0149\132\u012a\155" +
    "\u0141\156\111\157\060\164\056\165\076\166\103\167\145" +
    "\170\171\171\267\174\233\175\305\176\240\200\302\201" +
    "\232\220\264\222\131\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\130\071\231\074\251\100\u015d\102" +
    "\252\103\245\104\274\106\266\110\220\120\306\121\303" +
    "\125\242\126\301\127\224\130\234\131\260\132\230\133" +
    "\273\134\236\135\272\137\243\140\225\147\262\150\244" +
    "\151\307\155\356\156\111\157\060\164\056\165\076\166" +
    "\103\167\145\170\171\171\267\174\233\175\305\176\240" +
    "\200\302\201\232\220\264\222\131\226\057\227\101\230" +
    "\070\001\001\000\002\001\001\000\112\155\144\156\111" +
    "\157\060\164\056\165\076\166\103\167\145\170\171\171" +
    "\105\173\u01ca\174\155\175\156\176\172\177\151\200\164" +
    "\201\130\202\157\203\141\204\167\205\132\206\160\207" +
    "\170\210\137\211\162\212\140\213\165\214\133\215\161" +
    "\216\154\217\166\220\143\222\131\224\205\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\130\071\231" +
    "\074\251\100\u0162\102\252\103\245\104\274\106\266\110" +
    "\220\120\306\121\303\125\242\126\301\127\224\130\234" +
    "\131\260\132\230\133\273\134\236\135\272\137\243\140" +
    "\225\147\262\150\244\151\307\155\356\156\111\157\060" +
    "\164\056\165\076\166\103\167\145\170\171\171\267\174" +
    "\233\175\305\176\240\200\302\201\232\220\264\222\131" +
    "\226\057\227\101\230\070\001\001\000\110\155\144\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\105\174\155\175\156\176\172\177\151\200\164\201" +
    "\130\202\157\203\141\204\167\205\132\206\160\207\170" +
    "\210\137\211\162\212\140\213\165\214\133\215\161\216" +
    "\154\217\166\220\143\222\131\224\u01cd\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\130\071\231\074" +
    "\251\100\u016e\102\252\103\245\104\274\106\266\110\220" +
    "\120\306\121\303\125\242\126\301\127\224\130\234\131" +
    "\260\132\230\133\273\134\236\135\272\137\243\140\225" +
    "\147\262\150\244\151\307\155\356\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\267\174\233" +
    "\175\305\176\240\200\302\201\232\220\264\222\131\226" +
    "\057\227\101\230\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\127\317" +
    "\152\u01d7\153\320\154\314\155\316\156\111\157\060\164" +
    "\056\165\076\166\103\167\145\170\171\171\105\222\312" +
    "\226\057\227\101\230\070\001\001\000\042\127\317\153" +
    "\324\154\314\155\316\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\105\222\312\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\010\061\u01da" +
    "\062\u01b9\063\u01bb\001\001\000\002\001\001\000\040\041" +
    "\u0172\123\u01dc\124\u0174\155\u0110\156\111\157\060\164\056" +
    "\165\u0173\166\103\167\072\170\114\171\105\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\130\071\231" +
    "\074\251\100\u017e\102\252\103\245\104\274\106\266\110" +
    "\220\120\306\121\303\125\242\126\301\127\224\130\234" +
    "\131\260\132\230\133\273\134\236\135\272\137\243\140" +
    "\225\147\262\150\244\151\307\155\356\156\111\157\060" +
    "\164\056\165\076\166\103\167\145\170\171\171\267\174" +
    "\233\175\305\176\240\200\302\201\232\220\264\222\131" +
    "\226\057\227\101\230\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\155\144\156\111" +
    "\157\060\164\056\165\076\166\103\167\072\170\114\171" +
    "\105\174\155\175\156\176\172\177\151\200\164\201\130" +
    "\202\157\203\141\204\167\205\132\206\u01f9\226\057\227" +
    "\101\230\070\001\001\000\060\155\144\156\111\157\060" +
    "\164\056\165\076\166\103\167\072\170\114\171\105\174" +
    "\155\175\156\176\172\177\151\200\164\201\130\202\157" +
    "\203\141\204\167\205\132\206\u01f8\226\057\227\101\230" +
    "\070\001\001\000\060\155\144\156\111\157\060\164\056" +
    "\165\076\166\103\167\072\170\114\171\105\174\155\175" +
    "\156\176\172\177\151\200\164\201\130\202\157\203\141" +
    "\204\167\205\132\206\u01f7\226\057\227\101\230\070\001" +
    "\001\000\060\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\072\170\114\171\105\174\155\175\156\176" +
    "\172\177\151\200\164\201\130\202\157\203\141\204\167" +
    "\205\132\206\u01e5\226\057\227\101\230\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\155\144\156\111" +
    "\157\060\164\056\165\076\166\103\167\072\170\114\171" +
    "\105\174\155\175\156\176\172\177\151\200\164\201\130" +
    "\202\157\203\141\204\167\205\u01f6\226\057\227\101\230" +
    "\070\001\001\000\056\155\144\156\111\157\060\164\056" +
    "\165\076\166\103\167\072\170\114\171\105\174\155\175" +
    "\156\176\172\177\151\200\164\201\130\202\157\203\141" +
    "\204\167\205\u01f5\226\057\227\101\230\070\001\001\000" +
    "\056\155\144\156\111\157\060\164\056\165\076\166\103" +
    "\167\072\170\114\171\105\174\155\175\156\176\172\177" +
    "\151\200\164\201\130\202\157\203\141\204\167\205\u01ea" +
    "\226\057\227\101\230\070\001\001\000\002\001\001\000" +
    "\054\155\144\156\111\157\060\164\056\165\076\166\103" +
    "\167\072\170\114\171\105\174\155\175\156\176\172\177" +
    "\151\200\164\201\130\202\157\203\141\204\u01f4\226\057" +
    "\227\101\230\070\001\001\000\054\155\144\156\111\157" +
    "\060\164\056\165\076\166\103\167\072\170\114\171\105" +
    "\174\155\175\156\176\172\177\151\200\164\201\130\202" +
    "\157\203\141\204\u01ed\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\052\155\144\156\111\157\060\164" +
    "\056\165\076\166\103\167\072\170\114\171\105\174\155" +
    "\175\156\176\172\177\u01f3\200\164\201\130\202\157\203" +
    "\141\226\057\227\101\230\070\001\001\000\052\155\144" +
    "\156\111\157\060\164\056\165\076\166\103\167\072\170" +
    "\114\171\105\174\155\175\156\176\172\177\u01f2\200\164" +
    "\201\130\202\157\203\141\226\057\227\101\230\070\001" +
    "\001\000\052\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\072\170\114\171\105\174\155\175\156\176" +
    "\172\177\u01f1\200\164\201\130\202\157\203\141\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\155\144\156\111\157\060\164\056" +
    "\165\076\166\103\167\072\170\114\171\105\174\155\175" +
    "\156\176\172\177\151\200\164\201\130\202\157\203\141" +
    "\204\167\205\132\206\160\207\170\210\137\211\162\212" +
    "\u01fb\226\057\227\101\230\070\001\001\000\002\001\001" +
    "\000\066\155\144\156\111\157\060\164\056\165\076\166" +
    "\103\167\072\170\114\171\105\174\155\175\156\176\172" +
    "\177\151\200\164\201\130\202\157\203\141\204\167\205" +
    "\132\206\160\207\170\210\137\211\u01fd\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\064\155\144\156" +
    "\111\157\060\164\056\165\076\166\103\167\072\170\114" +
    "\171\105\174\155\175\156\176\172\177\151\200\164\201" +
    "\130\202\157\203\141\204\167\205\132\206\160\207\170" +
    "\210\u01ff\226\057\227\101\230\070\001\001\000\002\001" +
    "\001\000\062\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\072\170\114\171\105\174\155\175\156\176" +
    "\172\177\151\200\164\201\130\202\157\203\141\204\167" +
    "\205\132\206\160\207\u0203\226\057\227\101\230\070\001" +
    "\001\000\062\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\072\170\114\171\105\174\155\175\156\176" +
    "\172\177\151\200\164\201\130\202\157\203\141\204\167" +
    "\205\132\206\160\207\u0202\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\064\u0209\065\153\155\144\156\111\157\060\164\056" +
    "\165\076\166\103\167\145\170\171\171\105\174\155\175" +
    "\156\176\172\177\151\200\164\201\130\202\157\203\141" +
    "\204\167\205\132\206\160\207\170\210\137\211\162\212" +
    "\140\213\165\214\133\215\161\216\154\217\166\220\143" +
    "\222\131\224\147\226\057\227\101\230\070\001\001\000" +
    "\002\001\001\000\110\155\144\156\111\157\060\164\056" +
    "\165\076\166\103\167\145\170\171\171\105\174\155\175" +
    "\156\176\172\177\151\200\164\201\130\202\157\203\141" +
    "\204\167\205\132\206\160\207\170\210\137\211\162\212" +
    "\140\213\165\214\133\215\161\216\154\217\166\220\143" +
    "\222\131\224\u020f\226\057\227\101\230\070\001\001\000" +
    "\074\155\144\156\111\157\060\164\056\165\076\166\103" +
    "\167\072\170\114\171\105\174\155\175\156\176\172\177" +
    "\151\200\164\201\130\202\157\203\141\204\167\205\132" +
    "\206\160\207\170\210\137\211\162\212\140\213\165\214" +
    "\u020c\226\057\227\101\230\070\001\001\000\002\001\001" +
    "\000\072\155\144\156\111\157\060\164\056\165\076\166" +
    "\103\167\072\170\114\171\105\174\155\175\156\176\172" +
    "\177\151\200\164\201\130\202\157\203\141\204\167\205" +
    "\132\206\160\207\170\210\137\211\162\212\140\213\u020e" +
    "\226\057\227\101\230\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\155\144\156\111\157\060\164\056" +
    "\165\076\166\103\167\072\170\114\171\105\174\155\175" +
    "\156\176\172\177\151\200\164\201\130\202\157\203\141" +
    "\204\167\205\132\206\160\207\170\210\137\211\162\212" +
    "\140\213\165\214\133\215\161\216\u0211\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\155" +
    "\144\156\111\157\060\164\056\165\076\166\103\167\072" +
    "\170\114\171\105\174\155\175\156\176\172\177\u021a\200" +
    "\164\201\130\202\157\203\141\226\057\227\101\230\070" +
    "\001\001\000\002\001\001\000\044\155\144\156\111\157" +
    "\060\164\056\165\076\166\103\167\072\170\114\171\105" +
    "\174\155\175\156\176\172\202\u021c\203\141\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\155\144\156\111\157" +
    "\060\164\056\165\076\166\103\167\145\170\171\171\105" +
    "\174\155\175\156\176\172\177\151\200\164\201\130\202" +
    "\157\203\141\204\167\205\132\206\160\207\170\210\137" +
    "\211\162\212\140\213\165\214\133\215\161\216\154\217" +
    "\u022a\220\143\222\131\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\060\u022e\063\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\014\u0234" +
    "\015\u0233\016\u0188\035\u018a\036\077\037\075\040\064\041" +
    "\067\155\071\156\111\157\060\164\056\165\076\166\103" +
    "\167\072\170\114\171\105\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0236" +
    "\001\001\000\006\011\u0243\071\u0244\001\001\000\010\013" +
    "\u023b\017\u023a\020\u0238\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u023a\020\u023d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\014\u0247\015\u0233\016\u0188\035\u018a\036" +
    "\077\037\075\040\064\041\067\155\071\156\111\157\060" +
    "\164\056\165\076\166\103\167\072\170\114\171\105\226" +
    "\057\227\101\230\070\001\001\000\002\001\001\000\004" +
    "\012\u0249\001\001\000\006\011\u024a\071\u0244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\160\u025a\161\u0250\163\u025b\001\001\000" +
    "\010\160\u0252\161\u0250\163\u0253\001\001\000\002\001\001" +
    "\000\110\155\144\156\111\157\060\164\056\165\076\166" +
    "\103\167\145\170\171\171\105\174\155\175\156\176\172" +
    "\177\151\200\164\201\130\202\157\203\141\204\167\205" +
    "\132\206\160\207\170\210\137\211\162\212\140\213\165" +
    "\214\133\215\161\216\154\217\166\220\143\222\131\224" +
    "\u0258\226\057\227\101\230\070\001\001\000\010\161\u0256" +
    "\162\u0255\163\u0257\001\001\000\004\065\u0254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\161" +
    "\u0256\162\u025d\163\u0257\001\001\000\004\065\u025c\001\001" +
    "\000\002\001\001\000\002\001\001\000\112\155\144\156" +
    "\111\157\060\164\056\165\076\166\103\167\145\170\171" +
    "\171\105\173\u025f\174\155\175\156\176\172\177\151\200" +
    "\164\201\130\202\157\203\141\204\167\205\132\206\160" +
    "\207\170\210\137\211\162\212\140\213\165\214\133\215" +
    "\161\216\154\217\166\220\143\222\131\224\205\226\057" +
    "\227\101\230\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\114\155\144\156\111\157\060\164\056\165\076" +
    "\166\103\167\145\170\171\171\105\172\u0262\173\206\174" +
    "\155\175\156\176\172\177\151\200\164\201\130\202\157" +
    "\203\141\204\167\205\132\206\160\207\170\210\137\211" +
    "\162\212\140\213\165\214\133\215\161\216\154\217\166" +
    "\220\143\222\131\224\205\226\057\227\101\230\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\u023a\020\u0266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u026b\001\001" +
    "\000\010\013\u0284\017\u023a\020\u0238\001\001\000\004\023" +
    "\u026e\001\001\000\006\024\u0271\025\u026f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u0272\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\u0276\030\u0277\001\001\000\050\031" +
    "\u027a\032\u0278\035\u027b\036\077\037\075\040\064\041\067" +
    "\155\071\156\111\157\060\164\056\165\076\166\103\167" +
    "\072\170\114\171\105\226\057\227\101\230\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\032\u0282\035\u027b\036\077\037\075" +
    "\040\064\041\067\155\071\156\111\157\060\164\056\165" +
    "\076\166\103\167\072\170\114\171\105\226\057\227\101" +
    "\230\070\001\001\000\010\033\u027d\034\u027c\063\u027e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\u0281\063\u027e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0286\001\001\000\004\030\u0288\001" +
    "\001\000\050\031\u027a\032\u0278\035\u027b\036\077\037\075" +
    "\040\064\041\067\155\071\156\111\157\060\164\056\165" +
    "\076\166\103\167\072\170\114\171\105\226\057\227\101" +
    "\230\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\035\u028c\036\077\037\075\040\064" +
    "\041\067\155\071\156\111\157\060\164\056\165\076\166" +
    "\103\167\072\170\114\171\105\226\057\227\101\230\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\035\u0296\036\077\037\075\040\064\041\067\155\071" +
    "\156\111\157\060\164\056\165\076\166\103\167\072\170" +
    "\114\171\105\226\057\227\101\230\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\035\u0299\036\077\037" +
    "\075\040\064\041\067\155\071\156\111\157\060\164\056" +
    "\165\076\166\103\167\072\170\114\171\105\226\057\227" +
    "\101\230\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\035\u02a0\036\077\037\075\040\064" +
    "\041\067\155\071\156\111\157\060\164\056\165\076\166" +
    "\103\167\072\170\114\171\105\226\057\227\101\230\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 

  public Scanner lexer;

  public parser(Scanner l) {
    this();
    lexer=l;
  }

  public void syntax_error(java_cup.runtime.Symbol current) {
    if(current.value == null) {
      System.out.println("Unexpected end of file." + Scanner.curLine);
      System.exit(1);
    }	
    else {
      Token t = (Token)current.value;
	System.out.println(Error.fileName + ":" + Scanner.lineCount + ": Syntax error:\n\n" + Scanner.curLine);
	for (int i=1; i<Scanner.curLine.length()+1-t.lexeme.length(); i++) 
	  System.out.print(" ");
        System.out.println("^");

      System.exit(1);
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	
public Sequence<Name> primary2PackageAccess(Expression e) {
  if (e instanceof NameExpr)
    return new Sequence<Name>(((NameExpr)e).name());
  else if (!(e instanceof RecordAccess)) 
    Error.error(e,"Syntax error in package access");
  else {
    RecordAccess ra = (RecordAccess)e;
    return primary2PackageAccess(ra.record()).append(ra.field());
  }
  return null;  
}

void foo() { }




   


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // protocol_literal ::= NEW type_name LBRACE IDENTIFIER COLON argument_list_opt RBRACE 
            {
              ProtocolLiteral RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtocolLiteral(tn
, new Name(id2), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(150/*protocol_literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // record_literal ::= NEW type_name LBRACE argument_list RBRACE 
            {
              RecordLiteral RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordLiteral(tn, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(149/*record_literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // literal ::= protocol_literal 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolLiteral l = (ProtocolLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // literal ::= record_literal 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RecordLiteral l = (RecordLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // literal ::= CHARACTER_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.CharKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // literal ::= STRING_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.StringKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // literal ::= BOOLEAN_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.BooleanKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // literal ::= DOUBLE_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.DoubleKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // literal ::= FLOAT_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.FloatKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // literal ::= LONG_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.LongKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // literal ::= INTEGER_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.IntKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // constant_expression ::= expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(147/*constant_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // expression ::= assignment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // expression_opt ::= 
            {
              Expression RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(145/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // expression_opt ::= expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(145/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // left_hand_side ::= array_access 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayAccessExpr a = (ArrayAccessExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(144/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // left_hand_side ::= record_access 
            {
              Expression RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(144/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // left_hand_side ::= IDENTIFIER 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(144/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // assignment_operator ::= OREQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.OREQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // assignment_operator ::= XOREQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.XOREQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // assignment_operator ::= ANDEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.ANDEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // assignment_operator ::= RRSHIFTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.RRSHIFTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // assignment_operator ::= RSHIFTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.RSHIFTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // assignment_operator ::= LSHIFTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.LSHIFTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // assignment_operator ::= MINUSEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.MINUSEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // assignment_operator ::= PLUSEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.PLUSEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // assignment_operator ::= MODEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.MODEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // assignment_operator ::= DIVEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.DIVEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // assignment_operator ::= MULTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.MULTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // assignment_operator ::= EQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.EQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // assignment ::= left_hand_side assignment_operator assignment_expression 
            {
              Assignment RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Assignment(l, e, o); 
              CUP$parser$result = new java_cup.runtime.Symbol(142/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // assignment_expression ::= assignment 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(141/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // assignment_expression ::= conditional_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(141/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // conditional_expression ::= conditional_or_expression QUEST expression COLON conditional_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Ternary(e ,e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(140/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // conditional_expression ::= conditional_or_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(140/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // conditional_or_expression ::= conditional_or_expression OROR conditional_and_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.OROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(139/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // conditional_or_expression ::= conditional_and_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(139/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // conditional_and_expression ::= conditional_and_expression ANDAND inclusive_or_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2, BinaryExpr.ANDAND); 
              CUP$parser$result = new java_cup.runtime.Symbol(138/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // conditional_and_expression ::= inclusive_or_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(138/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2 ,BinaryExpr.OR); 
              CUP$parser$result = new java_cup.runtime.Symbol(137/*inclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(137/*inclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2, BinaryExpr.XOR); 
              CUP$parser$result = new java_cup.runtime.Symbol(136/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // exclusive_or_expression ::= and_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(136/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // and_expression ::= and_expression AND equality_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2, BinaryExpr.AND); 
              CUP$parser$result = new java_cup.runtime.Symbol(135/*and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // and_expression ::= equality_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(135/*and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.NOTEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(134/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.EQEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(134/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // equality_expression ::= relational_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(134/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // relational_expression ::= relational_expression GTEQ shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.GTEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // relational_expression ::= relational_expression LTEQ shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.LTEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // relational_expression ::= relational_expression GT shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.GT); 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // relational_expression ::= relational_expression LT shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.LT); 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // relational_expression ::= shift_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // shift_expression ::= shift_expression RRSHIFT additive_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.RRSHIFT); 
              CUP$parser$result = new java_cup.runtime.Symbol(132/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.RSHIFT); 
              CUP$parser$result = new java_cup.runtime.Symbol(132/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.LSHIFT); 
              CUP$parser$result = new java_cup.runtime.Symbol(132/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // shift_expression ::= additive_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(132/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.MINUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(131/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.PLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(131/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(131/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.MOD); 
              CUP$parser$result = new java_cup.runtime.Symbol(130/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.DIV); 
              CUP$parser$result = new java_cup.runtime.Symbol(130/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.MULT); 
              CUP$parser$result = new java_cup.runtime.Symbol(130/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // multiplicative_expression ::= unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(130/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // cast_expression ::= LPAREN primitive_type RPAREN unary_expression 
            {
              CastExpr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CastExpr(t, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(129/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // cast_expression ::= LPAREN expression RPAREN unary_expression_not_plus_minus 
            {
              CastExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (e instanceof NameExpr) 
									    RESULT = new CastExpr(new NamedType(((NameExpr)e).name()), ex);
									  else
									    Error.error(e,"Illegal Expression in cast - Type names only"); 	
									  RESULT = null;
								        
              CUP$parser$result = new java_cup.runtime.Symbol(129/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // unary_expression_not_plus_minus ::= cast_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CastExpr e = (CastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // unary_expression_not_plus_minus ::= NOT unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.NOT); 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // unary_expression_not_plus_minus ::= COMP unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.COMP); 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // unary_expression_not_plus_minus ::= postfix_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // pre_decrement_expression ::= MINUSMINUS unary_expression 
            {
              UnaryPreExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.PLUSPLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(127/*pre_decrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // pre_increment_expression ::= PLUSPLUS unary_expression 
            {
              UnaryPreExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.PLUSPLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(126/*pre_increment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // unary_expression ::= unary_expression_not_plus_minus 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // unary_expression ::= MINUS unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.MINUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // unary_expression ::= PLUS unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // unary_expression ::= pre_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // unary_expression ::= pre_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // post_decrement_expression ::= postfix_expression MINUSMINUS 
            {
              UnaryPostExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryPostExpr(e, UnaryPostExpr.MINUSMINUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(124/*post_decrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // post_increment_expression ::= postfix_expression PLUSPLUS 
            {
              UnaryPostExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryPostExpr(e, UnaryPostExpr.PLUSPLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(123/*post_increment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // postfix_expression ::= IDENTIFIER 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // postfix_expression ::= post_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // postfix_expression ::= post_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // postfix_expression ::= primary 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // argument_list ::= argument_list COMMA expression 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(121/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // argument_list ::= expression 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(121/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // argument_list_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Expression>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(120/*argument_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // argument_list_opt ::= argument_list 
            {
              Sequence RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence a = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(120/*argument_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // invocation ::= IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(new NameExpr(new Name(p)), new Name(id), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(119/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // invocation ::= IDENTIFIER COLONCOLON IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(null, new Name(id, primary2PackageAccess(new NameExpr(new Name(p)))), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(119/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // invocation ::= primary COLONCOLON IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(null, new Name(id, primary2PackageAccess(p)), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(119/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(p, new Name(id), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(119/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // invocation ::= IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(null, new Name(id), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(119/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // array_access ::= primary_no_new_array_or_mobile LBRACK expression RBRACK 
            {
              ArrayAccessExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccessExpr(p, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(118/*array_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // array_access ::= IDENTIFIER LBRACK expression RBRACK 
            {
              ArrayAccessExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccessExpr(new NameExpr(new Name(id)), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(118/*array_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // record_access ::= IDENTIFIER DOT IDENTIFIER 
            {
              Expression RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RecordAccess(new NameExpr(new Name(id1)), new Name(id2)); 
              CUP$parser$result = new java_cup.runtime.Symbol(117/*record_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // record_access ::= primary DOT IDENTIFIER 
            {
              Expression RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RecordAccess(p, new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(117/*record_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // chan_read_expression ::= IDENTIFIER DOT READ LPAREN block_opt RPAREN 
            {
              ChannelReadExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(new NameExpr(new Name(id)), b); 
              CUP$parser$result = new java_cup.runtime.Symbol(116/*chan_read_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // chan_read_expression ::= primary DOT READ LPAREN block_opt RPAREN 
            {
              ChannelReadExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(p, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(116/*chan_read_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // chan_expression ::= IDENTIFIER DOT WRITE 
            {
              ChannelEndExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(new NameExpr(new Name(id)), ChannelEndExpr.WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(115/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // chan_expression ::= IDENTIFIER DOT READ 
            {
              ChannelEndExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(new NameExpr(new Name(id)), ChannelEndExpr.READ); 
              CUP$parser$result = new java_cup.runtime.Symbol(115/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // chan_expression ::= primary DOT WRITE 
            {
              ChannelEndExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(p, ChannelEndExpr.WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(115/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // chan_expression ::= primary DOT READ 
            {
              ChannelEndExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(p, ChannelEndExpr.READ); 
              CUP$parser$result = new java_cup.runtime.Symbol(115/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // mobile_creation ::= NEW MOBILE LPAREN type_name RPAREN 
            {
              NewMobile RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewMobile(tn); 
              CUP$parser$result = new java_cup.runtime.Symbol(114/*mobile_creation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // dims ::= LBRACK RBRACK 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<AST>(null); 
              CUP$parser$result = new java_cup.runtime.Symbol(113/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // dims ::= dims LBRACK RBRACK 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = lst.append(null); 
              CUP$parser$result = new java_cup.runtime.Symbol(113/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // dims_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<AST>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // dims_opt ::= dims 
            {
              Sequence RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // dim_expr ::= LBRACK expression RBRACK 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(111/*dim_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // dim_exprs ::= dim_exprs dim_expr 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*dim_exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // dim_exprs ::= dim_expr 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*dim_exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // array_creation_expression ::= NEW IDENTIFIER dims array_initializer 
            {
              NewArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayLiteral i = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(new NamedType(new Name(id)), new Sequence<Expression>(), d, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(109/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // array_creation_expression ::= NEW IDENTIFIER dim_exprs dims_opt 
            {
              NewArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d1 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d2 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(new NamedType(new Name(id)), d1, d2, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(109/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // array_creation_expression ::= NEW primitive_type dims array_initializer 
            {
              NewArray RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayLiteral i = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(t, new Sequence<Expression>(), d, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(109/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              NewArray RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d1 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d2 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(t, d1, d2, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(109/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // primary_no_new_array_or_mobile ::= array_access 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayAccessExpr e = (ArrayAccessExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(108/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // primary_no_new_array_or_mobile ::= invocation 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Invocation e = (Invocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(108/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // primary_no_new_array_or_mobile ::= record_access 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(108/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // primary_no_new_array_or_mobile ::= LPAREN expression RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(108/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // primary_no_new_array_or_mobile ::= literal 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(108/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // primary ::= IDENTIFIER COLONCOLON IDENTIFIER 
            {
              Expression RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id2, new Sequence(new Name(id1)))); 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // primary ::= primary COLONCOLON IDENTIFIER 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id, primary2PackageAccess(e))); 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // primary ::= chan_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelEndExpr e = (ChannelEndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // primary ::= chan_read_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelReadExpr e = (ChannelReadExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // primary ::= mobile_creation 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NewMobile e = (NewMobile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // primary ::= array_creation_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NewArray e = (NewArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // primary ::= primary_no_new_array_or_mobile 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // guard ::= timeout_statement 
            {
              Guard RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TimeoutStat s = (TimeoutStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Guard(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(106/*guard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // guard ::= SKIP 
            {
              Guard RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Guard(new SkipStat(s)); 
              CUP$parser$result = new java_cup.runtime.Symbol(106/*guard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // guard ::= left_hand_side EQ chan_read_expression 
            {
              Guard RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelReadExpr e = (ChannelReadExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Guard(new ExprStat(new Assignment(l, e, Assignment.EQ))); 
              CUP$parser$result = new java_cup.runtime.Symbol(106/*guard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // alt_case ::= guard COLON statement 
            {
              AltCase RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Guard g = (Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AltCase(null, g, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(105/*alt_case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // alt_case ::= LPAREN expression RPAREN ANDAND guard COLON statement 
            {
              AltCase RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Guard g = (Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AltCase(e, g, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(105/*alt_case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // alt_body ::= alt_case 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AltCase e = (AltCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<AltCase>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(104/*alt_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // alt_body ::= alt_body alt_case 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AltCase e = (AltCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(104/*alt_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // alt_statement ::= ALT LBRACE alt_body RBRACE 
            {
              AltStat RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AltStat(b, false /* ALT */); 
              CUP$parser$result = new java_cup.runtime.Symbol(103/*alt_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // alt_statement ::= PRI ALT LBRACE alt_body RBRACE 
            {
              AltStat RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AltStat(b, true /* PRI ALT */); 
              CUP$parser$result = new java_cup.runtime.Symbol(103/*alt_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // skip_statement ::= SKIP SEMICOLON 
            {
              SkipStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SkipStat(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(102/*skip_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // stop_statement ::= STOP SEMICOLON 
            {
              StopStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StopStat(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(101/*stop_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // switch_label ::= DEFAULT COLON 
            {
              SwitchLabel RESULT = null;
		 RESULT = new SwitchLabel(null, true /* default: */); 
              CUP$parser$result = new java_cup.runtime.Symbol(100/*switch_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // switch_label ::= CASE constant_expression COLON 
            {
              SwitchLabel RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SwitchLabel(e, false /* not default: */); 
              CUP$parser$result = new java_cup.runtime.Symbol(100/*switch_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // switch_labels ::= switch_labels switch_label 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchLabel e = (SwitchLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(99/*switch_labels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // switch_labels ::= switch_label 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchLabel e = (SwitchLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<SwitchLabel>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(99/*switch_labels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // switch_block_statement_group ::= switch_labels block_statements 
            {
              SwitchGroup RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SwitchGroup(s, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(98/*switch_block_statement_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // switch_block_statement_groups ::= switch_block_statement_groups switch_block_statement_group 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchGroup e = (SwitchGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(97/*switch_block_statement_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // switch_block_statement_groups ::= switch_block_statement_group 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchGroup e = (SwitchGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<SwitchGroup>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(97/*switch_block_statement_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // switch_block_statement_groups_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<SwitchGroup>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(96/*switch_block_statement_groups_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // switch_block_statement_groups_opt ::= switch_block_statement_groups 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(96/*switch_block_statement_groups_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // switch_block ::= LBRACE switch_block_statement_groups_opt RBRACE 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(95/*switch_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // switch_statement ::= SWITCH LPAREN expression RPAREN switch_block 
            {
              SwitchStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SwitchStat(e, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(94/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // return_statement ::= RETURN expression_opt SEMICOLON 
            {
              ReturnStat RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStat(r, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(93/*return_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // identifier_opt ::= 
            {
              Name RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(92/*identifier_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // identifier_opt ::= IDENTIFIER 
            {
              Name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(92/*identifier_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // continue_statement ::= CONTINUE identifier_opt SEMICOLON 
            {
              ContinueStat RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name i = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ContinueStat(c,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*continue_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // break_statement ::= BREAK identifier_opt SEMICOLON 
            {
              BreakStat RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name i = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BreakStat(b, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(90/*break_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // labeled_statement ::= IDENTIFIER COLON statement 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 s.setLabel(id.lexeme); RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(89/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // statement_expression ::= IDENTIFIER DOT READ LPAREN block_opt RPAREN 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(new NameExpr(new Name(id)), b); 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // statement_expression ::= primary DOT READ LPAREN block_opt RPAREN 
            {
              Expression RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(p, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // statement_expression ::= invocation 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Invocation e = (Invocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // statement_expression ::= post_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // statement_expression ::= post_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // statement_expression ::= pre_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // statement_expression ::= pre_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // statement_expression ::= assignment 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignment e = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expression_statement ::= statement_expression SEMICOLON 
            {
              ExprStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprStat(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(87/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // suspend_statement ::= SUSPEND RESUME WITH LPAREN formal_parameter_list RPAREN SEMICOLON 
            {
              SuspendStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new SuspendStat(s, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(86/*suspend_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // timeout_statement ::= primary DOT TIMEOUT LPAREN expression RPAREN 
            {
              TimeoutStat RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TimeoutStat(p, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(85/*timeout_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // timeout_statement ::= IDENTIFIER DOT TIMEOUT LPAREN expression RPAREN 
            {
              TimeoutStat RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TimeoutStat(new NameExpr(new Name(id)), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(85/*timeout_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // barrier_sync_statement ::= SYNC primary_no_new_array_or_mobile SEMICOLON 
            {
              SyncStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SyncStat(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*barrier_sync_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // empty_statement ::= SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*empty_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // channel ::= chan_expression 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelEndExpr e = (ChannelEndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*channel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // channel ::= channel_type IDENTIFIER EQ primary_no_new_array_or_mobile 
            {
              AST RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LocalDecl(t, new Var(new Name(id), e), false); 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*channel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // channel ::= IDENTIFIER 
            {
              AST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*channel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // channels ::= channel 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<AST>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*channels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // channels ::= channels COMMA channel 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*channels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // claim_statement_no_short_if ::= CLAIM LPAREN channels RPAREN statement_no_short_if 
            {
              ClaimStat RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ClaimStat(c, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*claim_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // claim_statement ::= CLAIM LPAREN channels RPAREN statement 
            {
              ClaimStat RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ClaimStat(c, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*claim_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // do_statement ::= DO statement WHILE LPAREN expression RPAREN 
            {
              DoStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoStat(s, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(78/*do_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // statement_expressions ::= statement_expressions COMMA statement_expression 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(new ExprStat(e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(76/*statement_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // statement_expressions ::= statement_expression 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<ExprStat>(new ExprStat(e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(76/*statement_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // for_update ::= statement_expressions 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*for_update*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // for_update_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<ExprStat>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // for_update_opt ::= for_update 
            {
              Sequence RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = u; 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // for_init ::= local_variable_declaration 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // for_init ::= statement_expressions 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // for_init_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<AST>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // for_init_opt ::= for_init 
            {
              Sequence RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // for_statement_no_short_if ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(71/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // for_statement_no_short_if ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN ENROLL LPAREN argument_list RPAREN statement_no_short_if 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, b, s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(71/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // for_statement_no_short_if ::= FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(71/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // for_statement ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(70/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // for_statement ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN ENROLL LPAREN argument_list RPAREN statement 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, b, s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(70/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // for_statement ::= FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(70/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // while_statement_no_short_if ::= WHILE LPAREN expression RPAREN statement_no_short_if 
            {
              WhileStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new WhileStat(e, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*while_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              WhileStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new WhileStat(e, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(68/*while_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // if_then_else_statement_no_short_if ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if 
            {
              IfStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfStat(e, s1, s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*if_then_else_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // if_then_else_statement ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement 
            {
              IfStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfStat(e, s1, s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*if_then_else_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // if_then_statement ::= IF LPAREN expression RPAREN statement 
            {
              IfStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfStat(e, s, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*if_then_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // statement_without_trailing_substatement ::= alt_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AltStat s = (AltStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // statement_without_trailing_substatement ::= primary DOT WRITE LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelWriteStat(p, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // statement_without_trailing_substatement ::= IDENTIFIER DOT WRITE LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelWriteStat(new NameExpr(new Name(id)), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // statement_without_trailing_substatement ::= stop_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StopStat s = (StopStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // statement_without_trailing_substatement ::= skip_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SkipStat s = (SkipStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // statement_without_trailing_substatement ::= switch_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchStat s = (SwitchStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // statement_without_trailing_substatement ::= return_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ReturnStat s = (ReturnStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // statement_without_trailing_substatement ::= continue_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ContinueStat s = (ContinueStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement_without_trailing_substatement ::= break_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		BreakStat s = (BreakStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // statement_without_trailing_substatement ::= expression_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExprStat s = (ExprStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statement_without_trailing_substatement ::= suspend_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SuspendStat s = (SuspendStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // statement_without_trailing_substatement ::= SEQ block 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block s = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement_without_trailing_substatement ::= timeout_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TimeoutStat s = (TimeoutStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement_without_trailing_substatement ::= barrier_sync_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SyncStat s = (SyncStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // statement_without_trailing_substatement ::= do_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DoStat s = (DoStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // statement_without_trailing_substatement ::= empty_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement_without_trailing_substatement ::= par_block 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ParBlock s = (ParBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement_without_trailing_substatement ::= block 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block s = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement_no_short_if ::= claim_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ClaimStat s = (ClaimStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement_no_short_if ::= for_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForStat s = (ForStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		WhileStat s = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // statement ::= labeled_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // statement ::= claim_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ClaimStat s = (ClaimStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // statement ::= for_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForStat s = (ForStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statement ::= while_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		WhileStat s = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statement ::= if_then_else_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statement ::= if_then_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // statement ::= statement_without_trailing_substatement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // local_variable_declaration ::= type variable_declarators 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Sequence s = new Sequence<LocalDecl>();
                                                    for (int i=0; i<((Sequence<LocalDecl>)v).size(); i++) 
                                                      s.append(new LocalDecl(t, (Var)v.child(i), false /* it is NOT CONST */));
                                                  RESULT = s; 
                                                
              CUP$parser$result = new java_cup.runtime.Symbol(61/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // local_variable_declaration ::= CONST type variable_declarators 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Sequence<LocalDecl> s = new Sequence<LocalDecl>();
                                                    for (int i=0; i<((Sequence<LocalDecl>)v).size(); i++) 
                                                      s.append(new LocalDecl(t, (Var)v.child(i), true /* it is CONST */));
                                                  RESULT = s; 
                                                
              CUP$parser$result = new java_cup.runtime.Symbol(61/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // block_statement ::= statement 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Statement>(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // block_statement ::= local_variable_declaration SEMICOLON 
            {
              Sequence RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // barriers ::= expression 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*barriers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // barriers ::= barriers COMMA expression 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*barriers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // par_block ::= PAR ENROLL LPAREN barriers RPAREN block 
            {
              ParBlock RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParBlock(bl.stats(), b); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*par_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // par_block ::= PAR block 
            {
              ParBlock RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParBlock(bl.stats(), new Sequence<Expression>()); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*par_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // block_statements ::= block_statement 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // block_statements ::= block_statements block_statement 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.merge(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // block_statements_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Statement>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // block_statements_opt ::= block_statements 
            {
              Sequence RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // block ::= LBRACE block_statements_opt RBRACE 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // block_opt ::= 
            {
              Block RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*block_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // block_opt ::= block 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*block_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // variable_initializers ::= variable_initializer 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variable_initializers ::= variable_initializers COMMA variable_initializer 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // variable_initializers_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Expression>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*variable_initializers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variable_initializers_opt ::= variable_initializers 
            {
              Sequence RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*variable_initializers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // array_initializer ::= LBRACE variable_initializers_opt RBRACE 
            {
              ArrayLiteral RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLiteral(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variable_initializer ::= expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variable_initializer ::= array_initializer 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayLiteral a = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable_declarator_identifier ::= variable_declarator_identifier LBRACK RBRACK 
            {
              Name RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 v.setArrayDepth(v.getArrayDepth()+1); RESULT=v; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*variable_declarator_identifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // variable_declarator_identifier ::= IDENTIFIER 
            {
              Name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*variable_declarator_identifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // variable_declarator ::= variable_declarator_identifier EQ variable_initializer 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variable_declarator ::= variable_declarator_identifier 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variable_declarators ::= variable_declarator 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Var>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*variable_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variable_declarators ::= variable_declarators COMMA variable_declarator 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*variable_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // constant_declarator ::= variable_declarator_identifier 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*constant_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // constant_declarator ::= variable_declarator_identifier EQ variable_initializer 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*constant_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // constant_declarators ::= constant_declarator 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Var>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*constant_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // constant_declarators ::= constant_declarators COMMA constant_declarator 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*constant_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // constant_declaration ::= modifiers_opt type constant_declarators SEMICOLON 
            {
              Sequence RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Sequence s = new Sequence<ConstantDecl>();
	                                                             for (Var v : (Sequence<Var>)c) 
                                                                        s.append(new ConstantDecl(m, t, v));
                                                                    RESULT = s; 
                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(44/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // modifier ::= PROTECTED 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.PROTECTED); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // modifier ::= PRIVATE 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.PRIVATE); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // modifier ::= PUBLIC 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.PUBLIC); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // modifier ::= NATIVE 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.NATIVE); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // modifier ::= CONST 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.CONST); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // modifier ::= MOBILE 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.MOBILE); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // modifiers ::= modifier 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Modifier e = (Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Modifier>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // modifiers ::= modifiers modifier 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Modifier e = (Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // modifiers_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Modifier>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // modifiers_opt ::= modifiers 
            {
              Sequence RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = m; 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // import_declaration ::= IMPORT package_access DOT MULT SEMICOLON 
            {
              Import RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Import(p.append(new Name(m)));  
              CUP$parser$result = new java_cup.runtime.Symbol(40/*import_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // import_declaration ::= IMPORT package_access SEMICOLON 
            {
              Import RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Import(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*import_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // import_declarations ::= import_declaration 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Import e = (Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Import>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*import_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // import_declarations ::= import_declarations import_declaration 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Import e = (Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*import_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // import_declarations_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Import>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*import_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // import_declarations_opt ::= import_declarations 
            {
              Sequence RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*import_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // package_declaration ::= PACKAGE IDENTIFIER SEMICOLON 
            {
              Name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*package_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // package_declaration_opt ::= 
            {
              Name RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*package_declaration_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // package_declaration_opt ::= package_declaration 
            {
              Name RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name p = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*package_declaration_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // pragma ::= PRAGMA IDENTIFIER SEMICOLON 
            {
              Pragma RESULT = null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pn = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pragma(new Name(pn), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*pragma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // pragma ::= PRAGMA IDENTIFIER STRING_LITERAL SEMICOLON 
            {
              Pragma RESULT = null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token pn = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pragma(new Name(pn), s.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*pragma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pragmas ::= pragmas pragma 
            {
              Sequence RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence ps = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pragma p = (Pragma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ps.append(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*pragmas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pragmas ::= pragma 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pragma p = (Pragma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Pragma>(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*pragmas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pragmas_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Pragma>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*pragmas_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // pragmas_opt ::= pragmas 
            {
              Sequence RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence ps = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ps; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*pragmas_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // compilation_unit ::= pragmas_opt package_declaration_opt import_declarations_opt type_declarations_opt 
            {
              Compilation RESULT = null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence pr = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name p = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence t = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Compilation(pr, p, i, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*compilation_unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // channel_type ::= SHARED CHAN LT type GT DOT WRITE 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.SHARED, t, ChannelEndType.WRITE_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // channel_type ::= SHARED CHAN LT type GT DOT READ 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.SHARED, t, ChannelEndType.READ_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // channel_type ::= CHAN LT type GT DOT WRITE 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.NOT_SHARED, t, ChannelEndType.WRITE_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // channel_type ::= CHAN LT type GT DOT READ 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.NOT_SHARED, t, ChannelEndType.READ_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // channel_type ::= CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.NOT_SHARED); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // channel_type ::= SHARED CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.SHARED_READ_WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // channel_type ::= SHARED WRITE CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.SHARED_WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // channel_type ::= SHARED READ CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.SHARED_READ); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // array_type ::= primary COLONCOLON IDENTIFIER dims 
            {
              ArrayType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(new NamedType(new Name(id, primary2PackageAccess(p))), d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // array_type ::= IDENTIFIER dims 
            {
              ArrayType RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(new NamedType(new Name(id)), d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // array_type ::= channel_type dims 
            {
              ArrayType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(t, d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // array_type ::= primitive_type dims 
            {
              ArrayType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(t, d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // named_type ::= IDENTIFIER COLONCOLON IDENTIFIER 
            {
              NamedType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NamedType(new Name(id, primary2PackageAccess(new NameExpr(new Name(p))))); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*named_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // named_type ::= primary COLONCOLON IDENTIFIER 
            {
              NamedType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NamedType(new Name(id, primary2PackageAccess(p))); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*named_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // named_type ::= IDENTIFIER 
            {
              NamedType RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NamedType(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*named_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primitive_type ::= TIMER 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.TimerKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // primitive_type ::= BARRIER 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.BarrierKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primitive_type ::= STRING 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.StringKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primitive_type ::= DOUBLE 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.DoubleKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primitive_type ::= FLOAT 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.FloatKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primitive_type ::= LONG 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.LongKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primitive_type ::= INT 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.IntKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primitive_type ::= SHORT 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.ShortKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primitive_type ::= BYTE 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.ByteKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // primitive_type ::= CHAR 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.CharKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primitive_type ::= BOOLEAN 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.BooleanKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= named_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NamedType t = (NamedType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= channel_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= array_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayType t = (ArrayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= primitive_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // record_member_declarator ::= variable_declarator_identifier 
            {
              Name RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*record_member_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // record_member_declarators ::= record_member_declarator 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Name>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*record_member_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // record_member_declarators ::= record_member_declarators COMMA record_member_declarator 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*record_member_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // record_member_declaration ::= type record_member_declarators SEMICOLON 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Sequence s = new Sequence<RecordMember>();
	                                                   for (Name n : (Sequence<Name>)r)
                                                             s.append(new RecordMember(t, n));
                                                           RESULT = s;
                                                         
              CUP$parser$result = new java_cup.runtime.Symbol(24/*record_member_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // record_member_declarations ::= record_member_declaration 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*record_member_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // record_member_declarations ::= record_member_declarations record_member_declaration 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.merge(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*record_member_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // record_body ::= LBRACE record_member_declarations RBRACE 
            {
              Sequence RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r;
              CUP$parser$result = new java_cup.runtime.Symbol(22/*record_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // record_type_declaration ::= modifiers_opt RECORD IDENTIFIER extends_opt record_body 
            {
              RecordTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RecordTypeDecl(m, new Name(id), e, r); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*record_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // record_body_opt ::= LBRACE RBRACE 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<RecordMember>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*record_body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // record_body_opt ::= record_body 
            {
              Sequence RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*record_body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // protocol_case ::= IDENTIFIER COLON record_body_opt 
            {
              ProtocolCase RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProtocolCase(new Name(id), r); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*protocol_case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // protocol_cases ::= protocol_case 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolCase e = (ProtocolCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<ProtocolCase>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*protocol_cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // protocol_cases ::= protocol_cases protocol_case 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolCase e = (ProtocolCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*protocol_cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // protocol_body ::= LBRACE protocol_cases RBRACE 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*protocol_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // extends_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Name>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*extends_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // extends_opt ::= EXTENDS type_list 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence t = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*extends_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // protocol_type_declaration ::= modifiers_opt PROTOCOL IDENTIFIER extends_opt SEMICOLON 
            {
              ProtocolTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtocolTypeDecl(m, new Name(id), e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*protocol_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // protocol_type_declaration ::= modifiers_opt PROTOCOL IDENTIFIER extends_opt protocol_body 
            {
              ProtocolTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProtocolTypeDecl(m, new Name(id), e, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*protocol_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formal_parameter ::= CONST type variable_declarator_identifier 
            {
              ParamDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParamDecl(t, v, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*formal_parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formal_parameter ::= type variable_declarator_identifier 
            {
              ParamDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParamDecl(t, v, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*formal_parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formal_parameter_list ::= formal_parameter 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ParamDecl e = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<ParamDecl>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ParamDecl e = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_parameter_list_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<ParamDecl>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              Sequence RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence f = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // package_access ::= package_access DOT IDENTIFIER 
            {
              Sequence RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence pa = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = pa.append(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*package_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // package_access ::= IDENTIFIER 
            {
              Sequence RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Name>(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*package_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_name ::= package_access COLONCOLON IDENTIFIER 
            {
              Name RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence pa = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id, pa); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_name ::= IDENTIFIER 
            {
              Name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_list ::= type_name 
            {
              Sequence RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Name>(tn); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_list ::= type_list COMMA type_name 
            {
              Sequence RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence tl = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tl.append(tn); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // implements_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Name>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*implements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // implements_opt ::= IMPLEMENTS type_list 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence t = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*implements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body_opt ::= SEMICOLON 
            {
              Block RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body_opt ::= block 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_type_declaration ::= modifiers_opt PROC VOID IDENTIFIER LPAREN formal_parameter_list_opt RPAREN implements_opt body_opt 
            {
              ProcTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence f = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProcTypeDecl(m, new PrimitiveType(t, PrimitiveType.VoidKind), new Name(id), f, i, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*procedure_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_type_declaration ::= modifiers_opt PROC type IDENTIFIER LPAREN formal_parameter_list_opt RPAREN implements_opt body_opt 
            {
              ProcTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence f = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProcTypeDecl(m, t, new Name(id), f, i, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*procedure_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extern_type ::= extern_type MULT 
            {
              Name RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 e.setName(e.getname() + "*"); RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*extern_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // extern_type ::= IDENTIFIER 
            {
              Name RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*extern_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration ::= EXTERN extern_type IDENTIFIER 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Type>(new NamedType(new Name(n), new ExternType(e))); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declaration ::= constant_declaration 
            {
              Sequence RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_declaration ::= protocol_type_declaration 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolTypeDecl p = (ProtocolTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Type>(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_declaration ::= record_type_declaration 
            {
              Sequence RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RecordTypeDecl r = (RecordTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Type>(r); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_declaration ::= procedure_type_declaration 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProcTypeDecl p = (ProcTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Type>(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_declarations ::= type_declaration 
            {
              Sequence RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence td = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = td; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_declarations ::= type_declarations type_declaration 
            {
              Sequence RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence ts = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence td = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ts.merge(td); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_declarations_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Type>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type_declarations_opt ::= type_declarations 
            {
              Sequence RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence ts = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ts; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= compilation_unit 
            {
              Compilation RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Compilation c = (Compilation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*source*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Compilation start_val = (Compilation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

